"use strict";
export const Authorization = validate20;
const schema31 = { "$id": "https://identity.foundation/dwn/json-schemas/authorization.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "type": "object", "additionalProperties": false, "properties": { "signature": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" } } };
const schema32 = { "$id": "https://identity.foundation/dwn/json-schemas/general-jws.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "type": "object", "additionalProperties": false, "properties": { "payload": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url" }, "signatures": { "type": "array", "minItems": 1, "items": { "type": "object", "properties": { "protected": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url" }, "signature": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url" } } } } } };
const schema34 = { "type": "string", "pattern": "^[A-Za-z0-9_-]+$" };
const pattern4 = new RegExp("^[A-Za-z0-9_-]+$", "u");
function validate21(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/general-jws.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate21.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!((key0 === "payload") || (key0 === "signatures"))) {
                validate21.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.payload !== undefined) {
                let data0 = data.payload;
                const _errs2 = errors;
                const _errs3 = errors;
                if (errors === _errs3) {
                    if (typeof data0 === "string") {
                        if (!pattern4.test(data0)) {
                            validate21.errors = [{ instancePath: instancePath + "/payload", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                            return false;
                        }
                    }
                    else {
                        validate21.errors = [{ instancePath: instancePath + "/payload", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                }
                var valid0 = _errs2 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.signatures !== undefined) {
                    let data1 = data.signatures;
                    const _errs5 = errors;
                    if (errors === _errs5) {
                        if (Array.isArray(data1)) {
                            if (data1.length < 1) {
                                validate21.errors = [{ instancePath: instancePath + "/signatures", schemaPath: "#/properties/signatures/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                return false;
                            }
                            else {
                                var valid2 = true;
                                const len0 = data1.length;
                                for (let i0 = 0; i0 < len0; i0++) {
                                    let data2 = data1[i0];
                                    const _errs7 = errors;
                                    if (errors === _errs7) {
                                        if (data2 && typeof data2 == "object" && !Array.isArray(data2)) {
                                            if (data2.protected !== undefined) {
                                                let data3 = data2.protected;
                                                const _errs9 = errors;
                                                const _errs10 = errors;
                                                if (errors === _errs10) {
                                                    if (typeof data3 === "string") {
                                                        if (!pattern4.test(data3)) {
                                                            validate21.errors = [{ instancePath: instancePath + "/signatures/" + i0 + "/protected", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                            return false;
                                                        }
                                                    }
                                                    else {
                                                        validate21.errors = [{ instancePath: instancePath + "/signatures/" + i0 + "/protected", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                }
                                                var valid3 = _errs9 === errors;
                                            }
                                            else {
                                                var valid3 = true;
                                            }
                                            if (valid3) {
                                                if (data2.signature !== undefined) {
                                                    let data4 = data2.signature;
                                                    const _errs12 = errors;
                                                    const _errs13 = errors;
                                                    if (errors === _errs13) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern4.test(data4)) {
                                                                validate21.errors = [{ instancePath: instancePath + "/signatures/" + i0 + "/signature", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate21.errors = [{ instancePath: instancePath + "/signatures/" + i0 + "/signature", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid3 = _errs12 === errors;
                                                }
                                                else {
                                                    var valid3 = true;
                                                }
                                            }
                                        }
                                        else {
                                            validate21.errors = [{ instancePath: instancePath + "/signatures/" + i0, schemaPath: "#/properties/signatures/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                            return false;
                                        }
                                    }
                                    var valid2 = _errs7 === errors;
                                    if (!valid2) {
                                        break;
                                    }
                                }
                            }
                        }
                        else {
                            validate21.errors = [{ instancePath: instancePath + "/signatures", schemaPath: "#/properties/signatures/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                            return false;
                        }
                    }
                    var valid0 = _errs5 === errors;
                }
                else {
                    var valid0 = true;
                }
            }
        }
    }
    else {
        validate21.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate21.errors = vErrors; return errors === 0; }
validate21.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
function validate20(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/authorization.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate20.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!(key0 === "signature")) {
                validate20.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.signature !== undefined) {
                if (!(validate21(data.signature, { instancePath: instancePath + "/signature", parentData: data, parentDataProperty: "signature", rootData, dynamicAnchors }))) {
                    vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                    errors = vErrors.length;
                }
            }
        }
    }
    else {
        validate20.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate20.errors = vErrors; return errors === 0; }
validate20.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const AuthorizationDelegatedGrant = validate24;
const schema37 = { "$id": "https://identity.foundation/dwn/json-schemas/authorization-delegated-grant.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "type": "object", "additionalProperties": false, "properties": { "signature": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" }, "authorDelegatedGrant": { "$ref": "https://identity.foundation/dwn/json-schemas/records-write-data-encoded.json" } } };
const schema38 = { "$id": "https://identity.foundation/dwn/json-schemas/records-write-data-encoded.json", "$ref": "https://identity.foundation/dwn/json-schemas/records-write-unidentified.json", "unevaluatedProperties": false, "type": "object", "required": ["recordId", "authorization", "encodedData"], "properties": { "encodedData": { "type": "string" } } };
const schema39 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/records-write-unidentified.json", "type": "object", "required": ["descriptor"], "properties": { "recordId": { "type": "string" }, "contextId": { "type": "string", "pattern": "^[a-zA-Z0-9]+(/[a-zA-Z0-9]+)*$" }, "attestation": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" }, "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization-owner.json" }, "encryption": { "type": "object", "properties": { "algorithm": { "type": "string", "enum": ["A256CTR"] }, "initializationVector": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url" }, "keyEncryption": { "type": "array", "minItems": 1, "items": { "type": "object", "properties": { "rootKeyId": { "type": "string" }, "derivationScheme": { "type": "string", "enum": ["dataFormats", "protocolContext", "protocolPath", "schemas"] }, "derivedPublicKey": { "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json" }, "algorithm": { "type": "string", "enum": ["ECIES-ES256K"] }, "encryptedKey": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url" }, "initializationVector": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url" }, "ephemeralPublicKey": { "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json" }, "messageAuthenticationCode": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url" } }, "additionalProperties": false, "required": ["rootKeyId", "derivationScheme", "algorithm", "encryptedKey", "initializationVector", "ephemeralPublicKey", "messageAuthenticationCode"] } } }, "additionalProperties": false, "required": ["algorithm", "initializationVector", "keyEncryption"] }, "descriptor": { "type": "object", "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Write"], "type": "string" }, "recipient": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did" }, "protocol": { "type": "string" }, "protocolPath": { "type": "string", "pattern": "^[a-zA-Z]+(/[a-zA-Z]+)*$" }, "schema": { "type": "string" }, "tags": { "type": "object", "minProperties": 1, "maxProperties": 10, "additionalProperties": { "oneOf": [{ "type": "string" }, { "type": "number" }, { "type": "boolean" }, { "type": "array", "minItems": 1, "maxItems": 10, "items": { "type": "string" } }, { "type": "array", "minItems": 1, "maxItems": 10, "items": { "type": "number" } }] } }, "parentId": { "type": "string" }, "dataCid": { "type": "string" }, "dataSize": { "type": "number" }, "dateCreated": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "published": { "type": "boolean" }, "datePublished": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "dataFormat": { "type": "string" } }, "additionalProperties": false, "required": ["interface", "method", "dataCid", "dataSize", "dateCreated", "messageTimestamp", "dataFormat"], "dependencies": { "parentId": ["protocol"] }, "allOf": [{ "$comment": "rule defining `published` and `datePublished` relationship", "anyOf": [{ "properties": { "published": { "type": "boolean", "enum": [true] } }, "required": ["published", "datePublished"] }, { "properties": { "published": { "type": "boolean", "enum": [false] } }, "not": { "required": ["datePublished"] } }, { "allOf": [{ "not": { "required": ["published"] } }, { "not": { "required": ["datePublished"] } }] }] }] } }, "$comment": "rule defining `protocol` and `contextId` relationship", "anyOf": [{ "properties": { "descriptor": { "type": "object", "required": ["protocol", "protocolPath"] } }, "required": ["contextId"] }, { "allOf": [{ "not": { "required": ["contextId"] } }, { "properties": { "descriptor": { "type": "object", "not": { "required": ["protocol"] } } } }, { "properties": { "descriptor": { "type": "object", "not": { "required": ["protocolPath"] } } } }] }] };
const schema47 = { "type": "string", "pattern": "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" };
const schema48 = { "type": "string", "pattern": "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" };
const pattern7 = new RegExp("^[a-zA-Z0-9]+(/[a-zA-Z0-9]+)*$", "u");
const pattern12 = new RegExp("^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$", "u");
const pattern13 = new RegExp("^[a-zA-Z]+(/[a-zA-Z]+)*$", "u");
const pattern14 = new RegExp("^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$", "u");
const schema40 = { "$id": "https://identity.foundation/dwn/json-schemas/authorization-owner.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "type": "object", "additionalProperties": false, "properties": { "signature": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" }, "authorDelegatedGrant": { "$ref": "https://identity.foundation/dwn/json-schemas/records-write-data-encoded.json" }, "ownerSignature": { "$ref": "https://identity.foundation/dwn/json-schemas/general-jws.json" }, "ownerDelegatedGrant": { "$ref": "https://identity.foundation/dwn/json-schemas/records-write-data-encoded.json" } }, "description": "`signature` can exist by itself. But if `ownerSignature` is present, then `signature` must also exist", "dependencies": { "ownerSignature": ["signature"] } };
const wrapper0 = { validate: validate26 };
function validate29(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) {
    ;
    let vErrors = null;
    let errors = 0;
    const evaluated0 = validate29.evaluated;
    if (evaluated0.dynamicProps) {
        evaluated0.props = undefined;
    }
    if (evaluated0.dynamicItems) {
        evaluated0.items = undefined;
    }
    if (errors === 0) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "signature") || (key0 === "authorDelegatedGrant")) || (key0 === "ownerSignature")) || (key0 === "ownerDelegatedGrant"))) {
                    validate29.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                let missing0;
                if (data.ownerSignature !== undefined && ((data.signature === undefined) && (missing0 = "signature"))) {
                    validate29.errors = [{ instancePath, schemaPath: "#/dependencies", keyword: "dependencies", params: { property: "ownerSignature",
                                missingProperty: missing0,
                                depsCount: 1,
                                deps: "signature" }, message: "must have property signature when property ownerSignature is present" }];
                    return false;
                }
                else {
                    if (data.signature !== undefined) {
                        const _errs2 = errors;
                        if (!(validate21(data.signature, { instancePath: instancePath + "/signature", parentData: data, parentDataProperty: "signature", rootData, dynamicAnchors }))) {
                            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                            errors = vErrors.length;
                        }
                        var valid1 = _errs2 === errors;
                    }
                    else {
                        var valid1 = true;
                    }
                    if (valid1) {
                        if (data.authorDelegatedGrant !== undefined) {
                            const _errs3 = errors;
                            if (!(wrapper0.validate(data.authorDelegatedGrant, { instancePath: instancePath + "/authorDelegatedGrant", parentData: data, parentDataProperty: "authorDelegatedGrant", rootData, dynamicAnchors }))) {
                                vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);
                                errors = vErrors.length;
                            }
                            var valid1 = _errs3 === errors;
                        }
                        else {
                            var valid1 = true;
                        }
                        if (valid1) {
                            if (data.ownerSignature !== undefined) {
                                const _errs4 = errors;
                                if (!(validate21(data.ownerSignature, { instancePath: instancePath + "/ownerSignature", parentData: data, parentDataProperty: "ownerSignature", rootData, dynamicAnchors }))) {
                                    vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                                    errors = vErrors.length;
                                }
                                var valid1 = _errs4 === errors;
                            }
                            else {
                                var valid1 = true;
                            }
                            if (valid1) {
                                if (data.ownerDelegatedGrant !== undefined) {
                                    const _errs5 = errors;
                                    if (!(wrapper0.validate(data.ownerDelegatedGrant, { instancePath: instancePath + "/ownerDelegatedGrant", parentData: data, parentDataProperty: "ownerDelegatedGrant", rootData, dynamicAnchors }))) {
                                        vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);
                                        errors = vErrors.length;
                                    }
                                    var valid1 = _errs5 === errors;
                                }
                                else {
                                    var valid1 = true;
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            validate29.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
            return false;
        }
    }
    validate29.errors = vErrors;
    return errors === 0;
}
validate29.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
const schema42 = { "$id": "https://identity.foundation/dwn/json-schemas/public-jwk.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "$ref": "https://identity.foundation/dwn/json-schemas/general-jwk.json", "not": { "anyOf": [{ "type": "object", "properties": { "kty": { "const": "EC" } }, "anyOf": [{ "required": ["d"] }] }, { "type": "object", "properties": { "kty": { "const": "OKP" } }, "anyOf": [{ "required": ["d"] }] }, { "type": "object", "properties": { "kty": { "const": "RSA" }, "d": {}, "p": {}, "q": {}, "dp": {}, "dq": {}, "qi": {}, "oth": { "type": "object" } }, "anyOf": [{ "required": ["d"] }, { "required": ["p"] }, { "required": ["q"] }, { "required": ["dp"] }, { "required": ["dq"] }, { "required": ["qi"] }, { "required": ["oth"] }] }] } };
const schema43 = { "$id": "https://identity.foundation/dwn/json-schemas/general-jwk.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "type": "object", "required": ["kty"], "properties": { "alg": { "type": "string" }, "kid": { "type": "string" }, "kty": { "enum": ["EC", "RSA", "oct", "OKP"] }, "crv": { "type": "string" }, "use": { "type": "string" }, "key_ops": { "type": "string" }, "x5u": { "type": "string" }, "x5c": { "type": "string" }, "x5t": { "type": "string" }, "x5t#S256": { "type": "string" } }, "oneOf": [{ "properties": { "kty": { "const": "EC" }, "crv": { "type": "string" }, "x": { "type": "string" }, "y": { "type": "string" }, "d": { "type": "string" } }, "required": ["crv", "x"] }, { "properties": { "kty": { "const": "OKP" }, "crv": { "type": "string" }, "x": { "type": "string" }, "d": { "type": "string" } }, "required": ["crv", "x"] }, { "properties": { "kty": { "const": "RSA" }, "n": { "type": "string" }, "e": { "type": "string" }, "d": { "type": "string" }, "p": { "type": "string" }, "q": { "type": "string" }, "dp": { "type": "string" }, "dq": { "type": "string" }, "qi": { "type": "string" }, "oth": { "type": "object" } }, "required": ["n", "e"] }, { "properties": { "kty": { "const": "oct" }, "k": { "type": "string" } }, "required": ["k"] }] };
function validate33(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/public-jwk.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate33.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} const _errs0 = errors; const _errs2 = errors; let valid1 = false; let passing0 = null; const _errs3 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing0;
    if (((data.crv === undefined) && (missing0 = "crv")) || ((data.x === undefined) && (missing0 = "x"))) {
        const err0 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    else {
        if (data.kty !== undefined) {
            const _errs4 = errors;
            if ("EC" !== data.kty) {
                const err1 = { instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/kty/const", keyword: "const", params: { allowedValue: "EC" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err1];
                }
                else {
                    vErrors.push(err1);
                }
                errors++;
            }
            var valid2 = _errs4 === errors;
        }
        else {
            var valid2 = true;
        }
        if (valid2) {
            if (data.crv !== undefined) {
                const _errs5 = errors;
                if (typeof data.crv !== "string") {
                    const err2 = { instancePath: instancePath + "/crv", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
                var valid2 = _errs5 === errors;
            }
            else {
                var valid2 = true;
            }
            if (valid2) {
                if (data.x !== undefined) {
                    const _errs7 = errors;
                    if (typeof data.x !== "string") {
                        const err3 = { instancePath: instancePath + "/x", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/x/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err3];
                        }
                        else {
                            vErrors.push(err3);
                        }
                        errors++;
                    }
                    var valid2 = _errs7 === errors;
                }
                else {
                    var valid2 = true;
                }
                if (valid2) {
                    if (data.y !== undefined) {
                        const _errs9 = errors;
                        if (typeof data.y !== "string") {
                            const err4 = { instancePath: instancePath + "/y", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/y/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err4];
                            }
                            else {
                                vErrors.push(err4);
                            }
                            errors++;
                        }
                        var valid2 = _errs9 === errors;
                    }
                    else {
                        var valid2 = true;
                    }
                    if (valid2) {
                        if (data.d !== undefined) {
                            const _errs11 = errors;
                            if (typeof data.d !== "string") {
                                const err5 = { instancePath: instancePath + "/d", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/0/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err5];
                                }
                                else {
                                    vErrors.push(err5);
                                }
                                errors++;
                            }
                            var valid2 = _errs11 === errors;
                        }
                        else {
                            var valid2 = true;
                        }
                    }
                }
            }
        }
    }
} var _valid0 = _errs3 === errors; if (_valid0) {
    valid1 = true;
    passing0 = 0;
    var props0 = {};
    props0.kty = true;
    props0.crv = true;
    props0.x = true;
    props0.y = true;
    props0.d = true;
} const _errs13 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing1;
    if (((data.crv === undefined) && (missing1 = "crv")) || ((data.x === undefined) && (missing1 = "x"))) {
        const err6 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
        if (vErrors === null) {
            vErrors = [err6];
        }
        else {
            vErrors.push(err6);
        }
        errors++;
    }
    else {
        if (data.kty !== undefined) {
            const _errs14 = errors;
            if ("OKP" !== data.kty) {
                const err7 = { instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/properties/kty/const", keyword: "const", params: { allowedValue: "OKP" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err7];
                }
                else {
                    vErrors.push(err7);
                }
                errors++;
            }
            var valid3 = _errs14 === errors;
        }
        else {
            var valid3 = true;
        }
        if (valid3) {
            if (data.crv !== undefined) {
                const _errs15 = errors;
                if (typeof data.crv !== "string") {
                    const err8 = { instancePath: instancePath + "/crv", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err8];
                    }
                    else {
                        vErrors.push(err8);
                    }
                    errors++;
                }
                var valid3 = _errs15 === errors;
            }
            else {
                var valid3 = true;
            }
            if (valid3) {
                if (data.x !== undefined) {
                    const _errs17 = errors;
                    if (typeof data.x !== "string") {
                        const err9 = { instancePath: instancePath + "/x", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/properties/x/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err9];
                        }
                        else {
                            vErrors.push(err9);
                        }
                        errors++;
                    }
                    var valid3 = _errs17 === errors;
                }
                else {
                    var valid3 = true;
                }
                if (valid3) {
                    if (data.d !== undefined) {
                        const _errs19 = errors;
                        if (typeof data.d !== "string") {
                            const err10 = { instancePath: instancePath + "/d", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/1/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err10];
                            }
                            else {
                                vErrors.push(err10);
                            }
                            errors++;
                        }
                        var valid3 = _errs19 === errors;
                    }
                    else {
                        var valid3 = true;
                    }
                }
            }
        }
    }
} var _valid0 = _errs13 === errors; if (_valid0 && valid1) {
    valid1 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid1 = true;
        passing0 = 1;
        if (props0 !== true) {
            props0 = props0 || {};
            props0.kty = true;
            props0.crv = true;
            props0.x = true;
            props0.d = true;
        }
    }
    const _errs21 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing2;
        if (((data.n === undefined) && (missing2 = "n")) || ((data.e === undefined) && (missing2 = "e"))) {
            const err11 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
            if (vErrors === null) {
                vErrors = [err11];
            }
            else {
                vErrors.push(err11);
            }
            errors++;
        }
        else {
            if (data.kty !== undefined) {
                const _errs22 = errors;
                if ("RSA" !== data.kty) {
                    const err12 = { instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/kty/const", keyword: "const", params: { allowedValue: "RSA" }, message: "must be equal to constant" };
                    if (vErrors === null) {
                        vErrors = [err12];
                    }
                    else {
                        vErrors.push(err12);
                    }
                    errors++;
                }
                var valid4 = _errs22 === errors;
            }
            else {
                var valid4 = true;
            }
            if (valid4) {
                if (data.n !== undefined) {
                    const _errs23 = errors;
                    if (typeof data.n !== "string") {
                        const err13 = { instancePath: instancePath + "/n", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/n/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err13];
                        }
                        else {
                            vErrors.push(err13);
                        }
                        errors++;
                    }
                    var valid4 = _errs23 === errors;
                }
                else {
                    var valid4 = true;
                }
                if (valid4) {
                    if (data.e !== undefined) {
                        const _errs25 = errors;
                        if (typeof data.e !== "string") {
                            const err14 = { instancePath: instancePath + "/e", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/e/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err14];
                            }
                            else {
                                vErrors.push(err14);
                            }
                            errors++;
                        }
                        var valid4 = _errs25 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                    if (valid4) {
                        if (data.d !== undefined) {
                            const _errs27 = errors;
                            if (typeof data.d !== "string") {
                                const err15 = { instancePath: instancePath + "/d", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err15];
                                }
                                else {
                                    vErrors.push(err15);
                                }
                                errors++;
                            }
                            var valid4 = _errs27 === errors;
                        }
                        else {
                            var valid4 = true;
                        }
                        if (valid4) {
                            if (data.p !== undefined) {
                                const _errs29 = errors;
                                if (typeof data.p !== "string") {
                                    const err16 = { instancePath: instancePath + "/p", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/p/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err16];
                                    }
                                    else {
                                        vErrors.push(err16);
                                    }
                                    errors++;
                                }
                                var valid4 = _errs29 === errors;
                            }
                            else {
                                var valid4 = true;
                            }
                            if (valid4) {
                                if (data.q !== undefined) {
                                    const _errs31 = errors;
                                    if (typeof data.q !== "string") {
                                        const err17 = { instancePath: instancePath + "/q", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/q/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err17];
                                        }
                                        else {
                                            vErrors.push(err17);
                                        }
                                        errors++;
                                    }
                                    var valid4 = _errs31 === errors;
                                }
                                else {
                                    var valid4 = true;
                                }
                                if (valid4) {
                                    if (data.dp !== undefined) {
                                        const _errs33 = errors;
                                        if (typeof data.dp !== "string") {
                                            const err18 = { instancePath: instancePath + "/dp", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/dp/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err18];
                                            }
                                            else {
                                                vErrors.push(err18);
                                            }
                                            errors++;
                                        }
                                        var valid4 = _errs33 === errors;
                                    }
                                    else {
                                        var valid4 = true;
                                    }
                                    if (valid4) {
                                        if (data.dq !== undefined) {
                                            const _errs35 = errors;
                                            if (typeof data.dq !== "string") {
                                                const err19 = { instancePath: instancePath + "/dq", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/dq/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err19];
                                                }
                                                else {
                                                    vErrors.push(err19);
                                                }
                                                errors++;
                                            }
                                            var valid4 = _errs35 === errors;
                                        }
                                        else {
                                            var valid4 = true;
                                        }
                                        if (valid4) {
                                            if (data.qi !== undefined) {
                                                const _errs37 = errors;
                                                if (typeof data.qi !== "string") {
                                                    const err20 = { instancePath: instancePath + "/qi", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/qi/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err20];
                                                    }
                                                    else {
                                                        vErrors.push(err20);
                                                    }
                                                    errors++;
                                                }
                                                var valid4 = _errs37 === errors;
                                            }
                                            else {
                                                var valid4 = true;
                                            }
                                            if (valid4) {
                                                if (data.oth !== undefined) {
                                                    let data18 = data.oth;
                                                    const _errs39 = errors;
                                                    if (!(data18 && typeof data18 == "object" && !Array.isArray(data18))) {
                                                        const err21 = { instancePath: instancePath + "/oth", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/2/properties/oth/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                        if (vErrors === null) {
                                                            vErrors = [err21];
                                                        }
                                                        else {
                                                            vErrors.push(err21);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid4 = _errs39 === errors;
                                                }
                                                else {
                                                    var valid4 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    var _valid0 = _errs21 === errors;
    if (_valid0 && valid1) {
        valid1 = false;
        passing0 = [passing0, 2];
    }
    else {
        if (_valid0) {
            valid1 = true;
            passing0 = 2;
            if (props0 !== true) {
                props0 = props0 || {};
                props0.kty = true;
                props0.n = true;
                props0.e = true;
                props0.d = true;
                props0.p = true;
                props0.q = true;
                props0.dp = true;
                props0.dq = true;
                props0.qi = true;
                props0.oth = true;
            }
        }
        const _errs41 = errors;
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing3;
            if ((data.k === undefined) && (missing3 = "k")) {
                const err22 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/3/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                if (vErrors === null) {
                    vErrors = [err22];
                }
                else {
                    vErrors.push(err22);
                }
                errors++;
            }
            else {
                if (data.kty !== undefined) {
                    const _errs42 = errors;
                    if ("oct" !== data.kty) {
                        const err23 = { instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/3/properties/kty/const", keyword: "const", params: { allowedValue: "oct" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err23];
                        }
                        else {
                            vErrors.push(err23);
                        }
                        errors++;
                    }
                    var valid5 = _errs42 === errors;
                }
                else {
                    var valid5 = true;
                }
                if (valid5) {
                    if (data.k !== undefined) {
                        const _errs43 = errors;
                        if (typeof data.k !== "string") {
                            const err24 = { instancePath: instancePath + "/k", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf/3/properties/k/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err24];
                            }
                            else {
                                vErrors.push(err24);
                            }
                            errors++;
                        }
                        var valid5 = _errs43 === errors;
                    }
                    else {
                        var valid5 = true;
                    }
                }
            }
        }
        var _valid0 = _errs41 === errors;
        if (_valid0 && valid1) {
            valid1 = false;
            passing0 = [passing0, 3];
        }
        else {
            if (_valid0) {
                valid1 = true;
                passing0 = 3;
                if (props0 !== true) {
                    props0 = props0 || {};
                    props0.kty = true;
                    props0.k = true;
                }
            }
        }
    }
} if (!valid1) {
    const err25 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err25];
    }
    else {
        vErrors.push(err25);
    }
    errors++;
    validate33.errors = vErrors;
    return false;
}
else {
    errors = _errs2;
    if (vErrors !== null) {
        if (_errs2) {
            vErrors.length = _errs2;
        }
        else {
            vErrors = null;
        }
    }
} if (errors === _errs0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing4;
        if ((data.kty === undefined) && (missing4 = "kty")) {
            validate33.errors = [{ instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }];
            return false;
        }
        else {
            if (props0 !== true) {
                props0 = props0 || {};
                props0.alg = true;
                props0.kid = true;
                props0.kty = true;
                props0.crv = true;
                props0.use = true;
                props0.key_ops = true;
                props0.x5u = true;
                props0.x5c = true;
                props0.x5t = true;
                props0["x5t#S256"] = true;
            }
            if (data.alg !== undefined) {
                const _errs45 = errors;
                if (typeof data.alg !== "string") {
                    validate33.errors = [{ instancePath: instancePath + "/alg", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/alg/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid6 = _errs45 === errors;
            }
            else {
                var valid6 = true;
            }
            if (valid6) {
                if (data.kid !== undefined) {
                    const _errs47 = errors;
                    if (typeof data.kid !== "string") {
                        validate33.errors = [{ instancePath: instancePath + "/kid", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/kid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid6 = _errs47 === errors;
                }
                else {
                    var valid6 = true;
                }
                if (valid6) {
                    if (data.kty !== undefined) {
                        let data23 = data.kty;
                        const _errs49 = errors;
                        if (!((((data23 === "EC") || (data23 === "RSA")) || (data23 === "oct")) || (data23 === "OKP"))) {
                            validate33.errors = [{ instancePath: instancePath + "/kty", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/kty/enum", keyword: "enum", params: { allowedValues: schema43.properties.kty.enum }, message: "must be equal to one of the allowed values" }];
                            return false;
                        }
                        var valid6 = _errs49 === errors;
                    }
                    else {
                        var valid6 = true;
                    }
                    if (valid6) {
                        if (data.crv !== undefined) {
                            const _errs50 = errors;
                            if (typeof data.crv !== "string") {
                                validate33.errors = [{ instancePath: instancePath + "/crv", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid6 = _errs50 === errors;
                        }
                        else {
                            var valid6 = true;
                        }
                        if (valid6) {
                            if (data.use !== undefined) {
                                const _errs52 = errors;
                                if (typeof data.use !== "string") {
                                    validate33.errors = [{ instancePath: instancePath + "/use", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/use/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid6 = _errs52 === errors;
                            }
                            else {
                                var valid6 = true;
                            }
                            if (valid6) {
                                if (data.key_ops !== undefined) {
                                    const _errs54 = errors;
                                    if (typeof data.key_ops !== "string") {
                                        validate33.errors = [{ instancePath: instancePath + "/key_ops", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/key_ops/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid6 = _errs54 === errors;
                                }
                                else {
                                    var valid6 = true;
                                }
                                if (valid6) {
                                    if (data.x5u !== undefined) {
                                        const _errs56 = errors;
                                        if (typeof data.x5u !== "string") {
                                            validate33.errors = [{ instancePath: instancePath + "/x5u", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/x5u/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid6 = _errs56 === errors;
                                    }
                                    else {
                                        var valid6 = true;
                                    }
                                    if (valid6) {
                                        if (data.x5c !== undefined) {
                                            const _errs58 = errors;
                                            if (typeof data.x5c !== "string") {
                                                validate33.errors = [{ instancePath: instancePath + "/x5c", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/x5c/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid6 = _errs58 === errors;
                                        }
                                        else {
                                            var valid6 = true;
                                        }
                                        if (valid6) {
                                            if (data.x5t !== undefined) {
                                                const _errs60 = errors;
                                                if (typeof data.x5t !== "string") {
                                                    validate33.errors = [{ instancePath: instancePath + "/x5t", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/x5t/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid6 = _errs60 === errors;
                                            }
                                            else {
                                                var valid6 = true;
                                            }
                                            if (valid6) {
                                                if (data["x5t#S256"] !== undefined) {
                                                    const _errs62 = errors;
                                                    if (typeof data["x5t#S256"] !== "string") {
                                                        validate33.errors = [{ instancePath: instancePath + "/x5t#S256", schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/properties/x5t%23S256/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid6 = _errs62 === errors;
                                                }
                                                else {
                                                    var valid6 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate33.errors = [{ instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/general-jwk.json/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} var valid0 = _errs0 === errors; if (valid0) {
    const _errs64 = errors;
    const _errs65 = errors;
    const _errs66 = errors;
    let valid8 = false;
    const _errs67 = errors;
    const _errs69 = errors;
    let valid9 = false;
    const _errs70 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing5;
        if ((data.d === undefined) && (missing5 = "d")) {
            const err26 = {};
            if (vErrors === null) {
                vErrors = [err26];
            }
            else {
                vErrors.push(err26);
            }
            errors++;
        }
    }
    var _valid2 = _errs70 === errors;
    valid9 = valid9 || _valid2;
    if (!valid9) {
        const err27 = {};
        if (vErrors === null) {
            vErrors = [err27];
        }
        else {
            vErrors.push(err27);
        }
        errors++;
    }
    else {
        errors = _errs69;
        if (vErrors !== null) {
            if (_errs69) {
                vErrors.length = _errs69;
            }
            else {
                vErrors = null;
            }
        }
    }
    if (errors === _errs67) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            if (data.kty !== undefined) {
                if ("EC" !== data.kty) {
                    const err28 = {};
                    if (vErrors === null) {
                        vErrors = [err28];
                    }
                    else {
                        vErrors.push(err28);
                    }
                    errors++;
                }
            }
        }
        else {
            const err29 = {};
            if (vErrors === null) {
                vErrors = [err29];
            }
            else {
                vErrors.push(err29);
            }
            errors++;
        }
    }
    var _valid1 = _errs67 === errors;
    valid8 = valid8 || _valid1;
    if (_valid1) {
        var props1 = {};
        props1.kty = true;
    }
    const _errs72 = errors;
    const _errs74 = errors;
    let valid11 = false;
    const _errs75 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing6;
        if ((data.d === undefined) && (missing6 = "d")) {
            const err30 = {};
            if (vErrors === null) {
                vErrors = [err30];
            }
            else {
                vErrors.push(err30);
            }
            errors++;
        }
    }
    var _valid3 = _errs75 === errors;
    valid11 = valid11 || _valid3;
    if (!valid11) {
        const err31 = {};
        if (vErrors === null) {
            vErrors = [err31];
        }
        else {
            vErrors.push(err31);
        }
        errors++;
    }
    else {
        errors = _errs74;
        if (vErrors !== null) {
            if (_errs74) {
                vErrors.length = _errs74;
            }
            else {
                vErrors = null;
            }
        }
    }
    if (errors === _errs72) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            if (data.kty !== undefined) {
                if ("OKP" !== data.kty) {
                    const err32 = {};
                    if (vErrors === null) {
                        vErrors = [err32];
                    }
                    else {
                        vErrors.push(err32);
                    }
                    errors++;
                }
            }
        }
        else {
            const err33 = {};
            if (vErrors === null) {
                vErrors = [err33];
            }
            else {
                vErrors.push(err33);
            }
            errors++;
        }
    }
    var _valid1 = _errs72 === errors;
    valid8 = valid8 || _valid1;
    if (_valid1) {
        if (props1 !== true) {
            props1 = props1 || {};
            props1.kty = true;
        }
    }
    const _errs77 = errors;
    const _errs79 = errors;
    let valid13 = false;
    const _errs80 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing7;
        if ((data.d === undefined) && (missing7 = "d")) {
            const err34 = {};
            if (vErrors === null) {
                vErrors = [err34];
            }
            else {
                vErrors.push(err34);
            }
            errors++;
        }
    }
    var _valid4 = _errs80 === errors;
    valid13 = valid13 || _valid4;
    const _errs81 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing8;
        if ((data.p === undefined) && (missing8 = "p")) {
            const err35 = {};
            if (vErrors === null) {
                vErrors = [err35];
            }
            else {
                vErrors.push(err35);
            }
            errors++;
        }
    }
    var _valid4 = _errs81 === errors;
    valid13 = valid13 || _valid4;
    const _errs82 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing9;
        if ((data.q === undefined) && (missing9 = "q")) {
            const err36 = {};
            if (vErrors === null) {
                vErrors = [err36];
            }
            else {
                vErrors.push(err36);
            }
            errors++;
        }
    }
    var _valid4 = _errs82 === errors;
    valid13 = valid13 || _valid4;
    const _errs83 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing10;
        if ((data.dp === undefined) && (missing10 = "dp")) {
            const err37 = {};
            if (vErrors === null) {
                vErrors = [err37];
            }
            else {
                vErrors.push(err37);
            }
            errors++;
        }
    }
    var _valid4 = _errs83 === errors;
    valid13 = valid13 || _valid4;
    const _errs84 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing11;
        if ((data.dq === undefined) && (missing11 = "dq")) {
            const err38 = {};
            if (vErrors === null) {
                vErrors = [err38];
            }
            else {
                vErrors.push(err38);
            }
            errors++;
        }
    }
    var _valid4 = _errs84 === errors;
    valid13 = valid13 || _valid4;
    const _errs85 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing12;
        if ((data.qi === undefined) && (missing12 = "qi")) {
            const err39 = {};
            if (vErrors === null) {
                vErrors = [err39];
            }
            else {
                vErrors.push(err39);
            }
            errors++;
        }
    }
    var _valid4 = _errs85 === errors;
    valid13 = valid13 || _valid4;
    const _errs86 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing13;
        if ((data.oth === undefined) && (missing13 = "oth")) {
            const err40 = {};
            if (vErrors === null) {
                vErrors = [err40];
            }
            else {
                vErrors.push(err40);
            }
            errors++;
        }
    }
    var _valid4 = _errs86 === errors;
    valid13 = valid13 || _valid4;
    if (!valid13) {
        const err41 = {};
        if (vErrors === null) {
            vErrors = [err41];
        }
        else {
            vErrors.push(err41);
        }
        errors++;
    }
    else {
        errors = _errs79;
        if (vErrors !== null) {
            if (_errs79) {
                vErrors.length = _errs79;
            }
            else {
                vErrors = null;
            }
        }
    }
    if (errors === _errs77) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            if (data.kty !== undefined) {
                const _errs87 = errors;
                if ("RSA" !== data.kty) {
                    const err42 = {};
                    if (vErrors === null) {
                        vErrors = [err42];
                    }
                    else {
                        vErrors.push(err42);
                    }
                    errors++;
                }
                var valid14 = _errs87 === errors;
            }
            else {
                var valid14 = true;
            }
            if (valid14) {
                if (data.oth !== undefined) {
                    let data34 = data.oth;
                    const _errs88 = errors;
                    if (!(data34 && typeof data34 == "object" && !Array.isArray(data34))) {
                        const err43 = {};
                        if (vErrors === null) {
                            vErrors = [err43];
                        }
                        else {
                            vErrors.push(err43);
                        }
                        errors++;
                    }
                    var valid14 = _errs88 === errors;
                }
                else {
                    var valid14 = true;
                }
            }
        }
        else {
            const err44 = {};
            if (vErrors === null) {
                vErrors = [err44];
            }
            else {
                vErrors.push(err44);
            }
            errors++;
        }
    }
    var _valid1 = _errs77 === errors;
    valid8 = valid8 || _valid1;
    if (_valid1) {
        if (props1 !== true) {
            props1 = props1 || {};
            props1.kty = true;
            props1.d = true;
            props1.p = true;
            props1.q = true;
            props1.dp = true;
            props1.dq = true;
            props1.qi = true;
            props1.oth = true;
        }
    }
    if (!valid8) {
        const err45 = {};
        if (vErrors === null) {
            vErrors = [err45];
        }
        else {
            vErrors.push(err45);
        }
        errors++;
    }
    else {
        errors = _errs66;
        if (vErrors !== null) {
            if (_errs66) {
                vErrors.length = _errs66;
            }
            else {
                vErrors = null;
            }
        }
    }
    var valid7 = _errs65 === errors;
    if (valid7) {
        validate33.errors = [{ instancePath, schemaPath: "#/not", keyword: "not", params: {}, message: "must NOT be valid" }];
        return false;
    }
    else {
        errors = _errs64;
        if (vErrors !== null) {
            if (_errs64) {
                vErrors.length = _errs64;
            }
            else {
                vErrors = null;
            }
        }
    }
} validate33.errors = vErrors; evaluated0.props = props0; return errors === 0; }
validate33.evaluated = { "dynamicProps": true, "dynamicItems": false };
const func1 = Object.prototype.hasOwnProperty;
function validate27(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) {
    ;
    let vErrors = null;
    let errors = 0;
    const evaluated0 = validate27.evaluated;
    if (evaluated0.dynamicProps) {
        evaluated0.props = undefined;
    }
    if (evaluated0.dynamicItems) {
        evaluated0.items = undefined;
    }
    const _errs2 = errors;
    let valid0 = false;
    const _errs3 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.contextId === undefined) && (missing0 = "contextId")) {
            const err0 = { instancePath, schemaPath: "#/anyOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
        else {
            if (data.descriptor !== undefined) {
                let data0 = data.descriptor;
                const _errs4 = errors;
                if (errors === _errs4) {
                    if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
                        let missing1;
                        if (((data0.protocol === undefined) && (missing1 = "protocol")) || ((data0.protocolPath === undefined) && (missing1 = "protocolPath"))) {
                            const err1 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/0/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
                            if (vErrors === null) {
                                vErrors = [err1];
                            }
                            else {
                                vErrors.push(err1);
                            }
                            errors++;
                        }
                    }
                    else {
                        const err2 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/0/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                        if (vErrors === null) {
                            vErrors = [err2];
                        }
                        else {
                            vErrors.push(err2);
                        }
                        errors++;
                    }
                }
            }
        }
    }
    var _valid0 = _errs3 === errors;
    valid0 = valid0 || _valid0;
    if (_valid0) {
        var props0 = {};
        props0.descriptor = true;
    }
    const _errs6 = errors;
    const _errs7 = errors;
    const _errs8 = errors;
    const _errs9 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing2;
        if ((data.contextId === undefined) && (missing2 = "contextId")) {
            const err3 = {};
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    var valid3 = _errs9 === errors;
    if (valid3) {
        const err4 = { instancePath, schemaPath: "#/anyOf/1/allOf/0/not", keyword: "not", params: {}, message: "must NOT be valid" };
        if (vErrors === null) {
            vErrors = [err4];
        }
        else {
            vErrors.push(err4);
        }
        errors++;
    }
    else {
        errors = _errs8;
        if (vErrors !== null) {
            if (_errs8) {
                vErrors.length = _errs8;
            }
            else {
                vErrors = null;
            }
        }
    }
    var valid2 = _errs7 === errors;
    if (valid2) {
        const _errs10 = errors;
        if (data && typeof data == "object" && !Array.isArray(data)) {
            if (data.descriptor !== undefined) {
                let data1 = data.descriptor;
                if (!(data1 && typeof data1 == "object" && !Array.isArray(data1))) {
                    const err5 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/1/allOf/1/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                    if (vErrors === null) {
                        vErrors = [err5];
                    }
                    else {
                        vErrors.push(err5);
                    }
                    errors++;
                }
                const _errs13 = errors;
                const _errs14 = errors;
                if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                    let missing3;
                    if ((data1.protocol === undefined) && (missing3 = "protocol")) {
                        const err6 = {};
                        if (vErrors === null) {
                            vErrors = [err6];
                        }
                        else {
                            vErrors.push(err6);
                        }
                        errors++;
                    }
                }
                var valid5 = _errs14 === errors;
                if (valid5) {
                    const err7 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/1/allOf/1/properties/descriptor/not", keyword: "not", params: {}, message: "must NOT be valid" };
                    if (vErrors === null) {
                        vErrors = [err7];
                    }
                    else {
                        vErrors.push(err7);
                    }
                    errors++;
                }
                else {
                    errors = _errs13;
                    if (vErrors !== null) {
                        if (_errs13) {
                            vErrors.length = _errs13;
                        }
                        else {
                            vErrors = null;
                        }
                    }
                }
            }
        }
        var valid2 = _errs10 === errors;
        if (valid2) {
            const _errs15 = errors;
            if (data && typeof data == "object" && !Array.isArray(data)) {
                if (data.descriptor !== undefined) {
                    let data2 = data.descriptor;
                    if (!(data2 && typeof data2 == "object" && !Array.isArray(data2))) {
                        const err8 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/1/allOf/2/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                        if (vErrors === null) {
                            vErrors = [err8];
                        }
                        else {
                            vErrors.push(err8);
                        }
                        errors++;
                    }
                    const _errs18 = errors;
                    const _errs19 = errors;
                    if (data2 && typeof data2 == "object" && !Array.isArray(data2)) {
                        let missing4;
                        if ((data2.protocolPath === undefined) && (missing4 = "protocolPath")) {
                            const err9 = {};
                            if (vErrors === null) {
                                vErrors = [err9];
                            }
                            else {
                                vErrors.push(err9);
                            }
                            errors++;
                        }
                    }
                    var valid7 = _errs19 === errors;
                    if (valid7) {
                        const err10 = { instancePath: instancePath + "/descriptor", schemaPath: "#/anyOf/1/allOf/2/properties/descriptor/not", keyword: "not", params: {}, message: "must NOT be valid" };
                        if (vErrors === null) {
                            vErrors = [err10];
                        }
                        else {
                            vErrors.push(err10);
                        }
                        errors++;
                    }
                    else {
                        errors = _errs18;
                        if (vErrors !== null) {
                            if (_errs18) {
                                vErrors.length = _errs18;
                            }
                            else {
                                vErrors = null;
                            }
                        }
                    }
                }
            }
            var valid2 = _errs15 === errors;
        }
    }
    var _valid0 = _errs6 === errors;
    valid0 = valid0 || _valid0;
    if (_valid0) {
        if (props0 !== true) {
            props0 = props0 || {};
            props0.descriptor = true;
        }
    }
    if (!valid0) {
        const err11 = { instancePath, schemaPath: "#/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
        if (vErrors === null) {
            vErrors = [err11];
        }
        else {
            vErrors.push(err11);
        }
        errors++;
        validate27.errors = vErrors;
        return false;
    }
    else {
        errors = _errs2;
        if (vErrors !== null) {
            if (_errs2) {
                vErrors.length = _errs2;
            }
            else {
                vErrors = null;
            }
        }
    }
    if (errors === 0) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing5;
            if ((data.descriptor === undefined) && (missing5 = "descriptor")) {
                validate27.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }];
                return false;
            }
            else {
                if (props0 !== true) {
                    props0 = props0 || {};
                    props0.recordId = true;
                    props0.contextId = true;
                    props0.attestation = true;
                    props0.authorization = true;
                    props0.encryption = true;
                    props0.descriptor = true;
                }
                if (data.recordId !== undefined) {
                    const _errs20 = errors;
                    if (typeof data.recordId !== "string") {
                        validate27.errors = [{ instancePath: instancePath + "/recordId", schemaPath: "#/properties/recordId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid8 = _errs20 === errors;
                }
                else {
                    var valid8 = true;
                }
                if (valid8) {
                    if (data.contextId !== undefined) {
                        let data4 = data.contextId;
                        const _errs22 = errors;
                        if (errors === _errs22) {
                            if (typeof data4 === "string") {
                                if (!pattern7.test(data4)) {
                                    validate27.errors = [{ instancePath: instancePath + "/contextId", schemaPath: "#/properties/contextId/pattern", keyword: "pattern", params: { pattern: "^[a-zA-Z0-9]+(/[a-zA-Z0-9]+)*$" }, message: "must match pattern \"" + "^[a-zA-Z0-9]+(/[a-zA-Z0-9]+)*$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate27.errors = [{ instancePath: instancePath + "/contextId", schemaPath: "#/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid8 = _errs22 === errors;
                    }
                    else {
                        var valid8 = true;
                    }
                    if (valid8) {
                        if (data.attestation !== undefined) {
                            const _errs24 = errors;
                            if (!(validate21(data.attestation, { instancePath: instancePath + "/attestation", parentData: data, parentDataProperty: "attestation", rootData, dynamicAnchors }))) {
                                vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                                errors = vErrors.length;
                            }
                            var valid8 = _errs24 === errors;
                        }
                        else {
                            var valid8 = true;
                        }
                        if (valid8) {
                            if (data.authorization !== undefined) {
                                const _errs25 = errors;
                                if (!(validate29(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                                    vErrors = vErrors === null ? validate29.errors : vErrors.concat(validate29.errors);
                                    errors = vErrors.length;
                                }
                                var valid8 = _errs25 === errors;
                            }
                            else {
                                var valid8 = true;
                            }
                            if (valid8) {
                                if (data.encryption !== undefined) {
                                    let data7 = data.encryption;
                                    const _errs26 = errors;
                                    if (errors === _errs26) {
                                        if (data7 && typeof data7 == "object" && !Array.isArray(data7)) {
                                            let missing6;
                                            if ((((data7.algorithm === undefined) && (missing6 = "algorithm")) || ((data7.initializationVector === undefined) && (missing6 = "initializationVector"))) || ((data7.keyEncryption === undefined) && (missing6 = "keyEncryption"))) {
                                                validate27.errors = [{ instancePath: instancePath + "/encryption", schemaPath: "#/properties/encryption/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" }];
                                                return false;
                                            }
                                            else {
                                                const _errs28 = errors;
                                                for (const key0 in data7) {
                                                    if (!(((key0 === "algorithm") || (key0 === "initializationVector")) || (key0 === "keyEncryption"))) {
                                                        validate27.errors = [{ instancePath: instancePath + "/encryption", schemaPath: "#/properties/encryption/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                                                        return false;
                                                        break;
                                                    }
                                                }
                                                if (_errs28 === errors) {
                                                    if (data7.algorithm !== undefined) {
                                                        let data8 = data7.algorithm;
                                                        const _errs29 = errors;
                                                        if (typeof data8 !== "string") {
                                                            validate27.errors = [{ instancePath: instancePath + "/encryption/algorithm", schemaPath: "#/properties/encryption/properties/algorithm/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        if (!(data8 === "A256CTR")) {
                                                            validate27.errors = [{ instancePath: instancePath + "/encryption/algorithm", schemaPath: "#/properties/encryption/properties/algorithm/enum", keyword: "enum", params: { allowedValues: schema39.properties.encryption.properties.algorithm.enum }, message: "must be equal to one of the allowed values" }];
                                                            return false;
                                                        }
                                                        var valid9 = _errs29 === errors;
                                                    }
                                                    else {
                                                        var valid9 = true;
                                                    }
                                                    if (valid9) {
                                                        if (data7.initializationVector !== undefined) {
                                                            let data9 = data7.initializationVector;
                                                            const _errs31 = errors;
                                                            const _errs32 = errors;
                                                            if (errors === _errs32) {
                                                                if (typeof data9 === "string") {
                                                                    if (!pattern4.test(data9)) {
                                                                        validate27.errors = [{ instancePath: instancePath + "/encryption/initializationVector", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                else {
                                                                    validate27.errors = [{ instancePath: instancePath + "/encryption/initializationVector", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                    return false;
                                                                }
                                                            }
                                                            var valid9 = _errs31 === errors;
                                                        }
                                                        else {
                                                            var valid9 = true;
                                                        }
                                                        if (valid9) {
                                                            if (data7.keyEncryption !== undefined) {
                                                                let data10 = data7.keyEncryption;
                                                                const _errs34 = errors;
                                                                if (errors === _errs34) {
                                                                    if (Array.isArray(data10)) {
                                                                        if (data10.length < 1) {
                                                                            validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption", schemaPath: "#/properties/encryption/properties/keyEncryption/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                                                            return false;
                                                                        }
                                                                        else {
                                                                            var valid11 = true;
                                                                            const len0 = data10.length;
                                                                            for (let i0 = 0; i0 < len0; i0++) {
                                                                                let data11 = data10[i0];
                                                                                const _errs36 = errors;
                                                                                if (errors === _errs36) {
                                                                                    if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                        let missing7;
                                                                                        if ((((((((data11.rootKeyId === undefined) && (missing7 = "rootKeyId")) || ((data11.derivationScheme === undefined) && (missing7 = "derivationScheme"))) || ((data11.algorithm === undefined) && (missing7 = "algorithm"))) || ((data11.encryptedKey === undefined) && (missing7 = "encryptedKey"))) || ((data11.initializationVector === undefined) && (missing7 = "initializationVector"))) || ((data11.ephemeralPublicKey === undefined) && (missing7 = "ephemeralPublicKey"))) || ((data11.messageAuthenticationCode === undefined) && (missing7 = "messageAuthenticationCode"))) {
                                                                                            validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0, schemaPath: "#/properties/encryption/properties/keyEncryption/items/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }];
                                                                                            return false;
                                                                                        }
                                                                                        else {
                                                                                            const _errs38 = errors;
                                                                                            for (const key1 in data11) {
                                                                                                if (!((((((((key1 === "rootKeyId") || (key1 === "derivationScheme")) || (key1 === "derivedPublicKey")) || (key1 === "algorithm")) || (key1 === "encryptedKey")) || (key1 === "initializationVector")) || (key1 === "ephemeralPublicKey")) || (key1 === "messageAuthenticationCode"))) {
                                                                                                    validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0, schemaPath: "#/properties/encryption/properties/keyEncryption/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                                                                    return false;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            if (_errs38 === errors) {
                                                                                                if (data11.rootKeyId !== undefined) {
                                                                                                    const _errs39 = errors;
                                                                                                    if (typeof data11.rootKeyId !== "string") {
                                                                                                        validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/rootKeyId", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/rootKeyId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    var valid12 = _errs39 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid12 = true;
                                                                                                }
                                                                                                if (valid12) {
                                                                                                    if (data11.derivationScheme !== undefined) {
                                                                                                        let data13 = data11.derivationScheme;
                                                                                                        const _errs41 = errors;
                                                                                                        if (typeof data13 !== "string") {
                                                                                                            validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/derivationScheme", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/derivationScheme/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        if (!((((data13 === "dataFormats") || (data13 === "protocolContext")) || (data13 === "protocolPath")) || (data13 === "schemas"))) {
                                                                                                            validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/derivationScheme", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/derivationScheme/enum", keyword: "enum", params: { allowedValues: schema39.properties.encryption.properties.keyEncryption.items.properties.derivationScheme.enum }, message: "must be equal to one of the allowed values" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        var valid12 = _errs41 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid12 = true;
                                                                                                    }
                                                                                                    if (valid12) {
                                                                                                        if (data11.derivedPublicKey !== undefined) {
                                                                                                            const _errs43 = errors;
                                                                                                            if (!(validate33(data11.derivedPublicKey, { instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/derivedPublicKey", parentData: data11, parentDataProperty: "derivedPublicKey", rootData, dynamicAnchors }))) {
                                                                                                                vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
                                                                                                                errors = vErrors.length;
                                                                                                            }
                                                                                                            var valid12 = _errs43 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid12 = true;
                                                                                                        }
                                                                                                        if (valid12) {
                                                                                                            if (data11.algorithm !== undefined) {
                                                                                                                let data15 = data11.algorithm;
                                                                                                                const _errs44 = errors;
                                                                                                                if (typeof data15 !== "string") {
                                                                                                                    validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/algorithm", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/algorithm/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                                if (!(data15 === "ECIES-ES256K")) {
                                                                                                                    validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/algorithm", schemaPath: "#/properties/encryption/properties/keyEncryption/items/properties/algorithm/enum", keyword: "enum", params: { allowedValues: schema39.properties.encryption.properties.keyEncryption.items.properties.algorithm.enum }, message: "must be equal to one of the allowed values" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                                var valid12 = _errs44 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid12 = true;
                                                                                                            }
                                                                                                            if (valid12) {
                                                                                                                if (data11.encryptedKey !== undefined) {
                                                                                                                    let data16 = data11.encryptedKey;
                                                                                                                    const _errs46 = errors;
                                                                                                                    const _errs47 = errors;
                                                                                                                    if (errors === _errs47) {
                                                                                                                        if (typeof data16 === "string") {
                                                                                                                            if (!pattern4.test(data16)) {
                                                                                                                                validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/encryptedKey", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/encryptedKey", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid12 = _errs46 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid12 = true;
                                                                                                                }
                                                                                                                if (valid12) {
                                                                                                                    if (data11.initializationVector !== undefined) {
                                                                                                                        let data17 = data11.initializationVector;
                                                                                                                        const _errs49 = errors;
                                                                                                                        const _errs50 = errors;
                                                                                                                        if (errors === _errs50) {
                                                                                                                            if (typeof data17 === "string") {
                                                                                                                                if (!pattern4.test(data17)) {
                                                                                                                                    validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/initializationVector", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/initializationVector", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        var valid12 = _errs49 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid12 = true;
                                                                                                                    }
                                                                                                                    if (valid12) {
                                                                                                                        if (data11.ephemeralPublicKey !== undefined) {
                                                                                                                            const _errs52 = errors;
                                                                                                                            if (!(validate33(data11.ephemeralPublicKey, { instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/ephemeralPublicKey", parentData: data11, parentDataProperty: "ephemeralPublicKey", rootData, dynamicAnchors }))) {
                                                                                                                                vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
                                                                                                                                errors = vErrors.length;
                                                                                                                            }
                                                                                                                            var valid12 = _errs52 === errors;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            var valid12 = true;
                                                                                                                        }
                                                                                                                        if (valid12) {
                                                                                                                            if (data11.messageAuthenticationCode !== undefined) {
                                                                                                                                let data19 = data11.messageAuthenticationCode;
                                                                                                                                const _errs53 = errors;
                                                                                                                                const _errs54 = errors;
                                                                                                                                if (errors === _errs54) {
                                                                                                                                    if (typeof data19 === "string") {
                                                                                                                                        if (!pattern4.test(data19)) {
                                                                                                                                            validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/messageAuthenticationCode", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/pattern", keyword: "pattern", params: { pattern: "^[A-Za-z0-9_-]+$" }, message: "must match pattern \"" + "^[A-Za-z0-9_-]+$" + "\"" }];
                                                                                                                                            return false;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0 + "/messageAuthenticationCode", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/base64url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                        return false;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                var valid12 = _errs53 === errors;
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                var valid12 = true;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption/" + i0, schemaPath: "#/properties/encryption/properties/keyEncryption/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                var valid11 = _errs36 === errors;
                                                                                if (!valid11) {
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else {
                                                                        validate27.errors = [{ instancePath: instancePath + "/encryption/keyEncryption", schemaPath: "#/properties/encryption/properties/keyEncryption/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                var valid9 = _errs34 === errors;
                                                            }
                                                            else {
                                                                var valid9 = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            validate27.errors = [{ instancePath: instancePath + "/encryption", schemaPath: "#/properties/encryption/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                            return false;
                                        }
                                    }
                                    var valid8 = _errs26 === errors;
                                }
                                else {
                                    var valid8 = true;
                                }
                                if (valid8) {
                                    if (data.descriptor !== undefined) {
                                        let data20 = data.descriptor;
                                        const _errs56 = errors;
                                        const _errs60 = errors;
                                        let valid17 = false;
                                        const _errs61 = errors;
                                        if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                            let missing8;
                                            if (((data20.published === undefined) && (missing8 = "published")) || ((data20.datePublished === undefined) && (missing8 = "datePublished"))) {
                                                const err12 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf/0/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" };
                                                if (vErrors === null) {
                                                    vErrors = [err12];
                                                }
                                                else {
                                                    vErrors.push(err12);
                                                }
                                                errors++;
                                            }
                                            else {
                                                if (data20.published !== undefined) {
                                                    let data21 = data20.published;
                                                    if (typeof data21 !== "boolean") {
                                                        const err13 = { instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/allOf/0/anyOf/0/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                                                        if (vErrors === null) {
                                                            vErrors = [err13];
                                                        }
                                                        else {
                                                            vErrors.push(err13);
                                                        }
                                                        errors++;
                                                    }
                                                    if (!(data21 === true)) {
                                                        const err14 = { instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/allOf/0/anyOf/0/properties/published/enum", keyword: "enum", params: { allowedValues: schema39.properties.descriptor.allOf[0].anyOf[0].properties.published.enum }, message: "must be equal to one of the allowed values" };
                                                        if (vErrors === null) {
                                                            vErrors = [err14];
                                                        }
                                                        else {
                                                            vErrors.push(err14);
                                                        }
                                                        errors++;
                                                    }
                                                }
                                            }
                                        }
                                        var _valid1 = _errs61 === errors;
                                        valid17 = valid17 || _valid1;
                                        if (_valid1) {
                                            var props3 = {};
                                            props3.published = true;
                                        }
                                        const _errs64 = errors;
                                        const _errs65 = errors;
                                        const _errs66 = errors;
                                        if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                            let missing9;
                                            if ((data20.datePublished === undefined) && (missing9 = "datePublished")) {
                                                const err15 = {};
                                                if (vErrors === null) {
                                                    vErrors = [err15];
                                                }
                                                else {
                                                    vErrors.push(err15);
                                                }
                                                errors++;
                                            }
                                        }
                                        var valid19 = _errs66 === errors;
                                        if (valid19) {
                                            const err16 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf/1/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                            if (vErrors === null) {
                                                vErrors = [err16];
                                            }
                                            else {
                                                vErrors.push(err16);
                                            }
                                            errors++;
                                        }
                                        else {
                                            errors = _errs65;
                                            if (vErrors !== null) {
                                                if (_errs65) {
                                                    vErrors.length = _errs65;
                                                }
                                                else {
                                                    vErrors = null;
                                                }
                                            }
                                        }
                                        if (errors === _errs64) {
                                            if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                if (data20.published !== undefined) {
                                                    let data22 = data20.published;
                                                    if (typeof data22 !== "boolean") {
                                                        const err17 = { instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/allOf/0/anyOf/1/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                                                        if (vErrors === null) {
                                                            vErrors = [err17];
                                                        }
                                                        else {
                                                            vErrors.push(err17);
                                                        }
                                                        errors++;
                                                    }
                                                    if (!(data22 === false)) {
                                                        const err18 = { instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/allOf/0/anyOf/1/properties/published/enum", keyword: "enum", params: { allowedValues: schema39.properties.descriptor.allOf[0].anyOf[1].properties.published.enum }, message: "must be equal to one of the allowed values" };
                                                        if (vErrors === null) {
                                                            vErrors = [err18];
                                                        }
                                                        else {
                                                            vErrors.push(err18);
                                                        }
                                                        errors++;
                                                    }
                                                }
                                            }
                                        }
                                        var _valid1 = _errs64 === errors;
                                        valid17 = valid17 || _valid1;
                                        if (_valid1) {
                                            if (props3 !== true) {
                                                props3 = props3 || {};
                                                props3.published = true;
                                            }
                                        }
                                        const _errs69 = errors;
                                        const _errs70 = errors;
                                        const _errs71 = errors;
                                        const _errs72 = errors;
                                        if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                            let missing10;
                                            if ((data20.published === undefined) && (missing10 = "published")) {
                                                const err19 = {};
                                                if (vErrors === null) {
                                                    vErrors = [err19];
                                                }
                                                else {
                                                    vErrors.push(err19);
                                                }
                                                errors++;
                                            }
                                        }
                                        var valid22 = _errs72 === errors;
                                        if (valid22) {
                                            const err20 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf/2/allOf/0/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                            if (vErrors === null) {
                                                vErrors = [err20];
                                            }
                                            else {
                                                vErrors.push(err20);
                                            }
                                            errors++;
                                        }
                                        else {
                                            errors = _errs71;
                                            if (vErrors !== null) {
                                                if (_errs71) {
                                                    vErrors.length = _errs71;
                                                }
                                                else {
                                                    vErrors = null;
                                                }
                                            }
                                        }
                                        var valid21 = _errs70 === errors;
                                        if (valid21) {
                                            const _errs73 = errors;
                                            const _errs74 = errors;
                                            const _errs75 = errors;
                                            if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                let missing11;
                                                if ((data20.datePublished === undefined) && (missing11 = "datePublished")) {
                                                    const err21 = {};
                                                    if (vErrors === null) {
                                                        vErrors = [err21];
                                                    }
                                                    else {
                                                        vErrors.push(err21);
                                                    }
                                                    errors++;
                                                }
                                            }
                                            var valid23 = _errs75 === errors;
                                            if (valid23) {
                                                const err22 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf/2/allOf/1/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                if (vErrors === null) {
                                                    vErrors = [err22];
                                                }
                                                else {
                                                    vErrors.push(err22);
                                                }
                                                errors++;
                                            }
                                            else {
                                                errors = _errs74;
                                                if (vErrors !== null) {
                                                    if (_errs74) {
                                                        vErrors.length = _errs74;
                                                    }
                                                    else {
                                                        vErrors = null;
                                                    }
                                                }
                                            }
                                            var valid21 = _errs73 === errors;
                                        }
                                        var _valid1 = _errs69 === errors;
                                        valid17 = valid17 || _valid1;
                                        if (!valid17) {
                                            const err23 = { instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/allOf/0/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                            if (vErrors === null) {
                                                vErrors = [err23];
                                            }
                                            else {
                                                vErrors.push(err23);
                                            }
                                            errors++;
                                            validate27.errors = vErrors;
                                            return false;
                                        }
                                        else {
                                            errors = _errs60;
                                            if (vErrors !== null) {
                                                if (_errs60) {
                                                    vErrors.length = _errs60;
                                                }
                                                else {
                                                    vErrors = null;
                                                }
                                            }
                                        }
                                        if (errors === _errs56) {
                                            if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                let missing12;
                                                if ((((((((data20.interface === undefined) && (missing12 = "interface")) || ((data20.method === undefined) && (missing12 = "method"))) || ((data20.dataCid === undefined) && (missing12 = "dataCid"))) || ((data20.dataSize === undefined) && (missing12 = "dataSize"))) || ((data20.dateCreated === undefined) && (missing12 = "dateCreated"))) || ((data20.messageTimestamp === undefined) && (missing12 = "messageTimestamp"))) || ((data20.dataFormat === undefined) && (missing12 = "dataFormat"))) {
                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing12 }, message: "must have required property '" + missing12 + "'" }];
                                                    return false;
                                                }
                                                else {
                                                    const _errs76 = errors;
                                                    for (const key2 in data20) {
                                                        if (!(func1.call(schema39.properties.descriptor.properties, key2))) {
                                                            validate27.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                            return false;
                                                            break;
                                                        }
                                                    }
                                                    if (_errs76 === errors) {
                                                        let missing13;
                                                        if (data20.parentId !== undefined && ((data20.protocol === undefined) && (missing13 = "protocol"))) {
                                                            validate27.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/dependencies", keyword: "dependencies", params: { property: "parentId",
                                                                        missingProperty: missing13,
                                                                        depsCount: 1,
                                                                        deps: "protocol" }, message: "must have property protocol when property parentId is present" }];
                                                            return false;
                                                        }
                                                        else {
                                                            if (data20.interface !== undefined) {
                                                                let data23 = data20.interface;
                                                                const _errs77 = errors;
                                                                if (typeof data23 !== "string") {
                                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                    return false;
                                                                }
                                                                if (!(data23 === "Records")) {
                                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema39.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                                    return false;
                                                                }
                                                                var valid25 = _errs77 === errors;
                                                            }
                                                            else {
                                                                var valid25 = true;
                                                            }
                                                            if (valid25) {
                                                                if (data20.method !== undefined) {
                                                                    let data24 = data20.method;
                                                                    const _errs79 = errors;
                                                                    if (typeof data24 !== "string") {
                                                                        validate27.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                    if (!(data24 === "Write")) {
                                                                        validate27.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema39.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                                        return false;
                                                                    }
                                                                    var valid25 = _errs79 === errors;
                                                                }
                                                                else {
                                                                    var valid25 = true;
                                                                }
                                                                if (valid25) {
                                                                    if (data20.recipient !== undefined) {
                                                                        let data25 = data20.recipient;
                                                                        const _errs81 = errors;
                                                                        const _errs82 = errors;
                                                                        if (errors === _errs82) {
                                                                            if (typeof data25 === "string") {
                                                                                if (!pattern12.test(data25)) {
                                                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            else {
                                                                                validate27.errors = [{ instancePath: instancePath + "/descriptor/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                        }
                                                                        var valid25 = _errs81 === errors;
                                                                    }
                                                                    else {
                                                                        var valid25 = true;
                                                                    }
                                                                    if (valid25) {
                                                                        if (data20.protocol !== undefined) {
                                                                            const _errs84 = errors;
                                                                            if (typeof data20.protocol !== "string") {
                                                                                validate27.errors = [{ instancePath: instancePath + "/descriptor/protocol", schemaPath: "#/properties/descriptor/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            var valid25 = _errs84 === errors;
                                                                        }
                                                                        else {
                                                                            var valid25 = true;
                                                                        }
                                                                        if (valid25) {
                                                                            if (data20.protocolPath !== undefined) {
                                                                                let data27 = data20.protocolPath;
                                                                                const _errs86 = errors;
                                                                                if (errors === _errs86) {
                                                                                    if (typeof data27 === "string") {
                                                                                        if (!pattern13.test(data27)) {
                                                                                            validate27.errors = [{ instancePath: instancePath + "/descriptor/protocolPath", schemaPath: "#/properties/descriptor/properties/protocolPath/pattern", keyword: "pattern", params: { pattern: "^[a-zA-Z]+(/[a-zA-Z]+)*$" }, message: "must match pattern \"" + "^[a-zA-Z]+(/[a-zA-Z]+)*$" + "\"" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        validate27.errors = [{ instancePath: instancePath + "/descriptor/protocolPath", schemaPath: "#/properties/descriptor/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                var valid25 = _errs86 === errors;
                                                                            }
                                                                            else {
                                                                                var valid25 = true;
                                                                            }
                                                                            if (valid25) {
                                                                                if (data20.schema !== undefined) {
                                                                                    const _errs88 = errors;
                                                                                    if (typeof data20.schema !== "string") {
                                                                                        validate27.errors = [{ instancePath: instancePath + "/descriptor/schema", schemaPath: "#/properties/descriptor/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                        return false;
                                                                                    }
                                                                                    var valid25 = _errs88 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid25 = true;
                                                                                }
                                                                                if (valid25) {
                                                                                    if (data20.tags !== undefined) {
                                                                                        let data29 = data20.tags;
                                                                                        const _errs90 = errors;
                                                                                        if (errors === _errs90) {
                                                                                            if (data29 && typeof data29 == "object" && !Array.isArray(data29)) {
                                                                                                if (Object.keys(data29).length > 10) {
                                                                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor/tags", schemaPath: "#/properties/descriptor/properties/tags/maxProperties", keyword: "maxProperties", params: { limit: 10 }, message: "must NOT have more than 10 properties" }];
                                                                                                    return false;
                                                                                                }
                                                                                                else {
                                                                                                    if (Object.keys(data29).length < 1) {
                                                                                                        validate27.errors = [{ instancePath: instancePath + "/descriptor/tags", schemaPath: "#/properties/descriptor/properties/tags/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    else {
                                                                                                        for (const key3 in data29) {
                                                                                                            let data30 = data29[key3];
                                                                                                            const _errs93 = errors;
                                                                                                            const _errs94 = errors;
                                                                                                            let valid28 = false;
                                                                                                            let passing0 = null;
                                                                                                            const _errs95 = errors;
                                                                                                            if (typeof data30 !== "string") {
                                                                                                                const err24 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err24];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err24);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                            var _valid2 = _errs95 === errors;
                                                                                                            if (_valid2) {
                                                                                                                valid28 = true;
                                                                                                                passing0 = 0;
                                                                                                            }
                                                                                                            const _errs97 = errors;
                                                                                                            if (!((typeof data30 == "number") && (isFinite(data30)))) {
                                                                                                                const err25 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/1/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err25];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err25);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                            var _valid2 = _errs97 === errors;
                                                                                                            if (_valid2 && valid28) {
                                                                                                                valid28 = false;
                                                                                                                passing0 = [passing0, 1];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (_valid2) {
                                                                                                                    valid28 = true;
                                                                                                                    passing0 = 1;
                                                                                                                }
                                                                                                                const _errs99 = errors;
                                                                                                                if (typeof data30 !== "boolean") {
                                                                                                                    const err26 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/2/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                                                                                                                    if (vErrors === null) {
                                                                                                                        vErrors = [err26];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        vErrors.push(err26);
                                                                                                                    }
                                                                                                                    errors++;
                                                                                                                }
                                                                                                                var _valid2 = _errs99 === errors;
                                                                                                                if (_valid2 && valid28) {
                                                                                                                    valid28 = false;
                                                                                                                    passing0 = [passing0, 2];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (_valid2) {
                                                                                                                        valid28 = true;
                                                                                                                        passing0 = 2;
                                                                                                                    }
                                                                                                                    const _errs101 = errors;
                                                                                                                    if (errors === _errs101) {
                                                                                                                        if (Array.isArray(data30)) {
                                                                                                                            if (data30.length > 10) {
                                                                                                                                const err27 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/3/maxItems", keyword: "maxItems", params: { limit: 10 }, message: "must NOT have more than 10 items" };
                                                                                                                                if (vErrors === null) {
                                                                                                                                    vErrors = [err27];
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    vErrors.push(err27);
                                                                                                                                }
                                                                                                                                errors++;
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                if (data30.length < 1) {
                                                                                                                                    const err28 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/3/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" };
                                                                                                                                    if (vErrors === null) {
                                                                                                                                        vErrors = [err28];
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        vErrors.push(err28);
                                                                                                                                    }
                                                                                                                                    errors++;
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    var valid29 = true;
                                                                                                                                    const len1 = data30.length;
                                                                                                                                    for (let i1 = 0; i1 < len1; i1++) {
                                                                                                                                        const _errs103 = errors;
                                                                                                                                        if (typeof data30[i1] !== "string") {
                                                                                                                                            const err29 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1") + "/" + i1, schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/3/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                                                            if (vErrors === null) {
                                                                                                                                                vErrors = [err29];
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                vErrors.push(err29);
                                                                                                                                            }
                                                                                                                                            errors++;
                                                                                                                                        }
                                                                                                                                        var valid29 = _errs103 === errors;
                                                                                                                                        if (!valid29) {
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            const err30 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/3/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                                                            if (vErrors === null) {
                                                                                                                                vErrors = [err30];
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                vErrors.push(err30);
                                                                                                                            }
                                                                                                                            errors++;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var _valid2 = _errs101 === errors;
                                                                                                                    if (_valid2 && valid28) {
                                                                                                                        valid28 = false;
                                                                                                                        passing0 = [passing0, 3];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (_valid2) {
                                                                                                                            valid28 = true;
                                                                                                                            passing0 = 3;
                                                                                                                            var items0 = true;
                                                                                                                        }
                                                                                                                        const _errs105 = errors;
                                                                                                                        if (errors === _errs105) {
                                                                                                                            if (Array.isArray(data30)) {
                                                                                                                                if (data30.length > 10) {
                                                                                                                                    const err31 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/4/maxItems", keyword: "maxItems", params: { limit: 10 }, message: "must NOT have more than 10 items" };
                                                                                                                                    if (vErrors === null) {
                                                                                                                                        vErrors = [err31];
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        vErrors.push(err31);
                                                                                                                                    }
                                                                                                                                    errors++;
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    if (data30.length < 1) {
                                                                                                                                        const err32 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/4/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" };
                                                                                                                                        if (vErrors === null) {
                                                                                                                                            vErrors = [err32];
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            vErrors.push(err32);
                                                                                                                                        }
                                                                                                                                        errors++;
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        var valid30 = true;
                                                                                                                                        const len2 = data30.length;
                                                                                                                                        for (let i2 = 0; i2 < len2; i2++) {
                                                                                                                                            let data32 = data30[i2];
                                                                                                                                            const _errs107 = errors;
                                                                                                                                            if (!((typeof data32 == "number") && (isFinite(data32)))) {
                                                                                                                                                const err33 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1") + "/" + i2, schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/4/items/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                                                                                if (vErrors === null) {
                                                                                                                                                    vErrors = [err33];
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                    vErrors.push(err33);
                                                                                                                                                }
                                                                                                                                                errors++;
                                                                                                                                            }
                                                                                                                                            var valid30 = _errs107 === errors;
                                                                                                                                            if (!valid30) {
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                const err34 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf/4/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                                                                if (vErrors === null) {
                                                                                                                                    vErrors = [err34];
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    vErrors.push(err34);
                                                                                                                                }
                                                                                                                                errors++;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        var _valid2 = _errs105 === errors;
                                                                                                                        if (_valid2 && valid28) {
                                                                                                                            valid28 = false;
                                                                                                                            passing0 = [passing0, 4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if (_valid2) {
                                                                                                                                valid28 = true;
                                                                                                                                passing0 = 4;
                                                                                                                                if (items0 !== true) {
                                                                                                                                    items0 = true;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            if (!valid28) {
                                                                                                                const err35 = { instancePath: instancePath + "/descriptor/tags/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/descriptor/properties/tags/additionalProperties/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err35];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err35);
                                                                                                                }
                                                                                                                errors++;
                                                                                                                validate27.errors = vErrors;
                                                                                                                return false;
                                                                                                            }
                                                                                                            else {
                                                                                                                errors = _errs94;
                                                                                                                if (vErrors !== null) {
                                                                                                                    if (_errs94) {
                                                                                                                        vErrors.length = _errs94;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        vErrors = null;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            var valid27 = _errs93 === errors;
                                                                                                            if (!valid27) {
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                validate27.errors = [{ instancePath: instancePath + "/descriptor/tags", schemaPath: "#/properties/descriptor/properties/tags/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                        var valid25 = _errs90 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid25 = true;
                                                                                    }
                                                                                    if (valid25) {
                                                                                        if (data20.parentId !== undefined) {
                                                                                            const _errs109 = errors;
                                                                                            if (typeof data20.parentId !== "string") {
                                                                                                validate27.errors = [{ instancePath: instancePath + "/descriptor/parentId", schemaPath: "#/properties/descriptor/properties/parentId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                return false;
                                                                                            }
                                                                                            var valid25 = _errs109 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid25 = true;
                                                                                        }
                                                                                        if (valid25) {
                                                                                            if (data20.dataCid !== undefined) {
                                                                                                const _errs111 = errors;
                                                                                                if (typeof data20.dataCid !== "string") {
                                                                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor/dataCid", schemaPath: "#/properties/descriptor/properties/dataCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                    return false;
                                                                                                }
                                                                                                var valid25 = _errs111 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid25 = true;
                                                                                            }
                                                                                            if (valid25) {
                                                                                                if (data20.dataSize !== undefined) {
                                                                                                    let data35 = data20.dataSize;
                                                                                                    const _errs113 = errors;
                                                                                                    if (!((typeof data35 == "number") && (isFinite(data35)))) {
                                                                                                        validate27.errors = [{ instancePath: instancePath + "/descriptor/dataSize", schemaPath: "#/properties/descriptor/properties/dataSize/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    var valid25 = _errs113 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid25 = true;
                                                                                                }
                                                                                                if (valid25) {
                                                                                                    if (data20.dateCreated !== undefined) {
                                                                                                        let data36 = data20.dateCreated;
                                                                                                        const _errs115 = errors;
                                                                                                        const _errs116 = errors;
                                                                                                        if (errors === _errs116) {
                                                                                                            if (typeof data36 === "string") {
                                                                                                                if (!pattern14.test(data36)) {
                                                                                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor/dateCreated", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                validate27.errors = [{ instancePath: instancePath + "/descriptor/dateCreated", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid25 = _errs115 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid25 = true;
                                                                                                    }
                                                                                                    if (valid25) {
                                                                                                        if (data20.messageTimestamp !== undefined) {
                                                                                                            let data37 = data20.messageTimestamp;
                                                                                                            const _errs118 = errors;
                                                                                                            const _errs119 = errors;
                                                                                                            if (errors === _errs119) {
                                                                                                                if (typeof data37 === "string") {
                                                                                                                    if (!pattern14.test(data37)) {
                                                                                                                        validate27.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid25 = _errs118 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid25 = true;
                                                                                                        }
                                                                                                        if (valid25) {
                                                                                                            if (data20.published !== undefined) {
                                                                                                                const _errs121 = errors;
                                                                                                                if (typeof data20.published !== "boolean") {
                                                                                                                    validate27.errors = [{ instancePath: instancePath + "/descriptor/published", schemaPath: "#/properties/descriptor/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                                var valid25 = _errs121 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid25 = true;
                                                                                                            }
                                                                                                            if (valid25) {
                                                                                                                if (data20.datePublished !== undefined) {
                                                                                                                    let data39 = data20.datePublished;
                                                                                                                    const _errs123 = errors;
                                                                                                                    const _errs124 = errors;
                                                                                                                    if (errors === _errs124) {
                                                                                                                        if (typeof data39 === "string") {
                                                                                                                            if (!pattern14.test(data39)) {
                                                                                                                                validate27.errors = [{ instancePath: instancePath + "/descriptor/datePublished", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            validate27.errors = [{ instancePath: instancePath + "/descriptor/datePublished", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid25 = _errs123 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid25 = true;
                                                                                                                }
                                                                                                                if (valid25) {
                                                                                                                    if (data20.dataFormat !== undefined) {
                                                                                                                        const _errs126 = errors;
                                                                                                                        if (typeof data20.dataFormat !== "string") {
                                                                                                                            validate27.errors = [{ instancePath: instancePath + "/descriptor/dataFormat", schemaPath: "#/properties/descriptor/properties/dataFormat/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid25 = _errs126 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid25 = true;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                validate27.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                return false;
                                            }
                                        }
                                        var valid8 = _errs56 === errors;
                                    }
                                    else {
                                        var valid8 = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            validate27.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
            return false;
        }
    }
    validate27.errors = vErrors;
    evaluated0.props = props0;
    return errors === 0;
}
validate27.evaluated = { "dynamicProps": true, "dynamicItems": false };
function validate26(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-write-data-encoded.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate26.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (!(validate27(data, { instancePath, parentData, parentDataProperty, rootData, dynamicAnchors }))) {
    vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
    errors = vErrors.length;
}
else {
    var props0 = validate27.evaluated.props;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((data.recordId === undefined) && (missing0 = "recordId")) || ((data.authorization === undefined) && (missing0 = "authorization"))) || ((data.encodedData === undefined) && (missing0 = "encodedData"))) {
            validate26.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (props0 !== true) {
                props0 = props0 || {};
                props0.encodedData = true;
            }
            if (data.encodedData !== undefined) {
                const _errs1 = errors;
                if (typeof data.encodedData !== "string") {
                    validate26.errors = [{ instancePath: instancePath + "/encodedData", schemaPath: "#/properties/encodedData/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid0 = _errs1 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (props0 !== true) {
                    for (const key0 in data) {
                        if (!props0 || !props0[key0]) {
                            validate26.errors = [{ instancePath, schemaPath: "#/unevaluatedProperties", keyword: "unevaluatedProperties", params: { unevaluatedProperty: key0 }, message: "must NOT have unevaluated properties" }];
                            return false;
                            break;
                        }
                    }
                }
            }
        }
    }
    else {
        validate26.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate26.errors = vErrors; return errors === 0; }
validate26.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
function validate24(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/authorization-delegated-grant.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate24.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!((key0 === "signature") || (key0 === "authorDelegatedGrant"))) {
                validate24.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.signature !== undefined) {
                const _errs2 = errors;
                if (!(validate21(data.signature, { instancePath: instancePath + "/signature", parentData: data, parentDataProperty: "signature", rootData, dynamicAnchors }))) {
                    vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                    errors = vErrors.length;
                }
                var valid0 = _errs2 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.authorDelegatedGrant !== undefined) {
                    const _errs3 = errors;
                    if (!(validate26(data.authorDelegatedGrant, { instancePath: instancePath + "/authorDelegatedGrant", parentData: data, parentDataProperty: "authorDelegatedGrant", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate26.errors : vErrors.concat(validate26.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs3 === errors;
                }
                else {
                    var valid0 = true;
                }
            }
        }
    }
    else {
        validate24.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate24.errors = vErrors; return errors === 0; }
validate24.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const AuthorizationOwner = validate29;
export const RecordsDelete = validate38;
const schema51 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/records-delete.json", "type": "object", "additionalProperties": false, "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization-delegated-grant.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "recordId", "prune"], "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Delete"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "recordId": { "type": "string" }, "prune": { "type": "boolean" } } } } };
function validate38(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-delete.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate38.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate38.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate38.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate24(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if ((((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.recordId === undefined) && (missing1 = "recordId"))) || ((data1.prune === undefined) && (missing1 = "prune"))) {
                                    validate38.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!(((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "recordId")) || (key1 === "prune"))) {
                                            validate38.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate38.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Records")) {
                                                validate38.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema51.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate38.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Delete")) {
                                                    validate38.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema51.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate38.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate38.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.recordId !== undefined) {
                                                        const _errs13 = errors;
                                                        if (typeof data1.recordId !== "string") {
                                                            validate38.errors = [{ instancePath: instancePath + "/descriptor/recordId", schemaPath: "#/properties/descriptor/properties/recordId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                    if (valid1) {
                                                        if (data1.prune !== undefined) {
                                                            const _errs15 = errors;
                                                            if (typeof data1.prune !== "boolean") {
                                                                validate38.errors = [{ instancePath: instancePath + "/descriptor/prune", schemaPath: "#/properties/descriptor/properties/prune/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                return false;
                                                            }
                                                            var valid1 = _errs15 === errors;
                                                        }
                                                        else {
                                                            var valid1 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate38.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate38.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate38.errors = vErrors; return errors === 0; }
validate38.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const RecordsQuery = validate40;
const schema53 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/records-query.json", "type": "object", "additionalProperties": false, "required": ["descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization-delegated-grant.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "filter"], "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Query"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "filter": { "$ref": "https://identity.foundation/dwn/json-schemas/records-filter.json" }, "pagination": { "type": "object", "additionalProperties": false, "properties": { "limit": { "type": "number", "minimum": 1 }, "cursor": { "$ref": "https://identity.foundation/dwn/json-schemas/pagination-cursor.json" } } }, "dateSort": { "enum": ["createdAscending", "createdDescending", "publishedAscending", "publishedDescending"], "type": "string" } } } } };
const schema70 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/pagination-cursor.json", "type": "object", "minProperties": 1, "additionalProperties": false, "required": ["messageCid", "value"], "properties": { "messageCid": { "type": "string" }, "value": { "type": ["string", "number"] } } };
const schema55 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/records-filter.json", "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "protocol": { "type": "string" }, "protocolPath": { "type": "string" }, "author": { "oneOf": [{ "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did" }, { "type": "array", "items": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did" } }] }, "attester": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did" }, "recipient": { "oneOf": [{ "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did" }, { "type": "array", "items": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did" } }] }, "contextId": { "type": "string" }, "schema": { "type": "string" }, "tags": { "type": "object", "minProperties": 1, "additionalProperties": { "oneOf": [{ "type": "string" }, { "type": "number" }, { "type": "boolean" }, { "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "startsWith": { "type": "string" } } }, { "$ref": "https://identity.foundation/dwn/json-schemas/string-range-filter.json" }, { "$ref": "https://identity.foundation/dwn/json-schemas/number-range-filter.json" }] } }, "recordId": { "type": "string" }, "parentId": { "type": "string" }, "published": { "type": "boolean" }, "dataFormat": { "type": "string" }, "dataSize": { "$ref": "https://identity.foundation/dwn/json-schemas/number-range-filter.json" }, "dataCid": { "type": "string" }, "dateCreated": { "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "from": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "to": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" } } }, "datePublished": { "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "from": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "to": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" } } }, "dateUpdated": { "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "from": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "to": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" } } } }, "dependencies": { "datePublished": { "oneOf": [{ "properties": { "published": { "enum": [true] } }, "required": ["published"] }, { "not": { "required": ["published"] } }] } } };
const schema61 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/string-range-filter.json", "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "gt": { "type": "string" }, "gte": { "type": "string" }, "lt": { "type": "string" }, "lte": { "type": "string" } }, "dependencies": { "gt": { "not": { "required": ["gte"] } }, "gte": { "not": { "required": ["gt"] } }, "lt": { "not": { "required": ["lte"] } }, "lte": { "not": { "required": ["lt"] } } } };
const schema62 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/number-range-filter.json", "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "gt": { "type": "number" }, "gte": { "type": "number" }, "lt": { "type": "number" }, "lte": { "type": "number" } }, "dependencies": { "gt": { "not": { "required": ["gte"] } }, "gte": { "not": { "required": ["gt"] } }, "lt": { "not": { "required": ["lte"] } }, "lte": { "not": { "required": ["lt"] } } } };
function validate42(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-filter.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate42.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (Object.keys(data).length < 1) {
            validate42.errors = [{ instancePath, schemaPath: "#/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!(func1.call(schema55.properties, key0))) {
                    validate42.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.datePublished !== undefined) {
                    const _errs2 = errors;
                    const _errs3 = errors;
                    let valid1 = false;
                    let passing0 = null;
                    const _errs4 = errors;
                    if (data && typeof data == "object" && !Array.isArray(data)) {
                        let missing0;
                        if ((data.published === undefined) && (missing0 = "published")) {
                            const err0 = { instancePath, schemaPath: "#/dependencies/datePublished/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
                            if (vErrors === null) {
                                vErrors = [err0];
                            }
                            else {
                                vErrors.push(err0);
                            }
                            errors++;
                        }
                        else {
                            if (data.published !== undefined) {
                                if (!(data.published === true)) {
                                    const err1 = { instancePath: instancePath + "/published", schemaPath: "#/dependencies/datePublished/oneOf/0/properties/published/enum", keyword: "enum", params: { allowedValues: schema55.dependencies.datePublished.oneOf[0].properties.published.enum }, message: "must be equal to one of the allowed values" };
                                    if (vErrors === null) {
                                        vErrors = [err1];
                                    }
                                    else {
                                        vErrors.push(err1);
                                    }
                                    errors++;
                                }
                            }
                        }
                    }
                    var _valid0 = _errs4 === errors;
                    if (_valid0) {
                        valid1 = true;
                        passing0 = 0;
                        var props0 = {};
                        props0.published = true;
                    }
                    const _errs6 = errors;
                    const _errs7 = errors;
                    const _errs8 = errors;
                    if (data && typeof data == "object" && !Array.isArray(data)) {
                        let missing1;
                        if ((data.published === undefined) && (missing1 = "published")) {
                            const err2 = {};
                            if (vErrors === null) {
                                vErrors = [err2];
                            }
                            else {
                                vErrors.push(err2);
                            }
                            errors++;
                        }
                    }
                    var valid3 = _errs8 === errors;
                    if (valid3) {
                        const err3 = { instancePath, schemaPath: "#/dependencies/datePublished/oneOf/1/not", keyword: "not", params: {}, message: "must NOT be valid" };
                        if (vErrors === null) {
                            vErrors = [err3];
                        }
                        else {
                            vErrors.push(err3);
                        }
                        errors++;
                    }
                    else {
                        errors = _errs7;
                        if (vErrors !== null) {
                            if (_errs7) {
                                vErrors.length = _errs7;
                            }
                            else {
                                vErrors = null;
                            }
                        }
                    }
                    var _valid0 = _errs6 === errors;
                    if (_valid0 && valid1) {
                        valid1 = false;
                        passing0 = [passing0, 1];
                    }
                    else {
                        if (_valid0) {
                            valid1 = true;
                            passing0 = 1;
                        }
                    }
                    if (!valid1) {
                        const err4 = { instancePath, schemaPath: "#/dependencies/datePublished/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
                        if (vErrors === null) {
                            vErrors = [err4];
                        }
                        else {
                            vErrors.push(err4);
                        }
                        errors++;
                        validate42.errors = vErrors;
                        return false;
                    }
                    else {
                        errors = _errs3;
                        if (vErrors !== null) {
                            if (_errs3) {
                                vErrors.length = _errs3;
                            }
                            else {
                                vErrors = null;
                            }
                        }
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.protocol !== undefined) {
                        const _errs9 = errors;
                        if (typeof data.protocol !== "string") {
                            validate42.errors = [{ instancePath: instancePath + "/protocol", schemaPath: "#/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid4 = _errs9 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                    if (valid4) {
                        if (data.protocolPath !== undefined) {
                            const _errs11 = errors;
                            if (typeof data.protocolPath !== "string") {
                                validate42.errors = [{ instancePath: instancePath + "/protocolPath", schemaPath: "#/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid4 = _errs11 === errors;
                        }
                        else {
                            var valid4 = true;
                        }
                        if (valid4) {
                            if (data.author !== undefined) {
                                let data3 = data.author;
                                const _errs13 = errors;
                                const _errs14 = errors;
                                let valid5 = false;
                                let passing1 = null;
                                const _errs15 = errors;
                                const _errs16 = errors;
                                if (errors === _errs16) {
                                    if (typeof data3 === "string") {
                                        if (!pattern12.test(data3)) {
                                            const err5 = { instancePath: instancePath + "/author", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" };
                                            if (vErrors === null) {
                                                vErrors = [err5];
                                            }
                                            else {
                                                vErrors.push(err5);
                                            }
                                            errors++;
                                        }
                                    }
                                    else {
                                        const err6 = { instancePath: instancePath + "/author", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err6];
                                        }
                                        else {
                                            vErrors.push(err6);
                                        }
                                        errors++;
                                    }
                                }
                                var _valid1 = _errs15 === errors;
                                if (_valid1) {
                                    valid5 = true;
                                    passing1 = 0;
                                }
                                const _errs18 = errors;
                                if (errors === _errs18) {
                                    if (Array.isArray(data3)) {
                                        var valid7 = true;
                                        const len0 = data3.length;
                                        for (let i0 = 0; i0 < len0; i0++) {
                                            let data4 = data3[i0];
                                            const _errs20 = errors;
                                            const _errs21 = errors;
                                            if (errors === _errs21) {
                                                if (typeof data4 === "string") {
                                                    if (!pattern12.test(data4)) {
                                                        const err7 = { instancePath: instancePath + "/author/" + i0, schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" };
                                                        if (vErrors === null) {
                                                            vErrors = [err7];
                                                        }
                                                        else {
                                                            vErrors.push(err7);
                                                        }
                                                        errors++;
                                                    }
                                                }
                                                else {
                                                    const err8 = { instancePath: instancePath + "/author/" + i0, schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err8];
                                                    }
                                                    else {
                                                        vErrors.push(err8);
                                                    }
                                                    errors++;
                                                }
                                            }
                                            var valid7 = _errs20 === errors;
                                            if (!valid7) {
                                                break;
                                            }
                                        }
                                    }
                                    else {
                                        const err9 = { instancePath: instancePath + "/author", schemaPath: "#/properties/author/oneOf/1/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                        if (vErrors === null) {
                                            vErrors = [err9];
                                        }
                                        else {
                                            vErrors.push(err9);
                                        }
                                        errors++;
                                    }
                                }
                                var _valid1 = _errs18 === errors;
                                if (_valid1 && valid5) {
                                    valid5 = false;
                                    passing1 = [passing1, 1];
                                }
                                else {
                                    if (_valid1) {
                                        valid5 = true;
                                        passing1 = 1;
                                    }
                                }
                                if (!valid5) {
                                    const err10 = { instancePath: instancePath + "/author", schemaPath: "#/properties/author/oneOf", keyword: "oneOf", params: { passingSchemas: passing1 }, message: "must match exactly one schema in oneOf" };
                                    if (vErrors === null) {
                                        vErrors = [err10];
                                    }
                                    else {
                                        vErrors.push(err10);
                                    }
                                    errors++;
                                    validate42.errors = vErrors;
                                    return false;
                                }
                                else {
                                    errors = _errs14;
                                    if (vErrors !== null) {
                                        if (_errs14) {
                                            vErrors.length = _errs14;
                                        }
                                        else {
                                            vErrors = null;
                                        }
                                    }
                                }
                                var valid4 = _errs13 === errors;
                            }
                            else {
                                var valid4 = true;
                            }
                            if (valid4) {
                                if (data.attester !== undefined) {
                                    let data5 = data.attester;
                                    const _errs23 = errors;
                                    const _errs24 = errors;
                                    if (errors === _errs24) {
                                        if (typeof data5 === "string") {
                                            if (!pattern12.test(data5)) {
                                                validate42.errors = [{ instancePath: instancePath + "/attester", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                return false;
                                            }
                                        }
                                        else {
                                            validate42.errors = [{ instancePath: instancePath + "/attester", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                    }
                                    var valid4 = _errs23 === errors;
                                }
                                else {
                                    var valid4 = true;
                                }
                                if (valid4) {
                                    if (data.recipient !== undefined) {
                                        let data6 = data.recipient;
                                        const _errs26 = errors;
                                        const _errs27 = errors;
                                        let valid10 = false;
                                        let passing2 = null;
                                        const _errs28 = errors;
                                        const _errs29 = errors;
                                        if (errors === _errs29) {
                                            if (typeof data6 === "string") {
                                                if (!pattern12.test(data6)) {
                                                    const err11 = { instancePath: instancePath + "/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" };
                                                    if (vErrors === null) {
                                                        vErrors = [err11];
                                                    }
                                                    else {
                                                        vErrors.push(err11);
                                                    }
                                                    errors++;
                                                }
                                            }
                                            else {
                                                const err12 = { instancePath: instancePath + "/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err12];
                                                }
                                                else {
                                                    vErrors.push(err12);
                                                }
                                                errors++;
                                            }
                                        }
                                        var _valid2 = _errs28 === errors;
                                        if (_valid2) {
                                            valid10 = true;
                                            passing2 = 0;
                                        }
                                        const _errs31 = errors;
                                        if (errors === _errs31) {
                                            if (Array.isArray(data6)) {
                                                var valid12 = true;
                                                const len1 = data6.length;
                                                for (let i1 = 0; i1 < len1; i1++) {
                                                    let data7 = data6[i1];
                                                    const _errs33 = errors;
                                                    const _errs34 = errors;
                                                    if (errors === _errs34) {
                                                        if (typeof data7 === "string") {
                                                            if (!pattern12.test(data7)) {
                                                                const err13 = { instancePath: instancePath + "/recipient/" + i1, schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err13];
                                                                }
                                                                else {
                                                                    vErrors.push(err13);
                                                                }
                                                                errors++;
                                                            }
                                                        }
                                                        else {
                                                            const err14 = { instancePath: instancePath + "/recipient/" + i1, schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err14];
                                                            }
                                                            else {
                                                                vErrors.push(err14);
                                                            }
                                                            errors++;
                                                        }
                                                    }
                                                    var valid12 = _errs33 === errors;
                                                    if (!valid12) {
                                                        break;
                                                    }
                                                }
                                            }
                                            else {
                                                const err15 = { instancePath: instancePath + "/recipient", schemaPath: "#/properties/recipient/oneOf/1/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                if (vErrors === null) {
                                                    vErrors = [err15];
                                                }
                                                else {
                                                    vErrors.push(err15);
                                                }
                                                errors++;
                                            }
                                        }
                                        var _valid2 = _errs31 === errors;
                                        if (_valid2 && valid10) {
                                            valid10 = false;
                                            passing2 = [passing2, 1];
                                        }
                                        else {
                                            if (_valid2) {
                                                valid10 = true;
                                                passing2 = 1;
                                            }
                                        }
                                        if (!valid10) {
                                            const err16 = { instancePath: instancePath + "/recipient", schemaPath: "#/properties/recipient/oneOf", keyword: "oneOf", params: { passingSchemas: passing2 }, message: "must match exactly one schema in oneOf" };
                                            if (vErrors === null) {
                                                vErrors = [err16];
                                            }
                                            else {
                                                vErrors.push(err16);
                                            }
                                            errors++;
                                            validate42.errors = vErrors;
                                            return false;
                                        }
                                        else {
                                            errors = _errs27;
                                            if (vErrors !== null) {
                                                if (_errs27) {
                                                    vErrors.length = _errs27;
                                                }
                                                else {
                                                    vErrors = null;
                                                }
                                            }
                                        }
                                        var valid4 = _errs26 === errors;
                                    }
                                    else {
                                        var valid4 = true;
                                    }
                                    if (valid4) {
                                        if (data.contextId !== undefined) {
                                            const _errs36 = errors;
                                            if (typeof data.contextId !== "string") {
                                                validate42.errors = [{ instancePath: instancePath + "/contextId", schemaPath: "#/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid4 = _errs36 === errors;
                                        }
                                        else {
                                            var valid4 = true;
                                        }
                                        if (valid4) {
                                            if (data.schema !== undefined) {
                                                const _errs38 = errors;
                                                if (typeof data.schema !== "string") {
                                                    validate42.errors = [{ instancePath: instancePath + "/schema", schemaPath: "#/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid4 = _errs38 === errors;
                                            }
                                            else {
                                                var valid4 = true;
                                            }
                                            if (valid4) {
                                                if (data.tags !== undefined) {
                                                    let data10 = data.tags;
                                                    const _errs40 = errors;
                                                    if (errors === _errs40) {
                                                        if (data10 && typeof data10 == "object" && !Array.isArray(data10)) {
                                                            if (Object.keys(data10).length < 1) {
                                                                validate42.errors = [{ instancePath: instancePath + "/tags", schemaPath: "#/properties/tags/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                return false;
                                                            }
                                                            else {
                                                                for (const key1 in data10) {
                                                                    let data11 = data10[key1];
                                                                    const _errs43 = errors;
                                                                    const _errs44 = errors;
                                                                    let valid15 = false;
                                                                    let passing3 = null;
                                                                    const _errs45 = errors;
                                                                    if (typeof data11 !== "string") {
                                                                        const err17 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/tags/additionalProperties/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                        if (vErrors === null) {
                                                                            vErrors = [err17];
                                                                        }
                                                                        else {
                                                                            vErrors.push(err17);
                                                                        }
                                                                        errors++;
                                                                    }
                                                                    var _valid3 = _errs45 === errors;
                                                                    if (_valid3) {
                                                                        valid15 = true;
                                                                        passing3 = 0;
                                                                    }
                                                                    const _errs47 = errors;
                                                                    if (!((typeof data11 == "number") && (isFinite(data11)))) {
                                                                        const err18 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/tags/additionalProperties/oneOf/1/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                        if (vErrors === null) {
                                                                            vErrors = [err18];
                                                                        }
                                                                        else {
                                                                            vErrors.push(err18);
                                                                        }
                                                                        errors++;
                                                                    }
                                                                    var _valid3 = _errs47 === errors;
                                                                    if (_valid3 && valid15) {
                                                                        valid15 = false;
                                                                        passing3 = [passing3, 1];
                                                                    }
                                                                    else {
                                                                        if (_valid3) {
                                                                            valid15 = true;
                                                                            passing3 = 1;
                                                                        }
                                                                        const _errs49 = errors;
                                                                        if (typeof data11 !== "boolean") {
                                                                            const err19 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/tags/additionalProperties/oneOf/2/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                                                                            if (vErrors === null) {
                                                                                vErrors = [err19];
                                                                            }
                                                                            else {
                                                                                vErrors.push(err19);
                                                                            }
                                                                            errors++;
                                                                        }
                                                                        var _valid3 = _errs49 === errors;
                                                                        if (_valid3 && valid15) {
                                                                            valid15 = false;
                                                                            passing3 = [passing3, 2];
                                                                        }
                                                                        else {
                                                                            if (_valid3) {
                                                                                valid15 = true;
                                                                                passing3 = 2;
                                                                            }
                                                                            const _errs51 = errors;
                                                                            if (errors === _errs51) {
                                                                                if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                    if (Object.keys(data11).length < 1) {
                                                                                        const err20 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/tags/additionalProperties/oneOf/3/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" };
                                                                                        if (vErrors === null) {
                                                                                            vErrors = [err20];
                                                                                        }
                                                                                        else {
                                                                                            vErrors.push(err20);
                                                                                        }
                                                                                        errors++;
                                                                                    }
                                                                                    else {
                                                                                        const _errs53 = errors;
                                                                                        for (const key2 in data11) {
                                                                                            if (!(key2 === "startsWith")) {
                                                                                                const err21 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/tags/additionalProperties/oneOf/3/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" };
                                                                                                if (vErrors === null) {
                                                                                                    vErrors = [err21];
                                                                                                }
                                                                                                else {
                                                                                                    vErrors.push(err21);
                                                                                                }
                                                                                                errors++;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        if (_errs53 === errors) {
                                                                                            if (data11.startsWith !== undefined) {
                                                                                                if (typeof data11.startsWith !== "string") {
                                                                                                    const err22 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/startsWith", schemaPath: "#/properties/tags/additionalProperties/oneOf/3/properties/startsWith/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                    if (vErrors === null) {
                                                                                                        vErrors = [err22];
                                                                                                    }
                                                                                                    else {
                                                                                                        vErrors.push(err22);
                                                                                                    }
                                                                                                    errors++;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    const err23 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/tags/additionalProperties/oneOf/3/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                                                    if (vErrors === null) {
                                                                                        vErrors = [err23];
                                                                                    }
                                                                                    else {
                                                                                        vErrors.push(err23);
                                                                                    }
                                                                                    errors++;
                                                                                }
                                                                            }
                                                                            var _valid3 = _errs51 === errors;
                                                                            if (_valid3 && valid15) {
                                                                                valid15 = false;
                                                                                passing3 = [passing3, 3];
                                                                            }
                                                                            else {
                                                                                if (_valid3) {
                                                                                    valid15 = true;
                                                                                    passing3 = 3;
                                                                                    var props1 = true;
                                                                                }
                                                                                const _errs56 = errors;
                                                                                const _errs57 = errors;
                                                                                if (errors === _errs57) {
                                                                                    if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                        if (Object.keys(data11).length < 1) {
                                                                                            const err24 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" };
                                                                                            if (vErrors === null) {
                                                                                                vErrors = [err24];
                                                                                            }
                                                                                            else {
                                                                                                vErrors.push(err24);
                                                                                            }
                                                                                            errors++;
                                                                                        }
                                                                                        else {
                                                                                            const _errs59 = errors;
                                                                                            for (const key3 in data11) {
                                                                                                if (!((((key3 === "gt") || (key3 === "gte")) || (key3 === "lt")) || (key3 === "lte"))) {
                                                                                                    const err25 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" };
                                                                                                    if (vErrors === null) {
                                                                                                        vErrors = [err25];
                                                                                                    }
                                                                                                    else {
                                                                                                        vErrors.push(err25);
                                                                                                    }
                                                                                                    errors++;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            if (_errs59 === errors) {
                                                                                                if (data11.gt !== undefined) {
                                                                                                    const _errs60 = errors;
                                                                                                    const _errs61 = errors;
                                                                                                    const _errs62 = errors;
                                                                                                    if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                                        let missing2;
                                                                                                        if ((data11.gte === undefined) && (missing2 = "gte")) {
                                                                                                            const err26 = {};
                                                                                                            if (vErrors === null) {
                                                                                                                vErrors = [err26];
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors.push(err26);
                                                                                                            }
                                                                                                            errors++;
                                                                                                        }
                                                                                                    }
                                                                                                    var valid19 = _errs62 === errors;
                                                                                                    if (valid19) {
                                                                                                        const err27 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/dependencies/gt/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                                                                        if (vErrors === null) {
                                                                                                            vErrors = [err27];
                                                                                                        }
                                                                                                        else {
                                                                                                            vErrors.push(err27);
                                                                                                        }
                                                                                                        errors++;
                                                                                                    }
                                                                                                    else {
                                                                                                        errors = _errs61;
                                                                                                        if (vErrors !== null) {
                                                                                                            if (_errs61) {
                                                                                                                vErrors.length = _errs61;
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors = null;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    var valid18 = _errs60 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid18 = true;
                                                                                                }
                                                                                                if (valid18) {
                                                                                                    if (data11.gte !== undefined) {
                                                                                                        const _errs63 = errors;
                                                                                                        const _errs64 = errors;
                                                                                                        const _errs65 = errors;
                                                                                                        if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                                            let missing3;
                                                                                                            if ((data11.gt === undefined) && (missing3 = "gt")) {
                                                                                                                const err28 = {};
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err28];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err28);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid20 = _errs65 === errors;
                                                                                                        if (valid20) {
                                                                                                            const err29 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/dependencies/gte/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                                                                            if (vErrors === null) {
                                                                                                                vErrors = [err29];
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors.push(err29);
                                                                                                            }
                                                                                                            errors++;
                                                                                                        }
                                                                                                        else {
                                                                                                            errors = _errs64;
                                                                                                            if (vErrors !== null) {
                                                                                                                if (_errs64) {
                                                                                                                    vErrors.length = _errs64;
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors = null;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        var valid18 = _errs63 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid18 = true;
                                                                                                    }
                                                                                                    if (valid18) {
                                                                                                        if (data11.lt !== undefined) {
                                                                                                            const _errs66 = errors;
                                                                                                            const _errs67 = errors;
                                                                                                            const _errs68 = errors;
                                                                                                            if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                                                let missing4;
                                                                                                                if ((data11.lte === undefined) && (missing4 = "lte")) {
                                                                                                                    const err30 = {};
                                                                                                                    if (vErrors === null) {
                                                                                                                        vErrors = [err30];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        vErrors.push(err30);
                                                                                                                    }
                                                                                                                    errors++;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid21 = _errs68 === errors;
                                                                                                            if (valid21) {
                                                                                                                const err31 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/dependencies/lt/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err31];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err31);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                            else {
                                                                                                                errors = _errs67;
                                                                                                                if (vErrors !== null) {
                                                                                                                    if (_errs67) {
                                                                                                                        vErrors.length = _errs67;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        vErrors = null;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            var valid18 = _errs66 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid18 = true;
                                                                                                        }
                                                                                                        if (valid18) {
                                                                                                            if (data11.lte !== undefined) {
                                                                                                                const _errs69 = errors;
                                                                                                                const _errs70 = errors;
                                                                                                                const _errs71 = errors;
                                                                                                                if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                                                    let missing5;
                                                                                                                    if ((data11.lt === undefined) && (missing5 = "lt")) {
                                                                                                                        const err32 = {};
                                                                                                                        if (vErrors === null) {
                                                                                                                            vErrors = [err32];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            vErrors.push(err32);
                                                                                                                        }
                                                                                                                        errors++;
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid22 = _errs71 === errors;
                                                                                                                if (valid22) {
                                                                                                                    const err33 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/dependencies/lte/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                                                                                    if (vErrors === null) {
                                                                                                                        vErrors = [err33];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        vErrors.push(err33);
                                                                                                                    }
                                                                                                                    errors++;
                                                                                                                }
                                                                                                                else {
                                                                                                                    errors = _errs70;
                                                                                                                    if (vErrors !== null) {
                                                                                                                        if (_errs70) {
                                                                                                                            vErrors.length = _errs70;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            vErrors = null;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid18 = _errs69 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid18 = true;
                                                                                                            }
                                                                                                            if (valid18) {
                                                                                                                if (data11.gt !== undefined) {
                                                                                                                    const _errs72 = errors;
                                                                                                                    if (typeof data11.gt !== "string") {
                                                                                                                        const err34 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/gt", schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/properties/gt/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                                        if (vErrors === null) {
                                                                                                                            vErrors = [err34];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            vErrors.push(err34);
                                                                                                                        }
                                                                                                                        errors++;
                                                                                                                    }
                                                                                                                    var valid23 = _errs72 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid23 = true;
                                                                                                                }
                                                                                                                if (valid23) {
                                                                                                                    if (data11.gte !== undefined) {
                                                                                                                        const _errs74 = errors;
                                                                                                                        if (typeof data11.gte !== "string") {
                                                                                                                            const err35 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/gte", schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/properties/gte/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                                            if (vErrors === null) {
                                                                                                                                vErrors = [err35];
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                vErrors.push(err35);
                                                                                                                            }
                                                                                                                            errors++;
                                                                                                                        }
                                                                                                                        var valid23 = _errs74 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid23 = true;
                                                                                                                    }
                                                                                                                    if (valid23) {
                                                                                                                        if (data11.lt !== undefined) {
                                                                                                                            const _errs76 = errors;
                                                                                                                            if (typeof data11.lt !== "string") {
                                                                                                                                const err36 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/lt", schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/properties/lt/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                                                if (vErrors === null) {
                                                                                                                                    vErrors = [err36];
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    vErrors.push(err36);
                                                                                                                                }
                                                                                                                                errors++;
                                                                                                                            }
                                                                                                                            var valid23 = _errs76 === errors;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            var valid23 = true;
                                                                                                                        }
                                                                                                                        if (valid23) {
                                                                                                                            if (data11.lte !== undefined) {
                                                                                                                                const _errs78 = errors;
                                                                                                                                if (typeof data11.lte !== "string") {
                                                                                                                                    const err37 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/lte", schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/properties/lte/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                                                    if (vErrors === null) {
                                                                                                                                        vErrors = [err37];
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        vErrors.push(err37);
                                                                                                                                    }
                                                                                                                                    errors++;
                                                                                                                                }
                                                                                                                                var valid23 = _errs78 === errors;
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                var valid23 = true;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        const err38 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/string-range-filter.json/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                                                        if (vErrors === null) {
                                                                                            vErrors = [err38];
                                                                                        }
                                                                                        else {
                                                                                            vErrors.push(err38);
                                                                                        }
                                                                                        errors++;
                                                                                    }
                                                                                }
                                                                                var _valid3 = _errs56 === errors;
                                                                                if (_valid3 && valid15) {
                                                                                    valid15 = false;
                                                                                    passing3 = [passing3, 4];
                                                                                }
                                                                                else {
                                                                                    if (_valid3) {
                                                                                        valid15 = true;
                                                                                        passing3 = 4;
                                                                                        if (props1 !== true) {
                                                                                            props1 = true;
                                                                                        }
                                                                                    }
                                                                                    const _errs80 = errors;
                                                                                    const _errs81 = errors;
                                                                                    if (errors === _errs81) {
                                                                                        if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                            if (Object.keys(data11).length < 1) {
                                                                                                const err39 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" };
                                                                                                if (vErrors === null) {
                                                                                                    vErrors = [err39];
                                                                                                }
                                                                                                else {
                                                                                                    vErrors.push(err39);
                                                                                                }
                                                                                                errors++;
                                                                                            }
                                                                                            else {
                                                                                                const _errs83 = errors;
                                                                                                for (const key4 in data11) {
                                                                                                    if (!((((key4 === "gt") || (key4 === "gte")) || (key4 === "lt")) || (key4 === "lte"))) {
                                                                                                        const err40 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" };
                                                                                                        if (vErrors === null) {
                                                                                                            vErrors = [err40];
                                                                                                        }
                                                                                                        else {
                                                                                                            vErrors.push(err40);
                                                                                                        }
                                                                                                        errors++;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                if (_errs83 === errors) {
                                                                                                    if (data11.gt !== undefined) {
                                                                                                        const _errs84 = errors;
                                                                                                        const _errs85 = errors;
                                                                                                        const _errs86 = errors;
                                                                                                        if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                                            let missing6;
                                                                                                            if ((data11.gte === undefined) && (missing6 = "gte")) {
                                                                                                                const err41 = {};
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err41];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err41);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid26 = _errs86 === errors;
                                                                                                        if (valid26) {
                                                                                                            const err42 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/dependencies/gt/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                                                                            if (vErrors === null) {
                                                                                                                vErrors = [err42];
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors.push(err42);
                                                                                                            }
                                                                                                            errors++;
                                                                                                        }
                                                                                                        else {
                                                                                                            errors = _errs85;
                                                                                                            if (vErrors !== null) {
                                                                                                                if (_errs85) {
                                                                                                                    vErrors.length = _errs85;
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors = null;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        var valid25 = _errs84 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid25 = true;
                                                                                                    }
                                                                                                    if (valid25) {
                                                                                                        if (data11.gte !== undefined) {
                                                                                                            const _errs87 = errors;
                                                                                                            const _errs88 = errors;
                                                                                                            const _errs89 = errors;
                                                                                                            if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                                                let missing7;
                                                                                                                if ((data11.gt === undefined) && (missing7 = "gt")) {
                                                                                                                    const err43 = {};
                                                                                                                    if (vErrors === null) {
                                                                                                                        vErrors = [err43];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        vErrors.push(err43);
                                                                                                                    }
                                                                                                                    errors++;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid27 = _errs89 === errors;
                                                                                                            if (valid27) {
                                                                                                                const err44 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/dependencies/gte/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err44];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err44);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                            else {
                                                                                                                errors = _errs88;
                                                                                                                if (vErrors !== null) {
                                                                                                                    if (_errs88) {
                                                                                                                        vErrors.length = _errs88;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        vErrors = null;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            var valid25 = _errs87 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid25 = true;
                                                                                                        }
                                                                                                        if (valid25) {
                                                                                                            if (data11.lt !== undefined) {
                                                                                                                const _errs90 = errors;
                                                                                                                const _errs91 = errors;
                                                                                                                const _errs92 = errors;
                                                                                                                if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                                                    let missing8;
                                                                                                                    if ((data11.lte === undefined) && (missing8 = "lte")) {
                                                                                                                        const err45 = {};
                                                                                                                        if (vErrors === null) {
                                                                                                                            vErrors = [err45];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            vErrors.push(err45);
                                                                                                                        }
                                                                                                                        errors++;
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid28 = _errs92 === errors;
                                                                                                                if (valid28) {
                                                                                                                    const err46 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/dependencies/lt/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                                                                                    if (vErrors === null) {
                                                                                                                        vErrors = [err46];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        vErrors.push(err46);
                                                                                                                    }
                                                                                                                    errors++;
                                                                                                                }
                                                                                                                else {
                                                                                                                    errors = _errs91;
                                                                                                                    if (vErrors !== null) {
                                                                                                                        if (_errs91) {
                                                                                                                            vErrors.length = _errs91;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            vErrors = null;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid25 = _errs90 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid25 = true;
                                                                                                            }
                                                                                                            if (valid25) {
                                                                                                                if (data11.lte !== undefined) {
                                                                                                                    const _errs93 = errors;
                                                                                                                    const _errs94 = errors;
                                                                                                                    const _errs95 = errors;
                                                                                                                    if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                                                                                                                        let missing9;
                                                                                                                        if ((data11.lt === undefined) && (missing9 = "lt")) {
                                                                                                                            const err47 = {};
                                                                                                                            if (vErrors === null) {
                                                                                                                                vErrors = [err47];
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                vErrors.push(err47);
                                                                                                                            }
                                                                                                                            errors++;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid29 = _errs95 === errors;
                                                                                                                    if (valid29) {
                                                                                                                        const err48 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/dependencies/lte/not", keyword: "not", params: {}, message: "must NOT be valid" };
                                                                                                                        if (vErrors === null) {
                                                                                                                            vErrors = [err48];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            vErrors.push(err48);
                                                                                                                        }
                                                                                                                        errors++;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        errors = _errs94;
                                                                                                                        if (vErrors !== null) {
                                                                                                                            if (_errs94) {
                                                                                                                                vErrors.length = _errs94;
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                vErrors = null;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid25 = _errs93 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid25 = true;
                                                                                                                }
                                                                                                                if (valid25) {
                                                                                                                    if (data11.gt !== undefined) {
                                                                                                                        let data17 = data11.gt;
                                                                                                                        const _errs96 = errors;
                                                                                                                        if (!((typeof data17 == "number") && (isFinite(data17)))) {
                                                                                                                            const err49 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/gt", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/properties/gt/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                                                            if (vErrors === null) {
                                                                                                                                vErrors = [err49];
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                vErrors.push(err49);
                                                                                                                            }
                                                                                                                            errors++;
                                                                                                                        }
                                                                                                                        var valid30 = _errs96 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid30 = true;
                                                                                                                    }
                                                                                                                    if (valid30) {
                                                                                                                        if (data11.gte !== undefined) {
                                                                                                                            let data18 = data11.gte;
                                                                                                                            const _errs98 = errors;
                                                                                                                            if (!((typeof data18 == "number") && (isFinite(data18)))) {
                                                                                                                                const err50 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/gte", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/properties/gte/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                                                                if (vErrors === null) {
                                                                                                                                    vErrors = [err50];
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    vErrors.push(err50);
                                                                                                                                }
                                                                                                                                errors++;
                                                                                                                            }
                                                                                                                            var valid30 = _errs98 === errors;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            var valid30 = true;
                                                                                                                        }
                                                                                                                        if (valid30) {
                                                                                                                            if (data11.lt !== undefined) {
                                                                                                                                let data19 = data11.lt;
                                                                                                                                const _errs100 = errors;
                                                                                                                                if (!((typeof data19 == "number") && (isFinite(data19)))) {
                                                                                                                                    const err51 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/lt", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/properties/lt/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                                                                    if (vErrors === null) {
                                                                                                                                        vErrors = [err51];
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        vErrors.push(err51);
                                                                                                                                    }
                                                                                                                                    errors++;
                                                                                                                                }
                                                                                                                                var valid30 = _errs100 === errors;
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                var valid30 = true;
                                                                                                                            }
                                                                                                                            if (valid30) {
                                                                                                                                if (data11.lte !== undefined) {
                                                                                                                                    let data20 = data11.lte;
                                                                                                                                    const _errs102 = errors;
                                                                                                                                    if (!((typeof data20 == "number") && (isFinite(data20)))) {
                                                                                                                                        const err52 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/lte", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/properties/lte/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                                                                        if (vErrors === null) {
                                                                                                                                            vErrors = [err52];
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            vErrors.push(err52);
                                                                                                                                        }
                                                                                                                                        errors++;
                                                                                                                                    }
                                                                                                                                    var valid30 = _errs102 === errors;
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    var valid30 = true;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            const err53 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                                                            if (vErrors === null) {
                                                                                                vErrors = [err53];
                                                                                            }
                                                                                            else {
                                                                                                vErrors.push(err53);
                                                                                            }
                                                                                            errors++;
                                                                                        }
                                                                                    }
                                                                                    var _valid3 = _errs80 === errors;
                                                                                    if (_valid3 && valid15) {
                                                                                        valid15 = false;
                                                                                        passing3 = [passing3, 5];
                                                                                    }
                                                                                    else {
                                                                                        if (_valid3) {
                                                                                            valid15 = true;
                                                                                            passing3 = 5;
                                                                                            if (props1 !== true) {
                                                                                                props1 = true;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    if (!valid15) {
                                                                        const err54 = { instancePath: instancePath + "/tags/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/tags/additionalProperties/oneOf", keyword: "oneOf", params: { passingSchemas: passing3 }, message: "must match exactly one schema in oneOf" };
                                                                        if (vErrors === null) {
                                                                            vErrors = [err54];
                                                                        }
                                                                        else {
                                                                            vErrors.push(err54);
                                                                        }
                                                                        errors++;
                                                                        validate42.errors = vErrors;
                                                                        return false;
                                                                    }
                                                                    else {
                                                                        errors = _errs44;
                                                                        if (vErrors !== null) {
                                                                            if (_errs44) {
                                                                                vErrors.length = _errs44;
                                                                            }
                                                                            else {
                                                                                vErrors = null;
                                                                            }
                                                                        }
                                                                    }
                                                                    var valid14 = _errs43 === errors;
                                                                    if (!valid14) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            validate42.errors = [{ instancePath: instancePath + "/tags", schemaPath: "#/properties/tags/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid4 = _errs40 === errors;
                                                }
                                                else {
                                                    var valid4 = true;
                                                }
                                                if (valid4) {
                                                    if (data.recordId !== undefined) {
                                                        const _errs104 = errors;
                                                        if (typeof data.recordId !== "string") {
                                                            validate42.errors = [{ instancePath: instancePath + "/recordId", schemaPath: "#/properties/recordId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid4 = _errs104 === errors;
                                                    }
                                                    else {
                                                        var valid4 = true;
                                                    }
                                                    if (valid4) {
                                                        if (data.parentId !== undefined) {
                                                            const _errs106 = errors;
                                                            if (typeof data.parentId !== "string") {
                                                                validate42.errors = [{ instancePath: instancePath + "/parentId", schemaPath: "#/properties/parentId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                return false;
                                                            }
                                                            var valid4 = _errs106 === errors;
                                                        }
                                                        else {
                                                            var valid4 = true;
                                                        }
                                                        if (valid4) {
                                                            if (data.published !== undefined) {
                                                                const _errs108 = errors;
                                                                if (typeof data.published !== "boolean") {
                                                                    validate42.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                    return false;
                                                                }
                                                                var valid4 = _errs108 === errors;
                                                            }
                                                            else {
                                                                var valid4 = true;
                                                            }
                                                            if (valid4) {
                                                                if (data.dataFormat !== undefined) {
                                                                    const _errs110 = errors;
                                                                    if (typeof data.dataFormat !== "string") {
                                                                        validate42.errors = [{ instancePath: instancePath + "/dataFormat", schemaPath: "#/properties/dataFormat/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                    var valid4 = _errs110 === errors;
                                                                }
                                                                else {
                                                                    var valid4 = true;
                                                                }
                                                                if (valid4) {
                                                                    if (data.dataSize !== undefined) {
                                                                        let data25 = data.dataSize;
                                                                        const _errs112 = errors;
                                                                        const _errs113 = errors;
                                                                        if (errors === _errs113) {
                                                                            if (data25 && typeof data25 == "object" && !Array.isArray(data25)) {
                                                                                if (Object.keys(data25).length < 1) {
                                                                                    validate42.errors = [{ instancePath: instancePath + "/dataSize", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                                    return false;
                                                                                }
                                                                                else {
                                                                                    const _errs115 = errors;
                                                                                    for (const key5 in data25) {
                                                                                        if (!((((key5 === "gt") || (key5 === "gte")) || (key5 === "lt")) || (key5 === "lte"))) {
                                                                                            validate42.errors = [{ instancePath: instancePath + "/dataSize", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }];
                                                                                            return false;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    if (_errs115 === errors) {
                                                                                        if (data25.gt !== undefined) {
                                                                                            const _errs116 = errors;
                                                                                            const _errs117 = errors;
                                                                                            const _errs118 = errors;
                                                                                            if (data25 && typeof data25 == "object" && !Array.isArray(data25)) {
                                                                                                let missing10;
                                                                                                if ((data25.gte === undefined) && (missing10 = "gte")) {
                                                                                                    const err55 = {};
                                                                                                    if (vErrors === null) {
                                                                                                        vErrors = [err55];
                                                                                                    }
                                                                                                    else {
                                                                                                        vErrors.push(err55);
                                                                                                    }
                                                                                                    errors++;
                                                                                                }
                                                                                            }
                                                                                            var valid33 = _errs118 === errors;
                                                                                            if (valid33) {
                                                                                                validate42.errors = [{ instancePath: instancePath + "/dataSize", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/dependencies/gt/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                                                                                                return false;
                                                                                            }
                                                                                            else {
                                                                                                errors = _errs117;
                                                                                                if (vErrors !== null) {
                                                                                                    if (_errs117) {
                                                                                                        vErrors.length = _errs117;
                                                                                                    }
                                                                                                    else {
                                                                                                        vErrors = null;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            var valid32 = _errs116 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid32 = true;
                                                                                        }
                                                                                        if (valid32) {
                                                                                            if (data25.gte !== undefined) {
                                                                                                const _errs119 = errors;
                                                                                                const _errs120 = errors;
                                                                                                const _errs121 = errors;
                                                                                                if (data25 && typeof data25 == "object" && !Array.isArray(data25)) {
                                                                                                    let missing11;
                                                                                                    if ((data25.gt === undefined) && (missing11 = "gt")) {
                                                                                                        const err56 = {};
                                                                                                        if (vErrors === null) {
                                                                                                            vErrors = [err56];
                                                                                                        }
                                                                                                        else {
                                                                                                            vErrors.push(err56);
                                                                                                        }
                                                                                                        errors++;
                                                                                                    }
                                                                                                }
                                                                                                var valid34 = _errs121 === errors;
                                                                                                if (valid34) {
                                                                                                    validate42.errors = [{ instancePath: instancePath + "/dataSize", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/dependencies/gte/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                                                                                                    return false;
                                                                                                }
                                                                                                else {
                                                                                                    errors = _errs120;
                                                                                                    if (vErrors !== null) {
                                                                                                        if (_errs120) {
                                                                                                            vErrors.length = _errs120;
                                                                                                        }
                                                                                                        else {
                                                                                                            vErrors = null;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                var valid32 = _errs119 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid32 = true;
                                                                                            }
                                                                                            if (valid32) {
                                                                                                if (data25.lt !== undefined) {
                                                                                                    const _errs122 = errors;
                                                                                                    const _errs123 = errors;
                                                                                                    const _errs124 = errors;
                                                                                                    if (data25 && typeof data25 == "object" && !Array.isArray(data25)) {
                                                                                                        let missing12;
                                                                                                        if ((data25.lte === undefined) && (missing12 = "lte")) {
                                                                                                            const err57 = {};
                                                                                                            if (vErrors === null) {
                                                                                                                vErrors = [err57];
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors.push(err57);
                                                                                                            }
                                                                                                            errors++;
                                                                                                        }
                                                                                                    }
                                                                                                    var valid35 = _errs124 === errors;
                                                                                                    if (valid35) {
                                                                                                        validate42.errors = [{ instancePath: instancePath + "/dataSize", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/dependencies/lt/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    else {
                                                                                                        errors = _errs123;
                                                                                                        if (vErrors !== null) {
                                                                                                            if (_errs123) {
                                                                                                                vErrors.length = _errs123;
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors = null;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    var valid32 = _errs122 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid32 = true;
                                                                                                }
                                                                                                if (valid32) {
                                                                                                    if (data25.lte !== undefined) {
                                                                                                        const _errs125 = errors;
                                                                                                        const _errs126 = errors;
                                                                                                        const _errs127 = errors;
                                                                                                        if (data25 && typeof data25 == "object" && !Array.isArray(data25)) {
                                                                                                            let missing13;
                                                                                                            if ((data25.lt === undefined) && (missing13 = "lt")) {
                                                                                                                const err58 = {};
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err58];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err58);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid36 = _errs127 === errors;
                                                                                                        if (valid36) {
                                                                                                            validate42.errors = [{ instancePath: instancePath + "/dataSize", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/dependencies/lte/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        else {
                                                                                                            errors = _errs126;
                                                                                                            if (vErrors !== null) {
                                                                                                                if (_errs126) {
                                                                                                                    vErrors.length = _errs126;
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors = null;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        var valid32 = _errs125 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid32 = true;
                                                                                                    }
                                                                                                    if (valid32) {
                                                                                                        if (data25.gt !== undefined) {
                                                                                                            let data26 = data25.gt;
                                                                                                            const _errs128 = errors;
                                                                                                            if (!((typeof data26 == "number") && (isFinite(data26)))) {
                                                                                                                validate42.errors = [{ instancePath: instancePath + "/dataSize/gt", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/properties/gt/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                            var valid37 = _errs128 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid37 = true;
                                                                                                        }
                                                                                                        if (valid37) {
                                                                                                            if (data25.gte !== undefined) {
                                                                                                                let data27 = data25.gte;
                                                                                                                const _errs130 = errors;
                                                                                                                if (!((typeof data27 == "number") && (isFinite(data27)))) {
                                                                                                                    validate42.errors = [{ instancePath: instancePath + "/dataSize/gte", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/properties/gte/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                                var valid37 = _errs130 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid37 = true;
                                                                                                            }
                                                                                                            if (valid37) {
                                                                                                                if (data25.lt !== undefined) {
                                                                                                                    let data28 = data25.lt;
                                                                                                                    const _errs132 = errors;
                                                                                                                    if (!((typeof data28 == "number") && (isFinite(data28)))) {
                                                                                                                        validate42.errors = [{ instancePath: instancePath + "/dataSize/lt", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/properties/lt/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    var valid37 = _errs132 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid37 = true;
                                                                                                                }
                                                                                                                if (valid37) {
                                                                                                                    if (data25.lte !== undefined) {
                                                                                                                        let data29 = data25.lte;
                                                                                                                        const _errs134 = errors;
                                                                                                                        if (!((typeof data29 == "number") && (isFinite(data29)))) {
                                                                                                                            validate42.errors = [{ instancePath: instancePath + "/dataSize/lte", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/properties/lte/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid37 = _errs134 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid37 = true;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else {
                                                                                validate42.errors = [{ instancePath: instancePath + "/dataSize", schemaPath: "https://identity.foundation/dwn/json-schemas/number-range-filter.json/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                return false;
                                                                            }
                                                                        }
                                                                        var valid4 = _errs112 === errors;
                                                                    }
                                                                    else {
                                                                        var valid4 = true;
                                                                    }
                                                                    if (valid4) {
                                                                        if (data.dataCid !== undefined) {
                                                                            const _errs136 = errors;
                                                                            if (typeof data.dataCid !== "string") {
                                                                                validate42.errors = [{ instancePath: instancePath + "/dataCid", schemaPath: "#/properties/dataCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            var valid4 = _errs136 === errors;
                                                                        }
                                                                        else {
                                                                            var valid4 = true;
                                                                        }
                                                                        if (valid4) {
                                                                            if (data.dateCreated !== undefined) {
                                                                                let data31 = data.dateCreated;
                                                                                const _errs138 = errors;
                                                                                if (errors === _errs138) {
                                                                                    if (data31 && typeof data31 == "object" && !Array.isArray(data31)) {
                                                                                        if (Object.keys(data31).length < 1) {
                                                                                            validate42.errors = [{ instancePath: instancePath + "/dateCreated", schemaPath: "#/properties/dateCreated/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                                            return false;
                                                                                        }
                                                                                        else {
                                                                                            const _errs140 = errors;
                                                                                            for (const key6 in data31) {
                                                                                                if (!((key6 === "from") || (key6 === "to"))) {
                                                                                                    validate42.errors = [{ instancePath: instancePath + "/dateCreated", schemaPath: "#/properties/dateCreated/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }];
                                                                                                    return false;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            if (_errs140 === errors) {
                                                                                                if (data31.from !== undefined) {
                                                                                                    let data32 = data31.from;
                                                                                                    const _errs141 = errors;
                                                                                                    const _errs142 = errors;
                                                                                                    if (errors === _errs142) {
                                                                                                        if (typeof data32 === "string") {
                                                                                                            if (!pattern14.test(data32)) {
                                                                                                                validate42.errors = [{ instancePath: instancePath + "/dateCreated/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            validate42.errors = [{ instancePath: instancePath + "/dateCreated/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                    }
                                                                                                    var valid38 = _errs141 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid38 = true;
                                                                                                }
                                                                                                if (valid38) {
                                                                                                    if (data31.to !== undefined) {
                                                                                                        let data33 = data31.to;
                                                                                                        const _errs144 = errors;
                                                                                                        const _errs145 = errors;
                                                                                                        if (errors === _errs145) {
                                                                                                            if (typeof data33 === "string") {
                                                                                                                if (!pattern14.test(data33)) {
                                                                                                                    validate42.errors = [{ instancePath: instancePath + "/dateCreated/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                validate42.errors = [{ instancePath: instancePath + "/dateCreated/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid38 = _errs144 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid38 = true;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        validate42.errors = [{ instancePath: instancePath + "/dateCreated", schemaPath: "#/properties/dateCreated/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                var valid4 = _errs138 === errors;
                                                                            }
                                                                            else {
                                                                                var valid4 = true;
                                                                            }
                                                                            if (valid4) {
                                                                                if (data.datePublished !== undefined) {
                                                                                    let data34 = data.datePublished;
                                                                                    const _errs147 = errors;
                                                                                    if (errors === _errs147) {
                                                                                        if (data34 && typeof data34 == "object" && !Array.isArray(data34)) {
                                                                                            if (Object.keys(data34).length < 1) {
                                                                                                validate42.errors = [{ instancePath: instancePath + "/datePublished", schemaPath: "#/properties/datePublished/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                                                return false;
                                                                                            }
                                                                                            else {
                                                                                                const _errs149 = errors;
                                                                                                for (const key7 in data34) {
                                                                                                    if (!((key7 === "from") || (key7 === "to"))) {
                                                                                                        validate42.errors = [{ instancePath: instancePath + "/datePublished", schemaPath: "#/properties/datePublished/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" }];
                                                                                                        return false;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                if (_errs149 === errors) {
                                                                                                    if (data34.from !== undefined) {
                                                                                                        let data35 = data34.from;
                                                                                                        const _errs150 = errors;
                                                                                                        const _errs151 = errors;
                                                                                                        if (errors === _errs151) {
                                                                                                            if (typeof data35 === "string") {
                                                                                                                if (!pattern14.test(data35)) {
                                                                                                                    validate42.errors = [{ instancePath: instancePath + "/datePublished/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                validate42.errors = [{ instancePath: instancePath + "/datePublished/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid41 = _errs150 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid41 = true;
                                                                                                    }
                                                                                                    if (valid41) {
                                                                                                        if (data34.to !== undefined) {
                                                                                                            let data36 = data34.to;
                                                                                                            const _errs153 = errors;
                                                                                                            const _errs154 = errors;
                                                                                                            if (errors === _errs154) {
                                                                                                                if (typeof data36 === "string") {
                                                                                                                    if (!pattern14.test(data36)) {
                                                                                                                        validate42.errors = [{ instancePath: instancePath + "/datePublished/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate42.errors = [{ instancePath: instancePath + "/datePublished/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid41 = _errs153 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid41 = true;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            validate42.errors = [{ instancePath: instancePath + "/datePublished", schemaPath: "#/properties/datePublished/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    var valid4 = _errs147 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid4 = true;
                                                                                }
                                                                                if (valid4) {
                                                                                    if (data.dateUpdated !== undefined) {
                                                                                        let data37 = data.dateUpdated;
                                                                                        const _errs156 = errors;
                                                                                        if (errors === _errs156) {
                                                                                            if (data37 && typeof data37 == "object" && !Array.isArray(data37)) {
                                                                                                if (Object.keys(data37).length < 1) {
                                                                                                    validate42.errors = [{ instancePath: instancePath + "/dateUpdated", schemaPath: "#/properties/dateUpdated/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                                                    return false;
                                                                                                }
                                                                                                else {
                                                                                                    const _errs158 = errors;
                                                                                                    for (const key8 in data37) {
                                                                                                        if (!((key8 === "from") || (key8 === "to"))) {
                                                                                                            validate42.errors = [{ instancePath: instancePath + "/dateUpdated", schemaPath: "#/properties/dateUpdated/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key8 }, message: "must NOT have additional properties" }];
                                                                                                            return false;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    if (_errs158 === errors) {
                                                                                                        if (data37.from !== undefined) {
                                                                                                            let data38 = data37.from;
                                                                                                            const _errs159 = errors;
                                                                                                            const _errs160 = errors;
                                                                                                            if (errors === _errs160) {
                                                                                                                if (typeof data38 === "string") {
                                                                                                                    if (!pattern14.test(data38)) {
                                                                                                                        validate42.errors = [{ instancePath: instancePath + "/dateUpdated/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate42.errors = [{ instancePath: instancePath + "/dateUpdated/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid44 = _errs159 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid44 = true;
                                                                                                        }
                                                                                                        if (valid44) {
                                                                                                            if (data37.to !== undefined) {
                                                                                                                let data39 = data37.to;
                                                                                                                const _errs162 = errors;
                                                                                                                const _errs163 = errors;
                                                                                                                if (errors === _errs163) {
                                                                                                                    if (typeof data39 === "string") {
                                                                                                                        if (!pattern14.test(data39)) {
                                                                                                                            validate42.errors = [{ instancePath: instancePath + "/dateUpdated/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        validate42.errors = [{ instancePath: instancePath + "/dateUpdated/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid44 = _errs162 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid44 = true;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                validate42.errors = [{ instancePath: instancePath + "/dateUpdated", schemaPath: "#/properties/dateUpdated/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                        var valid4 = _errs156 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid4 = true;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate42.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate42.errors = vErrors; return errors === 0; }
validate42.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
function validate40(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-query.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate40.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptor === undefined) && (missing0 = "descriptor")) {
            validate40.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate40.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate24(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.filter === undefined) && (missing1 = "filter"))) {
                                    validate40.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filter")) || (key1 === "pagination")) || (key1 === "dateSort"))) {
                                            validate40.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate40.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Records")) {
                                                validate40.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema53.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate40.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Query")) {
                                                    validate40.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema53.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate40.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate40.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filter !== undefined) {
                                                        const _errs13 = errors;
                                                        if (!(validate42(data1.filter, { instancePath: instancePath + "/descriptor/filter", parentData: data1, parentDataProperty: "filter", rootData, dynamicAnchors }))) {
                                                            vErrors = vErrors === null ? validate42.errors : vErrors.concat(validate42.errors);
                                                            errors = vErrors.length;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                    if (valid1) {
                                                        if (data1.pagination !== undefined) {
                                                            let data6 = data1.pagination;
                                                            const _errs14 = errors;
                                                            if (errors === _errs14) {
                                                                if (data6 && typeof data6 == "object" && !Array.isArray(data6)) {
                                                                    const _errs16 = errors;
                                                                    for (const key2 in data6) {
                                                                        if (!((key2 === "limit") || (key2 === "cursor"))) {
                                                                            validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination", schemaPath: "#/properties/descriptor/properties/pagination/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                            return false;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (_errs16 === errors) {
                                                                        if (data6.limit !== undefined) {
                                                                            let data7 = data6.limit;
                                                                            const _errs17 = errors;
                                                                            if (errors === _errs17) {
                                                                                if ((typeof data7 == "number") && (isFinite(data7))) {
                                                                                    if (data7 < 1 || isNaN(data7)) {
                                                                                        validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination/limit", schemaPath: "#/properties/descriptor/properties/pagination/properties/limit/minimum", keyword: "minimum", params: { comparison: ">=", limit: 1 }, message: "must be >= 1" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination/limit", schemaPath: "#/properties/descriptor/properties/pagination/properties/limit/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            var valid3 = _errs17 === errors;
                                                                        }
                                                                        else {
                                                                            var valid3 = true;
                                                                        }
                                                                        if (valid3) {
                                                                            if (data6.cursor !== undefined) {
                                                                                let data8 = data6.cursor;
                                                                                const _errs19 = errors;
                                                                                const _errs20 = errors;
                                                                                if (errors === _errs20) {
                                                                                    if (data8 && typeof data8 == "object" && !Array.isArray(data8)) {
                                                                                        if (Object.keys(data8).length < 1) {
                                                                                            validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination/cursor", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                                            return false;
                                                                                        }
                                                                                        else {
                                                                                            let missing2;
                                                                                            if (((data8.messageCid === undefined) && (missing2 = "messageCid")) || ((data8.value === undefined) && (missing2 = "value"))) {
                                                                                                validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination/cursor", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                                                                                return false;
                                                                                            }
                                                                                            else {
                                                                                                const _errs22 = errors;
                                                                                                for (const key3 in data8) {
                                                                                                    if (!((key3 === "messageCid") || (key3 === "value"))) {
                                                                                                        validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination/cursor", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }];
                                                                                                        return false;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                if (_errs22 === errors) {
                                                                                                    if (data8.messageCid !== undefined) {
                                                                                                        const _errs23 = errors;
                                                                                                        if (typeof data8.messageCid !== "string") {
                                                                                                            validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination/cursor/messageCid", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/properties/messageCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        var valid5 = _errs23 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid5 = true;
                                                                                                    }
                                                                                                    if (valid5) {
                                                                                                        if (data8.value !== undefined) {
                                                                                                            let data10 = data8.value;
                                                                                                            const _errs25 = errors;
                                                                                                            if ((typeof data10 !== "string") && (!((typeof data10 == "number") && (isFinite(data10))))) {
                                                                                                                validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination/cursor/value", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/properties/value/type", keyword: "type", params: { type: schema70.properties.value.type }, message: "must be string,number" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                            var valid5 = _errs25 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid5 = true;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination/cursor", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                var valid3 = _errs19 === errors;
                                                                            }
                                                                            else {
                                                                                var valid3 = true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    validate40.errors = [{ instancePath: instancePath + "/descriptor/pagination", schemaPath: "#/properties/descriptor/properties/pagination/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                    return false;
                                                                }
                                                            }
                                                            var valid1 = _errs14 === errors;
                                                        }
                                                        else {
                                                            var valid1 = true;
                                                        }
                                                        if (valid1) {
                                                            if (data1.dateSort !== undefined) {
                                                                let data11 = data1.dateSort;
                                                                const _errs27 = errors;
                                                                if (typeof data11 !== "string") {
                                                                    validate40.errors = [{ instancePath: instancePath + "/descriptor/dateSort", schemaPath: "#/properties/descriptor/properties/dateSort/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                    return false;
                                                                }
                                                                if (!((((data11 === "createdAscending") || (data11 === "createdDescending")) || (data11 === "publishedAscending")) || (data11 === "publishedDescending"))) {
                                                                    validate40.errors = [{ instancePath: instancePath + "/descriptor/dateSort", schemaPath: "#/properties/descriptor/properties/dateSort/enum", keyword: "enum", params: { allowedValues: schema53.properties.descriptor.properties.dateSort.enum }, message: "must be equal to one of the allowed values" }];
                                                                    return false;
                                                                }
                                                                var valid1 = _errs27 === errors;
                                                            }
                                                            else {
                                                                var valid1 = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate40.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate40.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate40.errors = vErrors; return errors === 0; }
validate40.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const RecordsSubscribe = validate44;
const schema71 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/records-subscribe.json", "type": "object", "additionalProperties": false, "required": ["descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization-delegated-grant.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "filter"], "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Subscribe"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "filter": { "$ref": "https://identity.foundation/dwn/json-schemas/records-filter.json" } } } } };
function validate44(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-subscribe.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate44.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptor === undefined) && (missing0 = "descriptor")) {
            validate44.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate44.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate24(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.filter === undefined) && (missing1 = "filter"))) {
                                    validate44.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filter"))) {
                                            validate44.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate44.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Records")) {
                                                validate44.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema71.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate44.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Subscribe")) {
                                                    validate44.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema71.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate44.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate44.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filter !== undefined) {
                                                        const _errs13 = errors;
                                                        if (!(validate42(data1.filter, { instancePath: instancePath + "/descriptor/filter", parentData: data1, parentDataProperty: "filter", rootData, dynamicAnchors }))) {
                                                            vErrors = vErrors === null ? validate42.errors : vErrors.concat(validate42.errors);
                                                            errors = vErrors.length;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate44.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate44.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate44.errors = vErrors; return errors === 0; }
validate44.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const RecordsWrite = validate47;
const schema73 = { "$id": "https://identity.foundation/dwn/json-schemas/records-write.json", "$ref": "https://identity.foundation/dwn/json-schemas/records-write-unidentified.json", "unevaluatedProperties": false, "type": "object", "required": ["recordId", "authorization"] };
function validate47(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-write.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate47.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (!(validate27(data, { instancePath, parentData, parentDataProperty, rootData, dynamicAnchors }))) {
    vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
    errors = vErrors.length;
}
else {
    var props0 = validate27.evaluated.props;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.recordId === undefined) && (missing0 = "recordId")) || ((data.authorization === undefined) && (missing0 = "authorization"))) {
            validate47.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (props0 !== true) {
                for (const key0 in data) {
                    if (!props0 || !props0[key0]) {
                        validate47.errors = [{ instancePath, schemaPath: "#/unevaluatedProperties", keyword: "unevaluatedProperties", params: { unevaluatedProperty: key0 }, message: "must NOT have unevaluated properties" }];
                        return false;
                        break;
                    }
                }
            }
        }
    }
    else {
        validate47.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate47.errors = vErrors; return errors === 0; }
validate47.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const RecordsWriteDataEncoded = validate26;
export const RecordsWriteUnidentified = validate27;
export const Definitions = validate22;
const schema33 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/defs.json", "type": "object", "$defs": { "base64url": { "type": "string", "pattern": "^[A-Za-z0-9_-]+$" }, "uuid": { "type": "string", "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$" }, "did": { "type": "string", "pattern": "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, "date-time": { "type": "string", "pattern": "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" } } };
function validate22(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/defs.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate22.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate22.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} validate22.errors = vErrors; return errors === 0; }
validate22.evaluated = { "dynamicProps": false, "dynamicItems": false };
export const GeneralJwk = validate49;
function validate49(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/general-jwk.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate49.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} const _errs1 = errors; let valid0 = false; let passing0 = null; const _errs2 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing0;
    if (((data.crv === undefined) && (missing0 = "crv")) || ((data.x === undefined) && (missing0 = "x"))) {
        const err0 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    else {
        if (data.kty !== undefined) {
            const _errs3 = errors;
            if ("EC" !== data.kty) {
                const err1 = { instancePath: instancePath + "/kty", schemaPath: "#/oneOf/0/properties/kty/const", keyword: "const", params: { allowedValue: "EC" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err1];
                }
                else {
                    vErrors.push(err1);
                }
                errors++;
            }
            var valid1 = _errs3 === errors;
        }
        else {
            var valid1 = true;
        }
        if (valid1) {
            if (data.crv !== undefined) {
                const _errs4 = errors;
                if (typeof data.crv !== "string") {
                    const err2 = { instancePath: instancePath + "/crv", schemaPath: "#/oneOf/0/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
                var valid1 = _errs4 === errors;
            }
            else {
                var valid1 = true;
            }
            if (valid1) {
                if (data.x !== undefined) {
                    const _errs6 = errors;
                    if (typeof data.x !== "string") {
                        const err3 = { instancePath: instancePath + "/x", schemaPath: "#/oneOf/0/properties/x/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err3];
                        }
                        else {
                            vErrors.push(err3);
                        }
                        errors++;
                    }
                    var valid1 = _errs6 === errors;
                }
                else {
                    var valid1 = true;
                }
                if (valid1) {
                    if (data.y !== undefined) {
                        const _errs8 = errors;
                        if (typeof data.y !== "string") {
                            const err4 = { instancePath: instancePath + "/y", schemaPath: "#/oneOf/0/properties/y/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err4];
                            }
                            else {
                                vErrors.push(err4);
                            }
                            errors++;
                        }
                        var valid1 = _errs8 === errors;
                    }
                    else {
                        var valid1 = true;
                    }
                    if (valid1) {
                        if (data.d !== undefined) {
                            const _errs10 = errors;
                            if (typeof data.d !== "string") {
                                const err5 = { instancePath: instancePath + "/d", schemaPath: "#/oneOf/0/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err5];
                                }
                                else {
                                    vErrors.push(err5);
                                }
                                errors++;
                            }
                            var valid1 = _errs10 === errors;
                        }
                        else {
                            var valid1 = true;
                        }
                    }
                }
            }
        }
    }
} var _valid0 = _errs2 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
    var props0 = {};
    props0.kty = true;
    props0.crv = true;
    props0.x = true;
    props0.y = true;
    props0.d = true;
} const _errs12 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing1;
    if (((data.crv === undefined) && (missing1 = "crv")) || ((data.x === undefined) && (missing1 = "x"))) {
        const err6 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
        if (vErrors === null) {
            vErrors = [err6];
        }
        else {
            vErrors.push(err6);
        }
        errors++;
    }
    else {
        if (data.kty !== undefined) {
            const _errs13 = errors;
            if ("OKP" !== data.kty) {
                const err7 = { instancePath: instancePath + "/kty", schemaPath: "#/oneOf/1/properties/kty/const", keyword: "const", params: { allowedValue: "OKP" }, message: "must be equal to constant" };
                if (vErrors === null) {
                    vErrors = [err7];
                }
                else {
                    vErrors.push(err7);
                }
                errors++;
            }
            var valid2 = _errs13 === errors;
        }
        else {
            var valid2 = true;
        }
        if (valid2) {
            if (data.crv !== undefined) {
                const _errs14 = errors;
                if (typeof data.crv !== "string") {
                    const err8 = { instancePath: instancePath + "/crv", schemaPath: "#/oneOf/1/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err8];
                    }
                    else {
                        vErrors.push(err8);
                    }
                    errors++;
                }
                var valid2 = _errs14 === errors;
            }
            else {
                var valid2 = true;
            }
            if (valid2) {
                if (data.x !== undefined) {
                    const _errs16 = errors;
                    if (typeof data.x !== "string") {
                        const err9 = { instancePath: instancePath + "/x", schemaPath: "#/oneOf/1/properties/x/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err9];
                        }
                        else {
                            vErrors.push(err9);
                        }
                        errors++;
                    }
                    var valid2 = _errs16 === errors;
                }
                else {
                    var valid2 = true;
                }
                if (valid2) {
                    if (data.d !== undefined) {
                        const _errs18 = errors;
                        if (typeof data.d !== "string") {
                            const err10 = { instancePath: instancePath + "/d", schemaPath: "#/oneOf/1/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err10];
                            }
                            else {
                                vErrors.push(err10);
                            }
                            errors++;
                        }
                        var valid2 = _errs18 === errors;
                    }
                    else {
                        var valid2 = true;
                    }
                }
            }
        }
    }
} var _valid0 = _errs12 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
        if (props0 !== true) {
            props0 = props0 || {};
            props0.kty = true;
            props0.crv = true;
            props0.x = true;
            props0.d = true;
        }
    }
    const _errs20 = errors;
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing2;
        if (((data.n === undefined) && (missing2 = "n")) || ((data.e === undefined) && (missing2 = "e"))) {
            const err11 = { instancePath, schemaPath: "#/oneOf/2/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
            if (vErrors === null) {
                vErrors = [err11];
            }
            else {
                vErrors.push(err11);
            }
            errors++;
        }
        else {
            if (data.kty !== undefined) {
                const _errs21 = errors;
                if ("RSA" !== data.kty) {
                    const err12 = { instancePath: instancePath + "/kty", schemaPath: "#/oneOf/2/properties/kty/const", keyword: "const", params: { allowedValue: "RSA" }, message: "must be equal to constant" };
                    if (vErrors === null) {
                        vErrors = [err12];
                    }
                    else {
                        vErrors.push(err12);
                    }
                    errors++;
                }
                var valid3 = _errs21 === errors;
            }
            else {
                var valid3 = true;
            }
            if (valid3) {
                if (data.n !== undefined) {
                    const _errs22 = errors;
                    if (typeof data.n !== "string") {
                        const err13 = { instancePath: instancePath + "/n", schemaPath: "#/oneOf/2/properties/n/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err13];
                        }
                        else {
                            vErrors.push(err13);
                        }
                        errors++;
                    }
                    var valid3 = _errs22 === errors;
                }
                else {
                    var valid3 = true;
                }
                if (valid3) {
                    if (data.e !== undefined) {
                        const _errs24 = errors;
                        if (typeof data.e !== "string") {
                            const err14 = { instancePath: instancePath + "/e", schemaPath: "#/oneOf/2/properties/e/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err14];
                            }
                            else {
                                vErrors.push(err14);
                            }
                            errors++;
                        }
                        var valid3 = _errs24 === errors;
                    }
                    else {
                        var valid3 = true;
                    }
                    if (valid3) {
                        if (data.d !== undefined) {
                            const _errs26 = errors;
                            if (typeof data.d !== "string") {
                                const err15 = { instancePath: instancePath + "/d", schemaPath: "#/oneOf/2/properties/d/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err15];
                                }
                                else {
                                    vErrors.push(err15);
                                }
                                errors++;
                            }
                            var valid3 = _errs26 === errors;
                        }
                        else {
                            var valid3 = true;
                        }
                        if (valid3) {
                            if (data.p !== undefined) {
                                const _errs28 = errors;
                                if (typeof data.p !== "string") {
                                    const err16 = { instancePath: instancePath + "/p", schemaPath: "#/oneOf/2/properties/p/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err16];
                                    }
                                    else {
                                        vErrors.push(err16);
                                    }
                                    errors++;
                                }
                                var valid3 = _errs28 === errors;
                            }
                            else {
                                var valid3 = true;
                            }
                            if (valid3) {
                                if (data.q !== undefined) {
                                    const _errs30 = errors;
                                    if (typeof data.q !== "string") {
                                        const err17 = { instancePath: instancePath + "/q", schemaPath: "#/oneOf/2/properties/q/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                        if (vErrors === null) {
                                            vErrors = [err17];
                                        }
                                        else {
                                            vErrors.push(err17);
                                        }
                                        errors++;
                                    }
                                    var valid3 = _errs30 === errors;
                                }
                                else {
                                    var valid3 = true;
                                }
                                if (valid3) {
                                    if (data.dp !== undefined) {
                                        const _errs32 = errors;
                                        if (typeof data.dp !== "string") {
                                            const err18 = { instancePath: instancePath + "/dp", schemaPath: "#/oneOf/2/properties/dp/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err18];
                                            }
                                            else {
                                                vErrors.push(err18);
                                            }
                                            errors++;
                                        }
                                        var valid3 = _errs32 === errors;
                                    }
                                    else {
                                        var valid3 = true;
                                    }
                                    if (valid3) {
                                        if (data.dq !== undefined) {
                                            const _errs34 = errors;
                                            if (typeof data.dq !== "string") {
                                                const err19 = { instancePath: instancePath + "/dq", schemaPath: "#/oneOf/2/properties/dq/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err19];
                                                }
                                                else {
                                                    vErrors.push(err19);
                                                }
                                                errors++;
                                            }
                                            var valid3 = _errs34 === errors;
                                        }
                                        else {
                                            var valid3 = true;
                                        }
                                        if (valid3) {
                                            if (data.qi !== undefined) {
                                                const _errs36 = errors;
                                                if (typeof data.qi !== "string") {
                                                    const err20 = { instancePath: instancePath + "/qi", schemaPath: "#/oneOf/2/properties/qi/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err20];
                                                    }
                                                    else {
                                                        vErrors.push(err20);
                                                    }
                                                    errors++;
                                                }
                                                var valid3 = _errs36 === errors;
                                            }
                                            else {
                                                var valid3 = true;
                                            }
                                            if (valid3) {
                                                if (data.oth !== undefined) {
                                                    let data18 = data.oth;
                                                    const _errs38 = errors;
                                                    if (!(data18 && typeof data18 == "object" && !Array.isArray(data18))) {
                                                        const err21 = { instancePath: instancePath + "/oth", schemaPath: "#/oneOf/2/properties/oth/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                        if (vErrors === null) {
                                                            vErrors = [err21];
                                                        }
                                                        else {
                                                            vErrors.push(err21);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid3 = _errs38 === errors;
                                                }
                                                else {
                                                    var valid3 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    var _valid0 = _errs20 === errors;
    if (_valid0 && valid0) {
        valid0 = false;
        passing0 = [passing0, 2];
    }
    else {
        if (_valid0) {
            valid0 = true;
            passing0 = 2;
            if (props0 !== true) {
                props0 = props0 || {};
                props0.kty = true;
                props0.n = true;
                props0.e = true;
                props0.d = true;
                props0.p = true;
                props0.q = true;
                props0.dp = true;
                props0.dq = true;
                props0.qi = true;
                props0.oth = true;
            }
        }
        const _errs40 = errors;
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing3;
            if ((data.k === undefined) && (missing3 = "k")) {
                const err22 = { instancePath, schemaPath: "#/oneOf/3/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                if (vErrors === null) {
                    vErrors = [err22];
                }
                else {
                    vErrors.push(err22);
                }
                errors++;
            }
            else {
                if (data.kty !== undefined) {
                    const _errs41 = errors;
                    if ("oct" !== data.kty) {
                        const err23 = { instancePath: instancePath + "/kty", schemaPath: "#/oneOf/3/properties/kty/const", keyword: "const", params: { allowedValue: "oct" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err23];
                        }
                        else {
                            vErrors.push(err23);
                        }
                        errors++;
                    }
                    var valid4 = _errs41 === errors;
                }
                else {
                    var valid4 = true;
                }
                if (valid4) {
                    if (data.k !== undefined) {
                        const _errs42 = errors;
                        if (typeof data.k !== "string") {
                            const err24 = { instancePath: instancePath + "/k", schemaPath: "#/oneOf/3/properties/k/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err24];
                            }
                            else {
                                vErrors.push(err24);
                            }
                            errors++;
                        }
                        var valid4 = _errs42 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                }
            }
        }
        var _valid0 = _errs40 === errors;
        if (_valid0 && valid0) {
            valid0 = false;
            passing0 = [passing0, 3];
        }
        else {
            if (_valid0) {
                valid0 = true;
                passing0 = 3;
                if (props0 !== true) {
                    props0 = props0 || {};
                    props0.kty = true;
                    props0.k = true;
                }
            }
        }
    }
} if (!valid0) {
    const err25 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err25];
    }
    else {
        vErrors.push(err25);
    }
    errors++;
    validate49.errors = vErrors;
    return false;
}
else {
    errors = _errs1;
    if (vErrors !== null) {
        if (_errs1) {
            vErrors.length = _errs1;
        }
        else {
            vErrors = null;
        }
    }
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing4;
        if ((data.kty === undefined) && (missing4 = "kty")) {
            validate49.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }];
            return false;
        }
        else {
            if (props0 !== true) {
                props0 = props0 || {};
                props0.alg = true;
                props0.kid = true;
                props0.kty = true;
                props0.crv = true;
                props0.use = true;
                props0.key_ops = true;
                props0.x5u = true;
                props0.x5c = true;
                props0.x5t = true;
                props0["x5t#S256"] = true;
            }
            if (data.alg !== undefined) {
                const _errs44 = errors;
                if (typeof data.alg !== "string") {
                    validate49.errors = [{ instancePath: instancePath + "/alg", schemaPath: "#/properties/alg/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid5 = _errs44 === errors;
            }
            else {
                var valid5 = true;
            }
            if (valid5) {
                if (data.kid !== undefined) {
                    const _errs46 = errors;
                    if (typeof data.kid !== "string") {
                        validate49.errors = [{ instancePath: instancePath + "/kid", schemaPath: "#/properties/kid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid5 = _errs46 === errors;
                }
                else {
                    var valid5 = true;
                }
                if (valid5) {
                    if (data.kty !== undefined) {
                        let data23 = data.kty;
                        const _errs48 = errors;
                        if (!((((data23 === "EC") || (data23 === "RSA")) || (data23 === "oct")) || (data23 === "OKP"))) {
                            validate49.errors = [{ instancePath: instancePath + "/kty", schemaPath: "#/properties/kty/enum", keyword: "enum", params: { allowedValues: schema43.properties.kty.enum }, message: "must be equal to one of the allowed values" }];
                            return false;
                        }
                        var valid5 = _errs48 === errors;
                    }
                    else {
                        var valid5 = true;
                    }
                    if (valid5) {
                        if (data.crv !== undefined) {
                            const _errs49 = errors;
                            if (typeof data.crv !== "string") {
                                validate49.errors = [{ instancePath: instancePath + "/crv", schemaPath: "#/properties/crv/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid5 = _errs49 === errors;
                        }
                        else {
                            var valid5 = true;
                        }
                        if (valid5) {
                            if (data.use !== undefined) {
                                const _errs51 = errors;
                                if (typeof data.use !== "string") {
                                    validate49.errors = [{ instancePath: instancePath + "/use", schemaPath: "#/properties/use/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid5 = _errs51 === errors;
                            }
                            else {
                                var valid5 = true;
                            }
                            if (valid5) {
                                if (data.key_ops !== undefined) {
                                    const _errs53 = errors;
                                    if (typeof data.key_ops !== "string") {
                                        validate49.errors = [{ instancePath: instancePath + "/key_ops", schemaPath: "#/properties/key_ops/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid5 = _errs53 === errors;
                                }
                                else {
                                    var valid5 = true;
                                }
                                if (valid5) {
                                    if (data.x5u !== undefined) {
                                        const _errs55 = errors;
                                        if (typeof data.x5u !== "string") {
                                            validate49.errors = [{ instancePath: instancePath + "/x5u", schemaPath: "#/properties/x5u/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid5 = _errs55 === errors;
                                    }
                                    else {
                                        var valid5 = true;
                                    }
                                    if (valid5) {
                                        if (data.x5c !== undefined) {
                                            const _errs57 = errors;
                                            if (typeof data.x5c !== "string") {
                                                validate49.errors = [{ instancePath: instancePath + "/x5c", schemaPath: "#/properties/x5c/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid5 = _errs57 === errors;
                                        }
                                        else {
                                            var valid5 = true;
                                        }
                                        if (valid5) {
                                            if (data.x5t !== undefined) {
                                                const _errs59 = errors;
                                                if (typeof data.x5t !== "string") {
                                                    validate49.errors = [{ instancePath: instancePath + "/x5t", schemaPath: "#/properties/x5t/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid5 = _errs59 === errors;
                                            }
                                            else {
                                                var valid5 = true;
                                            }
                                            if (valid5) {
                                                if (data["x5t#S256"] !== undefined) {
                                                    const _errs61 = errors;
                                                    if (typeof data["x5t#S256"] !== "string") {
                                                        validate49.errors = [{ instancePath: instancePath + "/x5t#S256", schemaPath: "#/properties/x5t%23S256/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid5 = _errs61 === errors;
                                                }
                                                else {
                                                    var valid5 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate49.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate49.errors = vErrors; evaluated0.props = props0; return errors === 0; }
validate49.evaluated = { "dynamicProps": true, "dynamicItems": false };
export const GeneralJws = validate21;
export const JwkVerificationMethod = validate50;
const schema75 = { "$id": "https://identity.foundation/dwn/json-schemas/jwk-verification-method.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "type": "object", "additionalProperties": false, "required": ["id", "type", "controller", "publicKeyJwk"], "properties": { "id": { "type": "string" }, "type": { "enum": ["JsonWebKey", "JsonWebKey2020"] }, "controller": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did" }, "publicKeyJwk": { "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json" } } };
function validate50(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/jwk-verification-method.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate50.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((data.id === undefined) && (missing0 = "id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.controller === undefined) && (missing0 = "controller"))) || ((data.publicKeyJwk === undefined) && (missing0 = "publicKeyJwk"))) {
            validate50.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "id") || (key0 === "type")) || (key0 === "controller")) || (key0 === "publicKeyJwk"))) {
                    validate50.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.id !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.id !== "string") {
                        validate50.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.type !== undefined) {
                        let data1 = data.type;
                        const _errs4 = errors;
                        if (!((data1 === "JsonWebKey") || (data1 === "JsonWebKey2020"))) {
                            validate50.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/properties/type/enum", keyword: "enum", params: { allowedValues: schema75.properties.type.enum }, message: "must be equal to one of the allowed values" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.controller !== undefined) {
                            let data2 = data.controller;
                            const _errs5 = errors;
                            const _errs6 = errors;
                            if (errors === _errs6) {
                                if (typeof data2 === "string") {
                                    if (!pattern12.test(data2)) {
                                        validate50.errors = [{ instancePath: instancePath + "/controller", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                        return false;
                                    }
                                }
                                else {
                                    validate50.errors = [{ instancePath: instancePath + "/controller", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs5 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.publicKeyJwk !== undefined) {
                                const _errs8 = errors;
                                if (!(validate33(data.publicKeyJwk, { instancePath: instancePath + "/publicKeyJwk", parentData: data, parentDataProperty: "publicKeyJwk", rootData, dynamicAnchors }))) {
                                    vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
                                    errors = vErrors.length;
                                }
                                var valid0 = _errs8 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate50.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate50.errors = vErrors; return errors === 0; }
validate50.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const MessagesFilter = validate52;
const schema77 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/messages-filter.json", "type": "object", "additionalProperties": false, "minProperties": 1, "properties": { "interface": { "enum": ["Protocols", "Records"], "type": "string" }, "method": { "enum": ["Configure", "Delete", "Write"], "type": "string" }, "protocol": { "type": "string" }, "messageTimestamp": { "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "from": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "to": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" } } } } };
function validate52(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/messages-filter.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate52.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (Object.keys(data).length < 1) {
            validate52.errors = [{ instancePath, schemaPath: "#/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "interface") || (key0 === "method")) || (key0 === "protocol")) || (key0 === "messageTimestamp"))) {
                    validate52.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.interface !== undefined) {
                    let data0 = data.interface;
                    const _errs2 = errors;
                    if (typeof data0 !== "string") {
                        validate52.errors = [{ instancePath: instancePath + "/interface", schemaPath: "#/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    if (!((data0 === "Protocols") || (data0 === "Records"))) {
                        validate52.errors = [{ instancePath: instancePath + "/interface", schemaPath: "#/properties/interface/enum", keyword: "enum", params: { allowedValues: schema77.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.method !== undefined) {
                        let data1 = data.method;
                        const _errs4 = errors;
                        if (typeof data1 !== "string") {
                            validate52.errors = [{ instancePath: instancePath + "/method", schemaPath: "#/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        if (!(((data1 === "Configure") || (data1 === "Delete")) || (data1 === "Write"))) {
                            validate52.errors = [{ instancePath: instancePath + "/method", schemaPath: "#/properties/method/enum", keyword: "enum", params: { allowedValues: schema77.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.protocol !== undefined) {
                            const _errs6 = errors;
                            if (typeof data.protocol !== "string") {
                                validate52.errors = [{ instancePath: instancePath + "/protocol", schemaPath: "#/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.messageTimestamp !== undefined) {
                                let data3 = data.messageTimestamp;
                                const _errs8 = errors;
                                if (errors === _errs8) {
                                    if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                                        if (Object.keys(data3).length < 1) {
                                            validate52.errors = [{ instancePath: instancePath + "/messageTimestamp", schemaPath: "#/properties/messageTimestamp/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                            return false;
                                        }
                                        else {
                                            const _errs10 = errors;
                                            for (const key1 in data3) {
                                                if (!((key1 === "from") || (key1 === "to"))) {
                                                    validate52.errors = [{ instancePath: instancePath + "/messageTimestamp", schemaPath: "#/properties/messageTimestamp/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                    return false;
                                                    break;
                                                }
                                            }
                                            if (_errs10 === errors) {
                                                if (data3.from !== undefined) {
                                                    let data4 = data3.from;
                                                    const _errs11 = errors;
                                                    const _errs12 = errors;
                                                    if (errors === _errs12) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate52.errors = [{ instancePath: instancePath + "/messageTimestamp/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate52.errors = [{ instancePath: instancePath + "/messageTimestamp/from", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs11 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data3.to !== undefined) {
                                                        let data5 = data3.to;
                                                        const _errs14 = errors;
                                                        const _errs15 = errors;
                                                        if (errors === _errs15) {
                                                            if (typeof data5 === "string") {
                                                                if (!pattern14.test(data5)) {
                                                                    validate52.errors = [{ instancePath: instancePath + "/messageTimestamp/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                    return false;
                                                                }
                                                            }
                                                            else {
                                                                validate52.errors = [{ instancePath: instancePath + "/messageTimestamp/to", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid1 = _errs14 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate52.errors = [{ instancePath: instancePath + "/messageTimestamp", schemaPath: "#/properties/messageTimestamp/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs8 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate52.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate52.errors = vErrors; return errors === 0; }
validate52.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const MessagesQuery = validate53;
const schema80 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/messages-query.json", "type": "object", "additionalProperties": false, "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "filters"], "properties": { "interface": { "enum": ["Messages"], "type": "string" }, "method": { "enum": ["Query"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "filters": { "type": "array", "items": { "$ref": "https://identity.foundation/dwn/json-schemas/messages-filter.json" } }, "cursor": { "$ref": "https://identity.foundation/dwn/json-schemas/pagination-cursor.json" } } } } };
function validate53(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/messages-query.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate53.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate53.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate53.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate20(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.filters === undefined) && (missing1 = "filters"))) {
                                    validate53.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!(((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filters")) || (key1 === "cursor"))) {
                                            validate53.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate53.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Messages")) {
                                                validate53.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema80.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate53.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Query")) {
                                                    validate53.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema80.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate53.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate53.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filters !== undefined) {
                                                        let data5 = data1.filters;
                                                        const _errs13 = errors;
                                                        if (errors === _errs13) {
                                                            if (Array.isArray(data5)) {
                                                                var valid3 = true;
                                                                const len0 = data5.length;
                                                                for (let i0 = 0; i0 < len0; i0++) {
                                                                    const _errs15 = errors;
                                                                    if (!(validate52(data5[i0], { instancePath: instancePath + "/descriptor/filters/" + i0, parentData: data5, parentDataProperty: i0, rootData, dynamicAnchors }))) {
                                                                        vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors);
                                                                        errors = vErrors.length;
                                                                    }
                                                                    var valid3 = _errs15 === errors;
                                                                    if (!valid3) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate53.errors = [{ instancePath: instancePath + "/descriptor/filters", schemaPath: "#/properties/descriptor/properties/filters/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                    if (valid1) {
                                                        if (data1.cursor !== undefined) {
                                                            let data7 = data1.cursor;
                                                            const _errs16 = errors;
                                                            const _errs17 = errors;
                                                            if (errors === _errs17) {
                                                                if (data7 && typeof data7 == "object" && !Array.isArray(data7)) {
                                                                    if (Object.keys(data7).length < 1) {
                                                                        validate53.errors = [{ instancePath: instancePath + "/descriptor/cursor", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                        return false;
                                                                    }
                                                                    else {
                                                                        let missing2;
                                                                        if (((data7.messageCid === undefined) && (missing2 = "messageCid")) || ((data7.value === undefined) && (missing2 = "value"))) {
                                                                            validate53.errors = [{ instancePath: instancePath + "/descriptor/cursor", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                                                            return false;
                                                                        }
                                                                        else {
                                                                            const _errs19 = errors;
                                                                            for (const key2 in data7) {
                                                                                if (!((key2 === "messageCid") || (key2 === "value"))) {
                                                                                    validate53.errors = [{ instancePath: instancePath + "/descriptor/cursor", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                                    return false;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            if (_errs19 === errors) {
                                                                                if (data7.messageCid !== undefined) {
                                                                                    const _errs20 = errors;
                                                                                    if (typeof data7.messageCid !== "string") {
                                                                                        validate53.errors = [{ instancePath: instancePath + "/descriptor/cursor/messageCid", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/properties/messageCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                        return false;
                                                                                    }
                                                                                    var valid5 = _errs20 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid5 = true;
                                                                                }
                                                                                if (valid5) {
                                                                                    if (data7.value !== undefined) {
                                                                                        let data9 = data7.value;
                                                                                        const _errs22 = errors;
                                                                                        if ((typeof data9 !== "string") && (!((typeof data9 == "number") && (isFinite(data9))))) {
                                                                                            validate53.errors = [{ instancePath: instancePath + "/descriptor/cursor/value", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/properties/value/type", keyword: "type", params: { type: schema70.properties.value.type }, message: "must be string,number" }];
                                                                                            return false;
                                                                                        }
                                                                                        var valid5 = _errs22 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid5 = true;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    validate53.errors = [{ instancePath: instancePath + "/descriptor/cursor", schemaPath: "https://identity.foundation/dwn/json-schemas/pagination-cursor.json/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                    return false;
                                                                }
                                                            }
                                                            var valid1 = _errs16 === errors;
                                                        }
                                                        else {
                                                            var valid1 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate53.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate53.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate53.errors = vErrors; return errors === 0; }
validate53.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const MessagesRead = validate56;
const schema83 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/messages-read.json", "type": "object", "additionalProperties": false, "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp"], "properties": { "interface": { "enum": ["Messages"], "type": "string" }, "method": { "enum": ["Read"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "messageCid": { "type": "string" } } } } };
function validate56(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/messages-read.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate56.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate56.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate56.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate20(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if ((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) {
                                    validate56.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "messageCid"))) {
                                            validate56.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate56.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Messages")) {
                                                validate56.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema83.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate56.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Read")) {
                                                    validate56.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema83.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate56.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate56.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.messageCid !== undefined) {
                                                        const _errs13 = errors;
                                                        if (typeof data1.messageCid !== "string") {
                                                            validate56.errors = [{ instancePath: instancePath + "/descriptor/messageCid", schemaPath: "#/properties/descriptor/properties/messageCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate56.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate56.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate56.errors = vErrors; return errors === 0; }
validate56.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const MessagesSubscribe = validate58;
const schema85 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/messages-subscribe.json", "type": "object", "additionalProperties": false, "required": ["descriptor", "authorization"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "filters"], "properties": { "interface": { "enum": ["Messages"], "type": "string" }, "method": { "enum": ["Subscribe"], "type": "string" }, "messageTimestamp": { "type": "string" }, "filters": { "type": "array", "items": { "$ref": "https://identity.foundation/dwn/json-schemas/messages-filter.json" } } } } } };
function validate58(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/messages-subscribe.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate58.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.descriptor === undefined) && (missing0 = "descriptor")) || ((data.authorization === undefined) && (missing0 = "authorization"))) {
            validate58.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate58.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate20(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.filters === undefined) && (missing1 = "filters"))) {
                                    validate58.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filters"))) {
                                            validate58.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate58.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Messages")) {
                                                validate58.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema85.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate58.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Subscribe")) {
                                                    validate58.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema85.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    const _errs10 = errors;
                                                    if (typeof data1.messageTimestamp !== "string") {
                                                        validate58.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "#/properties/descriptor/properties/messageTimestamp/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filters !== undefined) {
                                                        let data5 = data1.filters;
                                                        const _errs12 = errors;
                                                        if (errors === _errs12) {
                                                            if (Array.isArray(data5)) {
                                                                var valid2 = true;
                                                                const len0 = data5.length;
                                                                for (let i0 = 0; i0 < len0; i0++) {
                                                                    const _errs14 = errors;
                                                                    if (!(validate52(data5[i0], { instancePath: instancePath + "/descriptor/filters/" + i0, parentData: data5, parentDataProperty: i0, rootData, dynamicAnchors }))) {
                                                                        vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors);
                                                                        errors = vErrors.length;
                                                                    }
                                                                    var valid2 = _errs14 === errors;
                                                                    if (!valid2) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate58.errors = [{ instancePath: instancePath + "/descriptor/filters", schemaPath: "#/properties/descriptor/properties/filters/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid1 = _errs12 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate58.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate58.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate58.errors = vErrors; return errors === 0; }
validate58.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const NumberRangeFilter = validate61;
function validate61(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/number-range-filter.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate61.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (Object.keys(data).length < 1) {
            validate61.errors = [{ instancePath, schemaPath: "#/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "gt") || (key0 === "gte")) || (key0 === "lt")) || (key0 === "lte"))) {
                    validate61.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.gt !== undefined) {
                    const _errs2 = errors;
                    const _errs3 = errors;
                    const _errs4 = errors;
                    if (data && typeof data == "object" && !Array.isArray(data)) {
                        let missing0;
                        if ((data.gte === undefined) && (missing0 = "gte")) {
                            const err0 = {};
                            if (vErrors === null) {
                                vErrors = [err0];
                            }
                            else {
                                vErrors.push(err0);
                            }
                            errors++;
                        }
                    }
                    var valid1 = _errs4 === errors;
                    if (valid1) {
                        validate61.errors = [{ instancePath, schemaPath: "#/dependencies/gt/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                        return false;
                    }
                    else {
                        errors = _errs3;
                        if (vErrors !== null) {
                            if (_errs3) {
                                vErrors.length = _errs3;
                            }
                            else {
                                vErrors = null;
                            }
                        }
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.gte !== undefined) {
                        const _errs5 = errors;
                        const _errs6 = errors;
                        const _errs7 = errors;
                        if (data && typeof data == "object" && !Array.isArray(data)) {
                            let missing1;
                            if ((data.gt === undefined) && (missing1 = "gt")) {
                                const err1 = {};
                                if (vErrors === null) {
                                    vErrors = [err1];
                                }
                                else {
                                    vErrors.push(err1);
                                }
                                errors++;
                            }
                        }
                        var valid2 = _errs7 === errors;
                        if (valid2) {
                            validate61.errors = [{ instancePath, schemaPath: "#/dependencies/gte/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                            return false;
                        }
                        else {
                            errors = _errs6;
                            if (vErrors !== null) {
                                if (_errs6) {
                                    vErrors.length = _errs6;
                                }
                                else {
                                    vErrors = null;
                                }
                            }
                        }
                        var valid0 = _errs5 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.lt !== undefined) {
                            const _errs8 = errors;
                            const _errs9 = errors;
                            const _errs10 = errors;
                            if (data && typeof data == "object" && !Array.isArray(data)) {
                                let missing2;
                                if ((data.lte === undefined) && (missing2 = "lte")) {
                                    const err2 = {};
                                    if (vErrors === null) {
                                        vErrors = [err2];
                                    }
                                    else {
                                        vErrors.push(err2);
                                    }
                                    errors++;
                                }
                            }
                            var valid3 = _errs10 === errors;
                            if (valid3) {
                                validate61.errors = [{ instancePath, schemaPath: "#/dependencies/lt/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                                return false;
                            }
                            else {
                                errors = _errs9;
                                if (vErrors !== null) {
                                    if (_errs9) {
                                        vErrors.length = _errs9;
                                    }
                                    else {
                                        vErrors = null;
                                    }
                                }
                            }
                            var valid0 = _errs8 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.lte !== undefined) {
                                const _errs11 = errors;
                                const _errs12 = errors;
                                const _errs13 = errors;
                                if (data && typeof data == "object" && !Array.isArray(data)) {
                                    let missing3;
                                    if ((data.lt === undefined) && (missing3 = "lt")) {
                                        const err3 = {};
                                        if (vErrors === null) {
                                            vErrors = [err3];
                                        }
                                        else {
                                            vErrors.push(err3);
                                        }
                                        errors++;
                                    }
                                }
                                var valid4 = _errs13 === errors;
                                if (valid4) {
                                    validate61.errors = [{ instancePath, schemaPath: "#/dependencies/lte/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                                    return false;
                                }
                                else {
                                    errors = _errs12;
                                    if (vErrors !== null) {
                                        if (_errs12) {
                                            vErrors.length = _errs12;
                                        }
                                        else {
                                            vErrors = null;
                                        }
                                    }
                                }
                                var valid0 = _errs11 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.gt !== undefined) {
                                    let data0 = data.gt;
                                    const _errs14 = errors;
                                    if (!((typeof data0 == "number") && (isFinite(data0)))) {
                                        validate61.errors = [{ instancePath: instancePath + "/gt", schemaPath: "#/properties/gt/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                        return false;
                                    }
                                    var valid5 = _errs14 === errors;
                                }
                                else {
                                    var valid5 = true;
                                }
                                if (valid5) {
                                    if (data.gte !== undefined) {
                                        let data1 = data.gte;
                                        const _errs16 = errors;
                                        if (!((typeof data1 == "number") && (isFinite(data1)))) {
                                            validate61.errors = [{ instancePath: instancePath + "/gte", schemaPath: "#/properties/gte/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                            return false;
                                        }
                                        var valid5 = _errs16 === errors;
                                    }
                                    else {
                                        var valid5 = true;
                                    }
                                    if (valid5) {
                                        if (data.lt !== undefined) {
                                            let data2 = data.lt;
                                            const _errs18 = errors;
                                            if (!((typeof data2 == "number") && (isFinite(data2)))) {
                                                validate61.errors = [{ instancePath: instancePath + "/lt", schemaPath: "#/properties/lt/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                return false;
                                            }
                                            var valid5 = _errs18 === errors;
                                        }
                                        else {
                                            var valid5 = true;
                                        }
                                        if (valid5) {
                                            if (data.lte !== undefined) {
                                                let data3 = data.lte;
                                                const _errs20 = errors;
                                                if (!((typeof data3 == "number") && (isFinite(data3)))) {
                                                    validate61.errors = [{ instancePath: instancePath + "/lte", schemaPath: "#/properties/lte/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                    return false;
                                                }
                                                var valid5 = _errs20 === errors;
                                            }
                                            else {
                                                var valid5 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate61.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate61.errors = vErrors; return errors === 0; }
validate61.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const PaginationCursor = validate62;
function validate62(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/pagination-cursor.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate62.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (Object.keys(data).length < 1) {
            validate62.errors = [{ instancePath, schemaPath: "#/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
            return false;
        }
        else {
            let missing0;
            if (((data.messageCid === undefined) && (missing0 = "messageCid")) || ((data.value === undefined) && (missing0 = "value"))) {
                validate62.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
                return false;
            }
            else {
                const _errs1 = errors;
                for (const key0 in data) {
                    if (!((key0 === "messageCid") || (key0 === "value"))) {
                        validate62.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                        return false;
                        break;
                    }
                }
                if (_errs1 === errors) {
                    if (data.messageCid !== undefined) {
                        const _errs2 = errors;
                        if (typeof data.messageCid !== "string") {
                            validate62.errors = [{ instancePath: instancePath + "/messageCid", schemaPath: "#/properties/messageCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs2 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.value !== undefined) {
                            let data1 = data.value;
                            const _errs4 = errors;
                            if ((typeof data1 !== "string") && (!((typeof data1 == "number") && (isFinite(data1))))) {
                                validate62.errors = [{ instancePath: instancePath + "/value", schemaPath: "#/properties/value/type", keyword: "type", params: { type: schema70.properties.value.type }, message: "must be string,number" }];
                                return false;
                            }
                            var valid0 = _errs4 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        validate62.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate62.errors = vErrors; return errors === 0; }
validate62.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const PermissionGrantData = validate63;
const schema88 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/permission-grant-data.json", "type": "object", "additionalProperties": false, "required": ["dateExpires", "scope"], "properties": { "description": { "type": "string" }, "dateExpires": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "requestId": { "type": "string" }, "delegated": { "type": "boolean" }, "scope": { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/scope" }, "conditions": { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions" } } };
const schema102 = { "type": "object", "additionalProperties": false, "properties": { "publication": { "enum": ["Required", "Prohibited"], "type": "string" } } };
const schema91 = { "oneOf": [{ "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope" }] };
const schema93 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Messages" }, "method": { "const": "Query" }, "protocol": { "type": "string" } } };
const schema94 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Messages" }, "method": { "const": "Read" }, "protocol": { "type": "string" } } };
const schema95 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Messages" }, "method": { "const": "Subscribe" }, "protocol": { "type": "string" } } };
const schema96 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Protocols" }, "method": { "const": "Query" } } };
const schema97 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Read" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } };
const schema98 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Delete" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } };
const schema99 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Write" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } };
const schema100 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Query" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } };
const schema101 = { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Subscribe" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } };
function validate65(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { let vErrors = null; let errors = 0; const evaluated0 = validate65.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} const _errs0 = errors; let valid0 = false; let passing0 = null; const _errs1 = errors; const _errs2 = errors; if (errors === _errs2) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.interface === undefined) && (missing0 = "interface")) || ((data.method === undefined) && (missing0 = "method"))) {
            const err0 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
        else {
            const _errs4 = errors;
            for (const key0 in data) {
                if (!(((key0 === "interface") || (key0 === "method")) || (key0 === "protocol"))) {
                    const err1 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" };
                    if (vErrors === null) {
                        vErrors = [err1];
                    }
                    else {
                        vErrors.push(err1);
                    }
                    errors++;
                    break;
                }
            }
            if (_errs4 === errors) {
                if (data.interface !== undefined) {
                    const _errs5 = errors;
                    if ("Messages" !== data.interface) {
                        const err2 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Messages" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err2];
                        }
                        else {
                            vErrors.push(err2);
                        }
                        errors++;
                    }
                    var valid2 = _errs5 === errors;
                }
                else {
                    var valid2 = true;
                }
                if (valid2) {
                    if (data.method !== undefined) {
                        const _errs6 = errors;
                        if ("Query" !== data.method) {
                            const err3 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/properties/method/const", keyword: "const", params: { allowedValue: "Query" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err3];
                            }
                            else {
                                vErrors.push(err3);
                            }
                            errors++;
                        }
                        var valid2 = _errs6 === errors;
                    }
                    else {
                        var valid2 = true;
                    }
                    if (valid2) {
                        if (data.protocol !== undefined) {
                            const _errs7 = errors;
                            if (typeof data.protocol !== "string") {
                                const err4 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err4];
                                }
                                else {
                                    vErrors.push(err4);
                                }
                                errors++;
                            }
                            var valid2 = _errs7 === errors;
                        }
                        else {
                            var valid2 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        const err5 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err5];
        }
        else {
            vErrors.push(err5);
        }
        errors++;
    }
} var _valid0 = _errs1 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
    var props0 = true;
} const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing1;
        if (((data.interface === undefined) && (missing1 = "interface")) || ((data.method === undefined) && (missing1 = "method"))) {
            const err6 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
            if (vErrors === null) {
                vErrors = [err6];
            }
            else {
                vErrors.push(err6);
            }
            errors++;
        }
        else {
            const _errs12 = errors;
            for (const key1 in data) {
                if (!(((key1 === "interface") || (key1 === "method")) || (key1 === "protocol"))) {
                    const err7 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" };
                    if (vErrors === null) {
                        vErrors = [err7];
                    }
                    else {
                        vErrors.push(err7);
                    }
                    errors++;
                    break;
                }
            }
            if (_errs12 === errors) {
                if (data.interface !== undefined) {
                    const _errs13 = errors;
                    if ("Messages" !== data.interface) {
                        const err8 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Messages" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err8];
                        }
                        else {
                            vErrors.push(err8);
                        }
                        errors++;
                    }
                    var valid4 = _errs13 === errors;
                }
                else {
                    var valid4 = true;
                }
                if (valid4) {
                    if (data.method !== undefined) {
                        const _errs14 = errors;
                        if ("Read" !== data.method) {
                            const err9 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/properties/method/const", keyword: "const", params: { allowedValue: "Read" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err9];
                            }
                            else {
                                vErrors.push(err9);
                            }
                            errors++;
                        }
                        var valid4 = _errs14 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                    if (valid4) {
                        if (data.protocol !== undefined) {
                            const _errs15 = errors;
                            if (typeof data.protocol !== "string") {
                                const err10 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err10];
                                }
                                else {
                                    vErrors.push(err10);
                                }
                                errors++;
                            }
                            var valid4 = _errs15 === errors;
                        }
                        else {
                            var valid4 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        const err11 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err11];
        }
        else {
            vErrors.push(err11);
        }
        errors++;
    }
} var _valid0 = _errs9 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
        if (props0 !== true) {
            props0 = true;
        }
    }
    const _errs17 = errors;
    const _errs18 = errors;
    if (errors === _errs18) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing2;
            if (((data.interface === undefined) && (missing2 = "interface")) || ((data.method === undefined) && (missing2 = "method"))) {
                const err12 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
                if (vErrors === null) {
                    vErrors = [err12];
                }
                else {
                    vErrors.push(err12);
                }
                errors++;
            }
            else {
                const _errs20 = errors;
                for (const key2 in data) {
                    if (!(((key2 === "interface") || (key2 === "method")) || (key2 === "protocol"))) {
                        const err13 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" };
                        if (vErrors === null) {
                            vErrors = [err13];
                        }
                        else {
                            vErrors.push(err13);
                        }
                        errors++;
                        break;
                    }
                }
                if (_errs20 === errors) {
                    if (data.interface !== undefined) {
                        const _errs21 = errors;
                        if ("Messages" !== data.interface) {
                            const err14 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Messages" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err14];
                            }
                            else {
                                vErrors.push(err14);
                            }
                            errors++;
                        }
                        var valid6 = _errs21 === errors;
                    }
                    else {
                        var valid6 = true;
                    }
                    if (valid6) {
                        if (data.method !== undefined) {
                            const _errs22 = errors;
                            if ("Subscribe" !== data.method) {
                                const err15 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/properties/method/const", keyword: "const", params: { allowedValue: "Subscribe" }, message: "must be equal to constant" };
                                if (vErrors === null) {
                                    vErrors = [err15];
                                }
                                else {
                                    vErrors.push(err15);
                                }
                                errors++;
                            }
                            var valid6 = _errs22 === errors;
                        }
                        else {
                            var valid6 = true;
                        }
                        if (valid6) {
                            if (data.protocol !== undefined) {
                                const _errs23 = errors;
                                if (typeof data.protocol !== "string") {
                                    const err16 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err16];
                                    }
                                    else {
                                        vErrors.push(err16);
                                    }
                                    errors++;
                                }
                                var valid6 = _errs23 === errors;
                            }
                            else {
                                var valid6 = true;
                            }
                        }
                    }
                }
            }
        }
        else {
            const err17 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
            if (vErrors === null) {
                vErrors = [err17];
            }
            else {
                vErrors.push(err17);
            }
            errors++;
        }
    }
    var _valid0 = _errs17 === errors;
    if (_valid0 && valid0) {
        valid0 = false;
        passing0 = [passing0, 2];
    }
    else {
        if (_valid0) {
            valid0 = true;
            passing0 = 2;
            if (props0 !== true) {
                props0 = true;
            }
        }
        const _errs25 = errors;
        const _errs26 = errors;
        if (errors === _errs26) {
            if (data && typeof data == "object" && !Array.isArray(data)) {
                let missing3;
                if (((data.interface === undefined) && (missing3 = "interface")) || ((data.method === undefined) && (missing3 = "method"))) {
                    const err18 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                    if (vErrors === null) {
                        vErrors = [err18];
                    }
                    else {
                        vErrors.push(err18);
                    }
                    errors++;
                }
                else {
                    const _errs28 = errors;
                    for (const key3 in data) {
                        if (!((key3 === "interface") || (key3 === "method"))) {
                            const err19 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" };
                            if (vErrors === null) {
                                vErrors = [err19];
                            }
                            else {
                                vErrors.push(err19);
                            }
                            errors++;
                            break;
                        }
                    }
                    if (_errs28 === errors) {
                        if (data.interface !== undefined) {
                            const _errs29 = errors;
                            if ("Protocols" !== data.interface) {
                                const err20 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Protocols" }, message: "must be equal to constant" };
                                if (vErrors === null) {
                                    vErrors = [err20];
                                }
                                else {
                                    vErrors.push(err20);
                                }
                                errors++;
                            }
                            var valid8 = _errs29 === errors;
                        }
                        else {
                            var valid8 = true;
                        }
                        if (valid8) {
                            if (data.method !== undefined) {
                                const _errs30 = errors;
                                if ("Query" !== data.method) {
                                    const err21 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/properties/method/const", keyword: "const", params: { allowedValue: "Query" }, message: "must be equal to constant" };
                                    if (vErrors === null) {
                                        vErrors = [err21];
                                    }
                                    else {
                                        vErrors.push(err21);
                                    }
                                    errors++;
                                }
                                var valid8 = _errs30 === errors;
                            }
                            else {
                                var valid8 = true;
                            }
                        }
                    }
                }
            }
            else {
                const err22 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                if (vErrors === null) {
                    vErrors = [err22];
                }
                else {
                    vErrors.push(err22);
                }
                errors++;
            }
        }
        var _valid0 = _errs25 === errors;
        if (_valid0 && valid0) {
            valid0 = false;
            passing0 = [passing0, 3];
        }
        else {
            if (_valid0) {
                valid0 = true;
                passing0 = 3;
                if (props0 !== true) {
                    props0 = true;
                }
            }
            const _errs31 = errors;
            const _errs32 = errors;
            if (errors === _errs32) {
                if (data && typeof data == "object" && !Array.isArray(data)) {
                    let missing4;
                    if (((data.interface === undefined) && (missing4 = "interface")) || ((data.method === undefined) && (missing4 = "method"))) {
                        const err23 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" };
                        if (vErrors === null) {
                            vErrors = [err23];
                        }
                        else {
                            vErrors.push(err23);
                        }
                        errors++;
                    }
                    else {
                        const _errs34 = errors;
                        for (const key4 in data) {
                            if (!(((((key4 === "interface") || (key4 === "method")) || (key4 === "protocol")) || (key4 === "contextId")) || (key4 === "protocolPath"))) {
                                const err24 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" };
                                if (vErrors === null) {
                                    vErrors = [err24];
                                }
                                else {
                                    vErrors.push(err24);
                                }
                                errors++;
                                break;
                            }
                        }
                        if (_errs34 === errors) {
                            if (data.interface !== undefined) {
                                const _errs35 = errors;
                                if ("Records" !== data.interface) {
                                    const err25 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                    if (vErrors === null) {
                                        vErrors = [err25];
                                    }
                                    else {
                                        vErrors.push(err25);
                                    }
                                    errors++;
                                }
                                var valid10 = _errs35 === errors;
                            }
                            else {
                                var valid10 = true;
                            }
                            if (valid10) {
                                if (data.method !== undefined) {
                                    const _errs36 = errors;
                                    if ("Read" !== data.method) {
                                        const err26 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/method/const", keyword: "const", params: { allowedValue: "Read" }, message: "must be equal to constant" };
                                        if (vErrors === null) {
                                            vErrors = [err26];
                                        }
                                        else {
                                            vErrors.push(err26);
                                        }
                                        errors++;
                                    }
                                    var valid10 = _errs36 === errors;
                                }
                                else {
                                    var valid10 = true;
                                }
                                if (valid10) {
                                    if (data.protocol !== undefined) {
                                        const _errs37 = errors;
                                        if (typeof data.protocol !== "string") {
                                            const err27 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err27];
                                            }
                                            else {
                                                vErrors.push(err27);
                                            }
                                            errors++;
                                        }
                                        var valid10 = _errs37 === errors;
                                    }
                                    else {
                                        var valid10 = true;
                                    }
                                    if (valid10) {
                                        if (data.contextId !== undefined) {
                                            const _errs39 = errors;
                                            if (typeof data.contextId !== "string") {
                                                const err28 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err28];
                                                }
                                                else {
                                                    vErrors.push(err28);
                                                }
                                                errors++;
                                            }
                                            var valid10 = _errs39 === errors;
                                        }
                                        else {
                                            var valid10 = true;
                                        }
                                        if (valid10) {
                                            if (data.protocolPath !== undefined) {
                                                const _errs41 = errors;
                                                if (typeof data.protocolPath !== "string") {
                                                    const err29 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err29];
                                                    }
                                                    else {
                                                        vErrors.push(err29);
                                                    }
                                                    errors++;
                                                }
                                                var valid10 = _errs41 === errors;
                                            }
                                            else {
                                                var valid10 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    const err30 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                    if (vErrors === null) {
                        vErrors = [err30];
                    }
                    else {
                        vErrors.push(err30);
                    }
                    errors++;
                }
            }
            var _valid0 = _errs31 === errors;
            if (_valid0 && valid0) {
                valid0 = false;
                passing0 = [passing0, 4];
            }
            else {
                if (_valid0) {
                    valid0 = true;
                    passing0 = 4;
                    if (props0 !== true) {
                        props0 = true;
                    }
                }
                const _errs43 = errors;
                const _errs44 = errors;
                if (errors === _errs44) {
                    if (data && typeof data == "object" && !Array.isArray(data)) {
                        let missing5;
                        if (((data.interface === undefined) && (missing5 = "interface")) || ((data.method === undefined) && (missing5 = "method"))) {
                            const err31 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" };
                            if (vErrors === null) {
                                vErrors = [err31];
                            }
                            else {
                                vErrors.push(err31);
                            }
                            errors++;
                        }
                        else {
                            const _errs46 = errors;
                            for (const key5 in data) {
                                if (!(((((key5 === "interface") || (key5 === "method")) || (key5 === "protocol")) || (key5 === "contextId")) || (key5 === "protocolPath"))) {
                                    const err32 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" };
                                    if (vErrors === null) {
                                        vErrors = [err32];
                                    }
                                    else {
                                        vErrors.push(err32);
                                    }
                                    errors++;
                                    break;
                                }
                            }
                            if (_errs46 === errors) {
                                if (data.interface !== undefined) {
                                    const _errs47 = errors;
                                    if ("Records" !== data.interface) {
                                        const err33 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                        if (vErrors === null) {
                                            vErrors = [err33];
                                        }
                                        else {
                                            vErrors.push(err33);
                                        }
                                        errors++;
                                    }
                                    var valid12 = _errs47 === errors;
                                }
                                else {
                                    var valid12 = true;
                                }
                                if (valid12) {
                                    if (data.method !== undefined) {
                                        const _errs48 = errors;
                                        if ("Delete" !== data.method) {
                                            const err34 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/method/const", keyword: "const", params: { allowedValue: "Delete" }, message: "must be equal to constant" };
                                            if (vErrors === null) {
                                                vErrors = [err34];
                                            }
                                            else {
                                                vErrors.push(err34);
                                            }
                                            errors++;
                                        }
                                        var valid12 = _errs48 === errors;
                                    }
                                    else {
                                        var valid12 = true;
                                    }
                                    if (valid12) {
                                        if (data.protocol !== undefined) {
                                            const _errs49 = errors;
                                            if (typeof data.protocol !== "string") {
                                                const err35 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err35];
                                                }
                                                else {
                                                    vErrors.push(err35);
                                                }
                                                errors++;
                                            }
                                            var valid12 = _errs49 === errors;
                                        }
                                        else {
                                            var valid12 = true;
                                        }
                                        if (valid12) {
                                            if (data.contextId !== undefined) {
                                                const _errs51 = errors;
                                                if (typeof data.contextId !== "string") {
                                                    const err36 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err36];
                                                    }
                                                    else {
                                                        vErrors.push(err36);
                                                    }
                                                    errors++;
                                                }
                                                var valid12 = _errs51 === errors;
                                            }
                                            else {
                                                var valid12 = true;
                                            }
                                            if (valid12) {
                                                if (data.protocolPath !== undefined) {
                                                    const _errs53 = errors;
                                                    if (typeof data.protocolPath !== "string") {
                                                        const err37 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err37];
                                                        }
                                                        else {
                                                            vErrors.push(err37);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid12 = _errs53 === errors;
                                                }
                                                else {
                                                    var valid12 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        const err38 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                        if (vErrors === null) {
                            vErrors = [err38];
                        }
                        else {
                            vErrors.push(err38);
                        }
                        errors++;
                    }
                }
                var _valid0 = _errs43 === errors;
                if (_valid0 && valid0) {
                    valid0 = false;
                    passing0 = [passing0, 5];
                }
                else {
                    if (_valid0) {
                        valid0 = true;
                        passing0 = 5;
                        if (props0 !== true) {
                            props0 = true;
                        }
                    }
                    const _errs55 = errors;
                    const _errs56 = errors;
                    if (errors === _errs56) {
                        if (data && typeof data == "object" && !Array.isArray(data)) {
                            let missing6;
                            if (((data.interface === undefined) && (missing6 = "interface")) || ((data.method === undefined) && (missing6 = "method"))) {
                                const err39 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" };
                                if (vErrors === null) {
                                    vErrors = [err39];
                                }
                                else {
                                    vErrors.push(err39);
                                }
                                errors++;
                            }
                            else {
                                const _errs58 = errors;
                                for (const key6 in data) {
                                    if (!(((((key6 === "interface") || (key6 === "method")) || (key6 === "protocol")) || (key6 === "contextId")) || (key6 === "protocolPath"))) {
                                        const err40 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" };
                                        if (vErrors === null) {
                                            vErrors = [err40];
                                        }
                                        else {
                                            vErrors.push(err40);
                                        }
                                        errors++;
                                        break;
                                    }
                                }
                                if (_errs58 === errors) {
                                    if (data.interface !== undefined) {
                                        const _errs59 = errors;
                                        if ("Records" !== data.interface) {
                                            const err41 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                            if (vErrors === null) {
                                                vErrors = [err41];
                                            }
                                            else {
                                                vErrors.push(err41);
                                            }
                                            errors++;
                                        }
                                        var valid14 = _errs59 === errors;
                                    }
                                    else {
                                        var valid14 = true;
                                    }
                                    if (valid14) {
                                        if (data.method !== undefined) {
                                            const _errs60 = errors;
                                            if ("Write" !== data.method) {
                                                const err42 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/method/const", keyword: "const", params: { allowedValue: "Write" }, message: "must be equal to constant" };
                                                if (vErrors === null) {
                                                    vErrors = [err42];
                                                }
                                                else {
                                                    vErrors.push(err42);
                                                }
                                                errors++;
                                            }
                                            var valid14 = _errs60 === errors;
                                        }
                                        else {
                                            var valid14 = true;
                                        }
                                        if (valid14) {
                                            if (data.protocol !== undefined) {
                                                const _errs61 = errors;
                                                if (typeof data.protocol !== "string") {
                                                    const err43 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err43];
                                                    }
                                                    else {
                                                        vErrors.push(err43);
                                                    }
                                                    errors++;
                                                }
                                                var valid14 = _errs61 === errors;
                                            }
                                            else {
                                                var valid14 = true;
                                            }
                                            if (valid14) {
                                                if (data.contextId !== undefined) {
                                                    const _errs63 = errors;
                                                    if (typeof data.contextId !== "string") {
                                                        const err44 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err44];
                                                        }
                                                        else {
                                                            vErrors.push(err44);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid14 = _errs63 === errors;
                                                }
                                                else {
                                                    var valid14 = true;
                                                }
                                                if (valid14) {
                                                    if (data.protocolPath !== undefined) {
                                                        const _errs65 = errors;
                                                        if (typeof data.protocolPath !== "string") {
                                                            const err45 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err45];
                                                            }
                                                            else {
                                                                vErrors.push(err45);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid14 = _errs65 === errors;
                                                    }
                                                    else {
                                                        var valid14 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            const err46 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                            if (vErrors === null) {
                                vErrors = [err46];
                            }
                            else {
                                vErrors.push(err46);
                            }
                            errors++;
                        }
                    }
                    var _valid0 = _errs55 === errors;
                    if (_valid0 && valid0) {
                        valid0 = false;
                        passing0 = [passing0, 6];
                    }
                    else {
                        if (_valid0) {
                            valid0 = true;
                            passing0 = 6;
                            if (props0 !== true) {
                                props0 = true;
                            }
                        }
                        const _errs67 = errors;
                        const _errs68 = errors;
                        if (errors === _errs68) {
                            if (data && typeof data == "object" && !Array.isArray(data)) {
                                let missing7;
                                if (((data.interface === undefined) && (missing7 = "interface")) || ((data.method === undefined) && (missing7 = "method"))) {
                                    const err47 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" };
                                    if (vErrors === null) {
                                        vErrors = [err47];
                                    }
                                    else {
                                        vErrors.push(err47);
                                    }
                                    errors++;
                                }
                                else {
                                    const _errs70 = errors;
                                    for (const key7 in data) {
                                        if (!(((((key7 === "interface") || (key7 === "method")) || (key7 === "protocol")) || (key7 === "contextId")) || (key7 === "protocolPath"))) {
                                            const err48 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" };
                                            if (vErrors === null) {
                                                vErrors = [err48];
                                            }
                                            else {
                                                vErrors.push(err48);
                                            }
                                            errors++;
                                            break;
                                        }
                                    }
                                    if (_errs70 === errors) {
                                        if (data.interface !== undefined) {
                                            const _errs71 = errors;
                                            if ("Records" !== data.interface) {
                                                const err49 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                                if (vErrors === null) {
                                                    vErrors = [err49];
                                                }
                                                else {
                                                    vErrors.push(err49);
                                                }
                                                errors++;
                                            }
                                            var valid16 = _errs71 === errors;
                                        }
                                        else {
                                            var valid16 = true;
                                        }
                                        if (valid16) {
                                            if (data.method !== undefined) {
                                                const _errs72 = errors;
                                                if ("Query" !== data.method) {
                                                    const err50 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/method/const", keyword: "const", params: { allowedValue: "Query" }, message: "must be equal to constant" };
                                                    if (vErrors === null) {
                                                        vErrors = [err50];
                                                    }
                                                    else {
                                                        vErrors.push(err50);
                                                    }
                                                    errors++;
                                                }
                                                var valid16 = _errs72 === errors;
                                            }
                                            else {
                                                var valid16 = true;
                                            }
                                            if (valid16) {
                                                if (data.protocol !== undefined) {
                                                    const _errs73 = errors;
                                                    if (typeof data.protocol !== "string") {
                                                        const err51 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err51];
                                                        }
                                                        else {
                                                            vErrors.push(err51);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid16 = _errs73 === errors;
                                                }
                                                else {
                                                    var valid16 = true;
                                                }
                                                if (valid16) {
                                                    if (data.contextId !== undefined) {
                                                        const _errs75 = errors;
                                                        if (typeof data.contextId !== "string") {
                                                            const err52 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err52];
                                                            }
                                                            else {
                                                                vErrors.push(err52);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid16 = _errs75 === errors;
                                                    }
                                                    else {
                                                        var valid16 = true;
                                                    }
                                                    if (valid16) {
                                                        if (data.protocolPath !== undefined) {
                                                            const _errs77 = errors;
                                                            if (typeof data.protocolPath !== "string") {
                                                                const err53 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err53];
                                                                }
                                                                else {
                                                                    vErrors.push(err53);
                                                                }
                                                                errors++;
                                                            }
                                                            var valid16 = _errs77 === errors;
                                                        }
                                                        else {
                                                            var valid16 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                const err54 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                if (vErrors === null) {
                                    vErrors = [err54];
                                }
                                else {
                                    vErrors.push(err54);
                                }
                                errors++;
                            }
                        }
                        var _valid0 = _errs67 === errors;
                        if (_valid0 && valid0) {
                            valid0 = false;
                            passing0 = [passing0, 7];
                        }
                        else {
                            if (_valid0) {
                                valid0 = true;
                                passing0 = 7;
                                if (props0 !== true) {
                                    props0 = true;
                                }
                            }
                            const _errs79 = errors;
                            const _errs80 = errors;
                            if (errors === _errs80) {
                                if (data && typeof data == "object" && !Array.isArray(data)) {
                                    let missing8;
                                    if (((data.interface === undefined) && (missing8 = "interface")) || ((data.method === undefined) && (missing8 = "method"))) {
                                        const err55 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" };
                                        if (vErrors === null) {
                                            vErrors = [err55];
                                        }
                                        else {
                                            vErrors.push(err55);
                                        }
                                        errors++;
                                    }
                                    else {
                                        const _errs82 = errors;
                                        for (const key8 in data) {
                                            if (!(((((key8 === "interface") || (key8 === "method")) || (key8 === "protocol")) || (key8 === "contextId")) || (key8 === "protocolPath"))) {
                                                const err56 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key8 }, message: "must NOT have additional properties" };
                                                if (vErrors === null) {
                                                    vErrors = [err56];
                                                }
                                                else {
                                                    vErrors.push(err56);
                                                }
                                                errors++;
                                                break;
                                            }
                                        }
                                        if (_errs82 === errors) {
                                            if (data.interface !== undefined) {
                                                const _errs83 = errors;
                                                if ("Records" !== data.interface) {
                                                    const err57 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                                    if (vErrors === null) {
                                                        vErrors = [err57];
                                                    }
                                                    else {
                                                        vErrors.push(err57);
                                                    }
                                                    errors++;
                                                }
                                                var valid18 = _errs83 === errors;
                                            }
                                            else {
                                                var valid18 = true;
                                            }
                                            if (valid18) {
                                                if (data.method !== undefined) {
                                                    const _errs84 = errors;
                                                    if ("Subscribe" !== data.method) {
                                                        const err58 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/method/const", keyword: "const", params: { allowedValue: "Subscribe" }, message: "must be equal to constant" };
                                                        if (vErrors === null) {
                                                            vErrors = [err58];
                                                        }
                                                        else {
                                                            vErrors.push(err58);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid18 = _errs84 === errors;
                                                }
                                                else {
                                                    var valid18 = true;
                                                }
                                                if (valid18) {
                                                    if (data.protocol !== undefined) {
                                                        const _errs85 = errors;
                                                        if (typeof data.protocol !== "string") {
                                                            const err59 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err59];
                                                            }
                                                            else {
                                                                vErrors.push(err59);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid18 = _errs85 === errors;
                                                    }
                                                    else {
                                                        var valid18 = true;
                                                    }
                                                    if (valid18) {
                                                        if (data.contextId !== undefined) {
                                                            const _errs87 = errors;
                                                            if (typeof data.contextId !== "string") {
                                                                const err60 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err60];
                                                                }
                                                                else {
                                                                    vErrors.push(err60);
                                                                }
                                                                errors++;
                                                            }
                                                            var valid18 = _errs87 === errors;
                                                        }
                                                        else {
                                                            var valid18 = true;
                                                        }
                                                        if (valid18) {
                                                            if (data.protocolPath !== undefined) {
                                                                const _errs89 = errors;
                                                                if (typeof data.protocolPath !== "string") {
                                                                    const err61 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                    if (vErrors === null) {
                                                                        vErrors = [err61];
                                                                    }
                                                                    else {
                                                                        vErrors.push(err61);
                                                                    }
                                                                    errors++;
                                                                }
                                                                var valid18 = _errs89 === errors;
                                                            }
                                                            else {
                                                                var valid18 = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    const err62 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                    if (vErrors === null) {
                                        vErrors = [err62];
                                    }
                                    else {
                                        vErrors.push(err62);
                                    }
                                    errors++;
                                }
                            }
                            var _valid0 = _errs79 === errors;
                            if (_valid0 && valid0) {
                                valid0 = false;
                                passing0 = [passing0, 8];
                            }
                            else {
                                if (_valid0) {
                                    valid0 = true;
                                    passing0 = 8;
                                    if (props0 !== true) {
                                        props0 = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} if (!valid0) {
    const err63 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err63];
    }
    else {
        vErrors.push(err63);
    }
    errors++;
    validate65.errors = vErrors;
    return false;
}
else {
    errors = _errs0;
    if (vErrors !== null) {
        if (_errs0) {
            vErrors.length = _errs0;
        }
        else {
            vErrors = null;
        }
    }
} validate65.errors = vErrors; evaluated0.props = props0; return errors === 0; }
validate65.evaluated = { "dynamicProps": true, "dynamicItems": false };
function validate63(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permission-grant-data.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate63.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.dateExpires === undefined) && (missing0 = "dateExpires")) || ((data.scope === undefined) && (missing0 = "scope"))) {
            validate63.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((((key0 === "description") || (key0 === "dateExpires")) || (key0 === "requestId")) || (key0 === "delegated")) || (key0 === "scope")) || (key0 === "conditions"))) {
                    validate63.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.description !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.description !== "string") {
                        validate63.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.dateExpires !== undefined) {
                        let data1 = data.dateExpires;
                        const _errs4 = errors;
                        const _errs5 = errors;
                        if (errors === _errs5) {
                            if (typeof data1 === "string") {
                                if (!pattern14.test(data1)) {
                                    validate63.errors = [{ instancePath: instancePath + "/dateExpires", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate63.errors = [{ instancePath: instancePath + "/dateExpires", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.requestId !== undefined) {
                            const _errs7 = errors;
                            if (typeof data.requestId !== "string") {
                                validate63.errors = [{ instancePath: instancePath + "/requestId", schemaPath: "#/properties/requestId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs7 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.delegated !== undefined) {
                                const _errs9 = errors;
                                if (typeof data.delegated !== "boolean") {
                                    validate63.errors = [{ instancePath: instancePath + "/delegated", schemaPath: "#/properties/delegated/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                    return false;
                                }
                                var valid0 = _errs9 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.scope !== undefined) {
                                    const _errs11 = errors;
                                    if (!(validate65(data.scope, { instancePath: instancePath + "/scope", parentData: data, parentDataProperty: "scope", rootData, dynamicAnchors }))) {
                                        vErrors = vErrors === null ? validate65.errors : vErrors.concat(validate65.errors);
                                        errors = vErrors.length;
                                    }
                                    var valid0 = _errs11 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.conditions !== undefined) {
                                        let data5 = data.conditions;
                                        const _errs12 = errors;
                                        const _errs13 = errors;
                                        if (errors === _errs13) {
                                            if (data5 && typeof data5 == "object" && !Array.isArray(data5)) {
                                                const _errs15 = errors;
                                                for (const key1 in data5) {
                                                    if (!(key1 === "publication")) {
                                                        validate63.errors = [{ instancePath: instancePath + "/conditions", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                        return false;
                                                        break;
                                                    }
                                                }
                                                if (_errs15 === errors) {
                                                    if (data5.publication !== undefined) {
                                                        let data6 = data5.publication;
                                                        if (typeof data6 !== "string") {
                                                            validate63.errors = [{ instancePath: instancePath + "/conditions/publication", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions/properties/publication/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                        if (!((data6 === "Required") || (data6 === "Prohibited"))) {
                                                            validate63.errors = [{ instancePath: instancePath + "/conditions/publication", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions/properties/publication/enum", keyword: "enum", params: { allowedValues: schema102.properties.publication.enum }, message: "must be equal to one of the allowed values" }];
                                                            return false;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                validate63.errors = [{ instancePath: instancePath + "/conditions", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                return false;
                                            }
                                        }
                                        var valid0 = _errs12 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate63.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate63.errors = vErrors; return errors === 0; }
validate63.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const PermissionRequestData = validate68;
const schema103 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/permission-request-data.json", "type": "object", "additionalProperties": false, "required": ["delegated", "scope"], "properties": { "description": { "type": "string" }, "delegated": { "type": "boolean" }, "scope": { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/scope" }, "conditions": { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions" } } };
function validate69(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { let vErrors = null; let errors = 0; const evaluated0 = validate69.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} const _errs0 = errors; let valid0 = false; let passing0 = null; const _errs1 = errors; const _errs2 = errors; if (errors === _errs2) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.interface === undefined) && (missing0 = "interface")) || ((data.method === undefined) && (missing0 = "method"))) {
            const err0 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
        else {
            const _errs4 = errors;
            for (const key0 in data) {
                if (!(((key0 === "interface") || (key0 === "method")) || (key0 === "protocol"))) {
                    const err1 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" };
                    if (vErrors === null) {
                        vErrors = [err1];
                    }
                    else {
                        vErrors.push(err1);
                    }
                    errors++;
                    break;
                }
            }
            if (_errs4 === errors) {
                if (data.interface !== undefined) {
                    const _errs5 = errors;
                    if ("Messages" !== data.interface) {
                        const err2 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Messages" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err2];
                        }
                        else {
                            vErrors.push(err2);
                        }
                        errors++;
                    }
                    var valid2 = _errs5 === errors;
                }
                else {
                    var valid2 = true;
                }
                if (valid2) {
                    if (data.method !== undefined) {
                        const _errs6 = errors;
                        if ("Query" !== data.method) {
                            const err3 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/properties/method/const", keyword: "const", params: { allowedValue: "Query" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err3];
                            }
                            else {
                                vErrors.push(err3);
                            }
                            errors++;
                        }
                        var valid2 = _errs6 === errors;
                    }
                    else {
                        var valid2 = true;
                    }
                    if (valid2) {
                        if (data.protocol !== undefined) {
                            const _errs7 = errors;
                            if (typeof data.protocol !== "string") {
                                const err4 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err4];
                                }
                                else {
                                    vErrors.push(err4);
                                }
                                errors++;
                            }
                            var valid2 = _errs7 === errors;
                        }
                        else {
                            var valid2 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        const err5 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err5];
        }
        else {
            vErrors.push(err5);
        }
        errors++;
    }
} var _valid0 = _errs1 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
    var props0 = true;
} const _errs9 = errors; const _errs10 = errors; if (errors === _errs10) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing1;
        if (((data.interface === undefined) && (missing1 = "interface")) || ((data.method === undefined) && (missing1 = "method"))) {
            const err6 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
            if (vErrors === null) {
                vErrors = [err6];
            }
            else {
                vErrors.push(err6);
            }
            errors++;
        }
        else {
            const _errs12 = errors;
            for (const key1 in data) {
                if (!(((key1 === "interface") || (key1 === "method")) || (key1 === "protocol"))) {
                    const err7 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" };
                    if (vErrors === null) {
                        vErrors = [err7];
                    }
                    else {
                        vErrors.push(err7);
                    }
                    errors++;
                    break;
                }
            }
            if (_errs12 === errors) {
                if (data.interface !== undefined) {
                    const _errs13 = errors;
                    if ("Messages" !== data.interface) {
                        const err8 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Messages" }, message: "must be equal to constant" };
                        if (vErrors === null) {
                            vErrors = [err8];
                        }
                        else {
                            vErrors.push(err8);
                        }
                        errors++;
                    }
                    var valid4 = _errs13 === errors;
                }
                else {
                    var valid4 = true;
                }
                if (valid4) {
                    if (data.method !== undefined) {
                        const _errs14 = errors;
                        if ("Read" !== data.method) {
                            const err9 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/properties/method/const", keyword: "const", params: { allowedValue: "Read" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err9];
                            }
                            else {
                                vErrors.push(err9);
                            }
                            errors++;
                        }
                        var valid4 = _errs14 === errors;
                    }
                    else {
                        var valid4 = true;
                    }
                    if (valid4) {
                        if (data.protocol !== undefined) {
                            const _errs15 = errors;
                            if (typeof data.protocol !== "string") {
                                const err10 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                if (vErrors === null) {
                                    vErrors = [err10];
                                }
                                else {
                                    vErrors.push(err10);
                                }
                                errors++;
                            }
                            var valid4 = _errs15 === errors;
                        }
                        else {
                            var valid4 = true;
                        }
                    }
                }
            }
        }
    }
    else {
        const err11 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err11];
        }
        else {
            vErrors.push(err11);
        }
        errors++;
    }
} var _valid0 = _errs9 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
        if (props0 !== true) {
            props0 = true;
        }
    }
    const _errs17 = errors;
    const _errs18 = errors;
    if (errors === _errs18) {
        if (data && typeof data == "object" && !Array.isArray(data)) {
            let missing2;
            if (((data.interface === undefined) && (missing2 = "interface")) || ((data.method === undefined) && (missing2 = "method"))) {
                const err12 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
                if (vErrors === null) {
                    vErrors = [err12];
                }
                else {
                    vErrors.push(err12);
                }
                errors++;
            }
            else {
                const _errs20 = errors;
                for (const key2 in data) {
                    if (!(((key2 === "interface") || (key2 === "method")) || (key2 === "protocol"))) {
                        const err13 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" };
                        if (vErrors === null) {
                            vErrors = [err13];
                        }
                        else {
                            vErrors.push(err13);
                        }
                        errors++;
                        break;
                    }
                }
                if (_errs20 === errors) {
                    if (data.interface !== undefined) {
                        const _errs21 = errors;
                        if ("Messages" !== data.interface) {
                            const err14 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Messages" }, message: "must be equal to constant" };
                            if (vErrors === null) {
                                vErrors = [err14];
                            }
                            else {
                                vErrors.push(err14);
                            }
                            errors++;
                        }
                        var valid6 = _errs21 === errors;
                    }
                    else {
                        var valid6 = true;
                    }
                    if (valid6) {
                        if (data.method !== undefined) {
                            const _errs22 = errors;
                            if ("Subscribe" !== data.method) {
                                const err15 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/properties/method/const", keyword: "const", params: { allowedValue: "Subscribe" }, message: "must be equal to constant" };
                                if (vErrors === null) {
                                    vErrors = [err15];
                                }
                                else {
                                    vErrors.push(err15);
                                }
                                errors++;
                            }
                            var valid6 = _errs22 === errors;
                        }
                        else {
                            var valid6 = true;
                        }
                        if (valid6) {
                            if (data.protocol !== undefined) {
                                const _errs23 = errors;
                                if (typeof data.protocol !== "string") {
                                    const err16 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err16];
                                    }
                                    else {
                                        vErrors.push(err16);
                                    }
                                    errors++;
                                }
                                var valid6 = _errs23 === errors;
                            }
                            else {
                                var valid6 = true;
                            }
                        }
                    }
                }
            }
        }
        else {
            const err17 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
            if (vErrors === null) {
                vErrors = [err17];
            }
            else {
                vErrors.push(err17);
            }
            errors++;
        }
    }
    var _valid0 = _errs17 === errors;
    if (_valid0 && valid0) {
        valid0 = false;
        passing0 = [passing0, 2];
    }
    else {
        if (_valid0) {
            valid0 = true;
            passing0 = 2;
            if (props0 !== true) {
                props0 = true;
            }
        }
        const _errs25 = errors;
        const _errs26 = errors;
        if (errors === _errs26) {
            if (data && typeof data == "object" && !Array.isArray(data)) {
                let missing3;
                if (((data.interface === undefined) && (missing3 = "interface")) || ((data.method === undefined) && (missing3 = "method"))) {
                    const err18 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                    if (vErrors === null) {
                        vErrors = [err18];
                    }
                    else {
                        vErrors.push(err18);
                    }
                    errors++;
                }
                else {
                    const _errs28 = errors;
                    for (const key3 in data) {
                        if (!((key3 === "interface") || (key3 === "method"))) {
                            const err19 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" };
                            if (vErrors === null) {
                                vErrors = [err19];
                            }
                            else {
                                vErrors.push(err19);
                            }
                            errors++;
                            break;
                        }
                    }
                    if (_errs28 === errors) {
                        if (data.interface !== undefined) {
                            const _errs29 = errors;
                            if ("Protocols" !== data.interface) {
                                const err20 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Protocols" }, message: "must be equal to constant" };
                                if (vErrors === null) {
                                    vErrors = [err20];
                                }
                                else {
                                    vErrors.push(err20);
                                }
                                errors++;
                            }
                            var valid8 = _errs29 === errors;
                        }
                        else {
                            var valid8 = true;
                        }
                        if (valid8) {
                            if (data.method !== undefined) {
                                const _errs30 = errors;
                                if ("Query" !== data.method) {
                                    const err21 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/properties/method/const", keyword: "const", params: { allowedValue: "Query" }, message: "must be equal to constant" };
                                    if (vErrors === null) {
                                        vErrors = [err21];
                                    }
                                    else {
                                        vErrors.push(err21);
                                    }
                                    errors++;
                                }
                                var valid8 = _errs30 === errors;
                            }
                            else {
                                var valid8 = true;
                            }
                        }
                    }
                }
            }
            else {
                const err22 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                if (vErrors === null) {
                    vErrors = [err22];
                }
                else {
                    vErrors.push(err22);
                }
                errors++;
            }
        }
        var _valid0 = _errs25 === errors;
        if (_valid0 && valid0) {
            valid0 = false;
            passing0 = [passing0, 3];
        }
        else {
            if (_valid0) {
                valid0 = true;
                passing0 = 3;
                if (props0 !== true) {
                    props0 = true;
                }
            }
            const _errs31 = errors;
            const _errs32 = errors;
            if (errors === _errs32) {
                if (data && typeof data == "object" && !Array.isArray(data)) {
                    let missing4;
                    if (((data.interface === undefined) && (missing4 = "interface")) || ((data.method === undefined) && (missing4 = "method"))) {
                        const err23 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" };
                        if (vErrors === null) {
                            vErrors = [err23];
                        }
                        else {
                            vErrors.push(err23);
                        }
                        errors++;
                    }
                    else {
                        const _errs34 = errors;
                        for (const key4 in data) {
                            if (!(((((key4 === "interface") || (key4 === "method")) || (key4 === "protocol")) || (key4 === "contextId")) || (key4 === "protocolPath"))) {
                                const err24 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" };
                                if (vErrors === null) {
                                    vErrors = [err24];
                                }
                                else {
                                    vErrors.push(err24);
                                }
                                errors++;
                                break;
                            }
                        }
                        if (_errs34 === errors) {
                            if (data.interface !== undefined) {
                                const _errs35 = errors;
                                if ("Records" !== data.interface) {
                                    const err25 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                    if (vErrors === null) {
                                        vErrors = [err25];
                                    }
                                    else {
                                        vErrors.push(err25);
                                    }
                                    errors++;
                                }
                                var valid10 = _errs35 === errors;
                            }
                            else {
                                var valid10 = true;
                            }
                            if (valid10) {
                                if (data.method !== undefined) {
                                    const _errs36 = errors;
                                    if ("Read" !== data.method) {
                                        const err26 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/method/const", keyword: "const", params: { allowedValue: "Read" }, message: "must be equal to constant" };
                                        if (vErrors === null) {
                                            vErrors = [err26];
                                        }
                                        else {
                                            vErrors.push(err26);
                                        }
                                        errors++;
                                    }
                                    var valid10 = _errs36 === errors;
                                }
                                else {
                                    var valid10 = true;
                                }
                                if (valid10) {
                                    if (data.protocol !== undefined) {
                                        const _errs37 = errors;
                                        if (typeof data.protocol !== "string") {
                                            const err27 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err27];
                                            }
                                            else {
                                                vErrors.push(err27);
                                            }
                                            errors++;
                                        }
                                        var valid10 = _errs37 === errors;
                                    }
                                    else {
                                        var valid10 = true;
                                    }
                                    if (valid10) {
                                        if (data.contextId !== undefined) {
                                            const _errs39 = errors;
                                            if (typeof data.contextId !== "string") {
                                                const err28 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err28];
                                                }
                                                else {
                                                    vErrors.push(err28);
                                                }
                                                errors++;
                                            }
                                            var valid10 = _errs39 === errors;
                                        }
                                        else {
                                            var valid10 = true;
                                        }
                                        if (valid10) {
                                            if (data.protocolPath !== undefined) {
                                                const _errs41 = errors;
                                                if (typeof data.protocolPath !== "string") {
                                                    const err29 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err29];
                                                    }
                                                    else {
                                                        vErrors.push(err29);
                                                    }
                                                    errors++;
                                                }
                                                var valid10 = _errs41 === errors;
                                            }
                                            else {
                                                var valid10 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    const err30 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                    if (vErrors === null) {
                        vErrors = [err30];
                    }
                    else {
                        vErrors.push(err30);
                    }
                    errors++;
                }
            }
            var _valid0 = _errs31 === errors;
            if (_valid0 && valid0) {
                valid0 = false;
                passing0 = [passing0, 4];
            }
            else {
                if (_valid0) {
                    valid0 = true;
                    passing0 = 4;
                    if (props0 !== true) {
                        props0 = true;
                    }
                }
                const _errs43 = errors;
                const _errs44 = errors;
                if (errors === _errs44) {
                    if (data && typeof data == "object" && !Array.isArray(data)) {
                        let missing5;
                        if (((data.interface === undefined) && (missing5 = "interface")) || ((data.method === undefined) && (missing5 = "method"))) {
                            const err31 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" };
                            if (vErrors === null) {
                                vErrors = [err31];
                            }
                            else {
                                vErrors.push(err31);
                            }
                            errors++;
                        }
                        else {
                            const _errs46 = errors;
                            for (const key5 in data) {
                                if (!(((((key5 === "interface") || (key5 === "method")) || (key5 === "protocol")) || (key5 === "contextId")) || (key5 === "protocolPath"))) {
                                    const err32 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" };
                                    if (vErrors === null) {
                                        vErrors = [err32];
                                    }
                                    else {
                                        vErrors.push(err32);
                                    }
                                    errors++;
                                    break;
                                }
                            }
                            if (_errs46 === errors) {
                                if (data.interface !== undefined) {
                                    const _errs47 = errors;
                                    if ("Records" !== data.interface) {
                                        const err33 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                        if (vErrors === null) {
                                            vErrors = [err33];
                                        }
                                        else {
                                            vErrors.push(err33);
                                        }
                                        errors++;
                                    }
                                    var valid12 = _errs47 === errors;
                                }
                                else {
                                    var valid12 = true;
                                }
                                if (valid12) {
                                    if (data.method !== undefined) {
                                        const _errs48 = errors;
                                        if ("Delete" !== data.method) {
                                            const err34 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/method/const", keyword: "const", params: { allowedValue: "Delete" }, message: "must be equal to constant" };
                                            if (vErrors === null) {
                                                vErrors = [err34];
                                            }
                                            else {
                                                vErrors.push(err34);
                                            }
                                            errors++;
                                        }
                                        var valid12 = _errs48 === errors;
                                    }
                                    else {
                                        var valid12 = true;
                                    }
                                    if (valid12) {
                                        if (data.protocol !== undefined) {
                                            const _errs49 = errors;
                                            if (typeof data.protocol !== "string") {
                                                const err35 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err35];
                                                }
                                                else {
                                                    vErrors.push(err35);
                                                }
                                                errors++;
                                            }
                                            var valid12 = _errs49 === errors;
                                        }
                                        else {
                                            var valid12 = true;
                                        }
                                        if (valid12) {
                                            if (data.contextId !== undefined) {
                                                const _errs51 = errors;
                                                if (typeof data.contextId !== "string") {
                                                    const err36 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err36];
                                                    }
                                                    else {
                                                        vErrors.push(err36);
                                                    }
                                                    errors++;
                                                }
                                                var valid12 = _errs51 === errors;
                                            }
                                            else {
                                                var valid12 = true;
                                            }
                                            if (valid12) {
                                                if (data.protocolPath !== undefined) {
                                                    const _errs53 = errors;
                                                    if (typeof data.protocolPath !== "string") {
                                                        const err37 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err37];
                                                        }
                                                        else {
                                                            vErrors.push(err37);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid12 = _errs53 === errors;
                                                }
                                                else {
                                                    var valid12 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        const err38 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                        if (vErrors === null) {
                            vErrors = [err38];
                        }
                        else {
                            vErrors.push(err38);
                        }
                        errors++;
                    }
                }
                var _valid0 = _errs43 === errors;
                if (_valid0 && valid0) {
                    valid0 = false;
                    passing0 = [passing0, 5];
                }
                else {
                    if (_valid0) {
                        valid0 = true;
                        passing0 = 5;
                        if (props0 !== true) {
                            props0 = true;
                        }
                    }
                    const _errs55 = errors;
                    const _errs56 = errors;
                    if (errors === _errs56) {
                        if (data && typeof data == "object" && !Array.isArray(data)) {
                            let missing6;
                            if (((data.interface === undefined) && (missing6 = "interface")) || ((data.method === undefined) && (missing6 = "method"))) {
                                const err39 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" };
                                if (vErrors === null) {
                                    vErrors = [err39];
                                }
                                else {
                                    vErrors.push(err39);
                                }
                                errors++;
                            }
                            else {
                                const _errs58 = errors;
                                for (const key6 in data) {
                                    if (!(((((key6 === "interface") || (key6 === "method")) || (key6 === "protocol")) || (key6 === "contextId")) || (key6 === "protocolPath"))) {
                                        const err40 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" };
                                        if (vErrors === null) {
                                            vErrors = [err40];
                                        }
                                        else {
                                            vErrors.push(err40);
                                        }
                                        errors++;
                                        break;
                                    }
                                }
                                if (_errs58 === errors) {
                                    if (data.interface !== undefined) {
                                        const _errs59 = errors;
                                        if ("Records" !== data.interface) {
                                            const err41 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                            if (vErrors === null) {
                                                vErrors = [err41];
                                            }
                                            else {
                                                vErrors.push(err41);
                                            }
                                            errors++;
                                        }
                                        var valid14 = _errs59 === errors;
                                    }
                                    else {
                                        var valid14 = true;
                                    }
                                    if (valid14) {
                                        if (data.method !== undefined) {
                                            const _errs60 = errors;
                                            if ("Write" !== data.method) {
                                                const err42 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/method/const", keyword: "const", params: { allowedValue: "Write" }, message: "must be equal to constant" };
                                                if (vErrors === null) {
                                                    vErrors = [err42];
                                                }
                                                else {
                                                    vErrors.push(err42);
                                                }
                                                errors++;
                                            }
                                            var valid14 = _errs60 === errors;
                                        }
                                        else {
                                            var valid14 = true;
                                        }
                                        if (valid14) {
                                            if (data.protocol !== undefined) {
                                                const _errs61 = errors;
                                                if (typeof data.protocol !== "string") {
                                                    const err43 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err43];
                                                    }
                                                    else {
                                                        vErrors.push(err43);
                                                    }
                                                    errors++;
                                                }
                                                var valid14 = _errs61 === errors;
                                            }
                                            else {
                                                var valid14 = true;
                                            }
                                            if (valid14) {
                                                if (data.contextId !== undefined) {
                                                    const _errs63 = errors;
                                                    if (typeof data.contextId !== "string") {
                                                        const err44 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err44];
                                                        }
                                                        else {
                                                            vErrors.push(err44);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid14 = _errs63 === errors;
                                                }
                                                else {
                                                    var valid14 = true;
                                                }
                                                if (valid14) {
                                                    if (data.protocolPath !== undefined) {
                                                        const _errs65 = errors;
                                                        if (typeof data.protocolPath !== "string") {
                                                            const err45 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err45];
                                                            }
                                                            else {
                                                                vErrors.push(err45);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid14 = _errs65 === errors;
                                                    }
                                                    else {
                                                        var valid14 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            const err46 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                            if (vErrors === null) {
                                vErrors = [err46];
                            }
                            else {
                                vErrors.push(err46);
                            }
                            errors++;
                        }
                    }
                    var _valid0 = _errs55 === errors;
                    if (_valid0 && valid0) {
                        valid0 = false;
                        passing0 = [passing0, 6];
                    }
                    else {
                        if (_valid0) {
                            valid0 = true;
                            passing0 = 6;
                            if (props0 !== true) {
                                props0 = true;
                            }
                        }
                        const _errs67 = errors;
                        const _errs68 = errors;
                        if (errors === _errs68) {
                            if (data && typeof data == "object" && !Array.isArray(data)) {
                                let missing7;
                                if (((data.interface === undefined) && (missing7 = "interface")) || ((data.method === undefined) && (missing7 = "method"))) {
                                    const err47 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" };
                                    if (vErrors === null) {
                                        vErrors = [err47];
                                    }
                                    else {
                                        vErrors.push(err47);
                                    }
                                    errors++;
                                }
                                else {
                                    const _errs70 = errors;
                                    for (const key7 in data) {
                                        if (!(((((key7 === "interface") || (key7 === "method")) || (key7 === "protocol")) || (key7 === "contextId")) || (key7 === "protocolPath"))) {
                                            const err48 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" };
                                            if (vErrors === null) {
                                                vErrors = [err48];
                                            }
                                            else {
                                                vErrors.push(err48);
                                            }
                                            errors++;
                                            break;
                                        }
                                    }
                                    if (_errs70 === errors) {
                                        if (data.interface !== undefined) {
                                            const _errs71 = errors;
                                            if ("Records" !== data.interface) {
                                                const err49 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                                if (vErrors === null) {
                                                    vErrors = [err49];
                                                }
                                                else {
                                                    vErrors.push(err49);
                                                }
                                                errors++;
                                            }
                                            var valid16 = _errs71 === errors;
                                        }
                                        else {
                                            var valid16 = true;
                                        }
                                        if (valid16) {
                                            if (data.method !== undefined) {
                                                const _errs72 = errors;
                                                if ("Query" !== data.method) {
                                                    const err50 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/method/const", keyword: "const", params: { allowedValue: "Query" }, message: "must be equal to constant" };
                                                    if (vErrors === null) {
                                                        vErrors = [err50];
                                                    }
                                                    else {
                                                        vErrors.push(err50);
                                                    }
                                                    errors++;
                                                }
                                                var valid16 = _errs72 === errors;
                                            }
                                            else {
                                                var valid16 = true;
                                            }
                                            if (valid16) {
                                                if (data.protocol !== undefined) {
                                                    const _errs73 = errors;
                                                    if (typeof data.protocol !== "string") {
                                                        const err51 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err51];
                                                        }
                                                        else {
                                                            vErrors.push(err51);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid16 = _errs73 === errors;
                                                }
                                                else {
                                                    var valid16 = true;
                                                }
                                                if (valid16) {
                                                    if (data.contextId !== undefined) {
                                                        const _errs75 = errors;
                                                        if (typeof data.contextId !== "string") {
                                                            const err52 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err52];
                                                            }
                                                            else {
                                                                vErrors.push(err52);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid16 = _errs75 === errors;
                                                    }
                                                    else {
                                                        var valid16 = true;
                                                    }
                                                    if (valid16) {
                                                        if (data.protocolPath !== undefined) {
                                                            const _errs77 = errors;
                                                            if (typeof data.protocolPath !== "string") {
                                                                const err53 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err53];
                                                                }
                                                                else {
                                                                    vErrors.push(err53);
                                                                }
                                                                errors++;
                                                            }
                                                            var valid16 = _errs77 === errors;
                                                        }
                                                        else {
                                                            var valid16 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                const err54 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                if (vErrors === null) {
                                    vErrors = [err54];
                                }
                                else {
                                    vErrors.push(err54);
                                }
                                errors++;
                            }
                        }
                        var _valid0 = _errs67 === errors;
                        if (_valid0 && valid0) {
                            valid0 = false;
                            passing0 = [passing0, 7];
                        }
                        else {
                            if (_valid0) {
                                valid0 = true;
                                passing0 = 7;
                                if (props0 !== true) {
                                    props0 = true;
                                }
                            }
                            const _errs79 = errors;
                            const _errs80 = errors;
                            if (errors === _errs80) {
                                if (data && typeof data == "object" && !Array.isArray(data)) {
                                    let missing8;
                                    if (((data.interface === undefined) && (missing8 = "interface")) || ((data.method === undefined) && (missing8 = "method"))) {
                                        const err55 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" };
                                        if (vErrors === null) {
                                            vErrors = [err55];
                                        }
                                        else {
                                            vErrors.push(err55);
                                        }
                                        errors++;
                                    }
                                    else {
                                        const _errs82 = errors;
                                        for (const key8 in data) {
                                            if (!(((((key8 === "interface") || (key8 === "method")) || (key8 === "protocol")) || (key8 === "contextId")) || (key8 === "protocolPath"))) {
                                                const err56 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key8 }, message: "must NOT have additional properties" };
                                                if (vErrors === null) {
                                                    vErrors = [err56];
                                                }
                                                else {
                                                    vErrors.push(err56);
                                                }
                                                errors++;
                                                break;
                                            }
                                        }
                                        if (_errs82 === errors) {
                                            if (data.interface !== undefined) {
                                                const _errs83 = errors;
                                                if ("Records" !== data.interface) {
                                                    const err57 = { instancePath: instancePath + "/interface", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/interface/const", keyword: "const", params: { allowedValue: "Records" }, message: "must be equal to constant" };
                                                    if (vErrors === null) {
                                                        vErrors = [err57];
                                                    }
                                                    else {
                                                        vErrors.push(err57);
                                                    }
                                                    errors++;
                                                }
                                                var valid18 = _errs83 === errors;
                                            }
                                            else {
                                                var valid18 = true;
                                            }
                                            if (valid18) {
                                                if (data.method !== undefined) {
                                                    const _errs84 = errors;
                                                    if ("Subscribe" !== data.method) {
                                                        const err58 = { instancePath: instancePath + "/method", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/method/const", keyword: "const", params: { allowedValue: "Subscribe" }, message: "must be equal to constant" };
                                                        if (vErrors === null) {
                                                            vErrors = [err58];
                                                        }
                                                        else {
                                                            vErrors.push(err58);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid18 = _errs84 === errors;
                                                }
                                                else {
                                                    var valid18 = true;
                                                }
                                                if (valid18) {
                                                    if (data.protocol !== undefined) {
                                                        const _errs85 = errors;
                                                        if (typeof data.protocol !== "string") {
                                                            const err59 = { instancePath: instancePath + "/protocol", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err59];
                                                            }
                                                            else {
                                                                vErrors.push(err59);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid18 = _errs85 === errors;
                                                    }
                                                    else {
                                                        var valid18 = true;
                                                    }
                                                    if (valid18) {
                                                        if (data.contextId !== undefined) {
                                                            const _errs87 = errors;
                                                            if (typeof data.contextId !== "string") {
                                                                const err60 = { instancePath: instancePath + "/contextId", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err60];
                                                                }
                                                                else {
                                                                    vErrors.push(err60);
                                                                }
                                                                errors++;
                                                            }
                                                            var valid18 = _errs87 === errors;
                                                        }
                                                        else {
                                                            var valid18 = true;
                                                        }
                                                        if (valid18) {
                                                            if (data.protocolPath !== undefined) {
                                                                const _errs89 = errors;
                                                                if (typeof data.protocolPath !== "string") {
                                                                    const err61 = { instancePath: instancePath + "/protocolPath", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/properties/protocolPath/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                    if (vErrors === null) {
                                                                        vErrors = [err61];
                                                                    }
                                                                    else {
                                                                        vErrors.push(err61);
                                                                    }
                                                                    errors++;
                                                                }
                                                                var valid18 = _errs89 === errors;
                                                            }
                                                            else {
                                                                var valid18 = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    const err62 = { instancePath, schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                    if (vErrors === null) {
                                        vErrors = [err62];
                                    }
                                    else {
                                        vErrors.push(err62);
                                    }
                                    errors++;
                                }
                            }
                            var _valid0 = _errs79 === errors;
                            if (_valid0 && valid0) {
                                valid0 = false;
                                passing0 = [passing0, 8];
                            }
                            else {
                                if (_valid0) {
                                    valid0 = true;
                                    passing0 = 8;
                                    if (props0 !== true) {
                                        props0 = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} if (!valid0) {
    const err63 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err63];
    }
    else {
        vErrors.push(err63);
    }
    errors++;
    validate69.errors = vErrors;
    return false;
}
else {
    errors = _errs0;
    if (vErrors !== null) {
        if (_errs0) {
            vErrors.length = _errs0;
        }
        else {
            vErrors = null;
        }
    }
} validate69.errors = vErrors; evaluated0.props = props0; return errors === 0; }
validate69.evaluated = { "dynamicProps": true, "dynamicItems": false };
function validate68(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permission-request-data.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate68.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.delegated === undefined) && (missing0 = "delegated")) || ((data.scope === undefined) && (missing0 = "scope"))) {
            validate68.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "description") || (key0 === "delegated")) || (key0 === "scope")) || (key0 === "conditions"))) {
                    validate68.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.description !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.description !== "string") {
                        validate68.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.delegated !== undefined) {
                        const _errs4 = errors;
                        if (typeof data.delegated !== "boolean") {
                            validate68.errors = [{ instancePath: instancePath + "/delegated", schemaPath: "#/properties/delegated/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.scope !== undefined) {
                            const _errs6 = errors;
                            if (!(validate69(data.scope, { instancePath: instancePath + "/scope", parentData: data, parentDataProperty: "scope", rootData, dynamicAnchors }))) {
                                vErrors = vErrors === null ? validate69.errors : vErrors.concat(validate69.errors);
                                errors = vErrors.length;
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.conditions !== undefined) {
                                let data3 = data.conditions;
                                const _errs7 = errors;
                                const _errs8 = errors;
                                if (errors === _errs8) {
                                    if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                                        const _errs10 = errors;
                                        for (const key1 in data3) {
                                            if (!(key1 === "publication")) {
                                                validate68.errors = [{ instancePath: instancePath + "/conditions", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                return false;
                                                break;
                                            }
                                        }
                                        if (_errs10 === errors) {
                                            if (data3.publication !== undefined) {
                                                let data4 = data3.publication;
                                                if (typeof data4 !== "string") {
                                                    validate68.errors = [{ instancePath: instancePath + "/conditions/publication", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions/properties/publication/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!((data4 === "Required") || (data4 === "Prohibited"))) {
                                                    validate68.errors = [{ instancePath: instancePath + "/conditions/publication", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions/properties/publication/enum", keyword: "enum", params: { allowedValues: schema102.properties.publication.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate68.errors = [{ instancePath: instancePath + "/conditions", schemaPath: "https://identity.foundation/dwn/json-schemas/permissions/defs.json#/$defs/conditions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs7 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate68.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate68.errors = vErrors; return errors === 0; }
validate68.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const PermissionRevocationData = validate71;
const schema115 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/permission-revoke-data.json", "type": "object", "additionalProperties": false, "properties": { "description": { "type": "string" } } };
function validate71(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permission-revoke-data.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate71.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!(key0 === "description")) {
                validate71.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.description !== undefined) {
                if (typeof data.description !== "string") {
                    validate71.errors = [{ instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
            }
        }
    }
    else {
        validate71.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate71.errors = vErrors; return errors === 0; }
validate71.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const PermissionsDefinitions = validate64;
const schema90 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/permissions/defs.json", "type": "object", "$defs": { "scope": { "oneOf": [{ "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-query-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-read-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/messages-subscribe-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/protocols-query-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-read-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-delete-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-write-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-query-scope" }, { "$ref": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json#/$defs/records-subscribe-scope" }] }, "conditions": { "type": "object", "additionalProperties": false, "properties": { "publication": { "enum": ["Required", "Prohibited"], "type": "string" } } } } };
function validate64(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permissions/defs.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate64.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate64.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} validate64.errors = vErrors; return errors === 0; }
validate64.evaluated = { "dynamicProps": false, "dynamicItems": false };
export const PermissionsScopes = validate66;
const schema92 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/permissions/scopes.json", "type": "object", "$defs": { "messages-query-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Messages" }, "method": { "const": "Query" }, "protocol": { "type": "string" } } }, "messages-read-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Messages" }, "method": { "const": "Read" }, "protocol": { "type": "string" } } }, "messages-subscribe-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Messages" }, "method": { "const": "Subscribe" }, "protocol": { "type": "string" } } }, "protocols-query-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Protocols" }, "method": { "const": "Query" } } }, "records-delete-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Delete" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } }, "records-read-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Read" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } }, "records-write-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Write" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } }, "records-query-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Query" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } }, "records-subscribe-scope": { "type": "object", "additionalProperties": false, "required": ["interface", "method"], "properties": { "interface": { "const": "Records" }, "method": { "const": "Subscribe" }, "protocol": { "type": "string" }, "contextId": { "type": "string" }, "protocolPath": { "type": "string" } } } } };
function validate66(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/permissions/scopes.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate66.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate66.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} validate66.errors = vErrors; return errors === 0; }
validate66.evaluated = { "dynamicProps": false, "dynamicItems": false };
export const ProtocolDefinition = validate72;
const schema116 = { "$id": "https://identity.foundation/dwn/json-schemas/protocol-definition.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "type": "object", "additionalProperties": false, "required": ["protocol", "published", "types", "structure"], "properties": { "protocol": { "type": "string" }, "published": { "type": "boolean" }, "types": { "type": "object", "patternProperties": { ".*": { "type": "object", "additionalProperties": false, "properties": { "schema": { "type": "string" }, "dataFormats": { "type": "array", "minItems": 1, "items": { "type": "string" } } } } } }, "structure": { "type": "object", "patternProperties": { ".*": { "$ref": "https://identity.foundation/dwn/json-schemas/protocol-rule-set.json" } } } } };
const pattern37 = new RegExp(".*", "u");
const schema117 = { "$id": "https://identity.foundation/dwn/json-schemas/protocol-rule-set.json", "$schema": "https://json-schema.org/draft/2020-12/schema", "type": "object", "additionalProperties": false, "properties": { "$encryption": { "type": "object", "additionalProperties": false, "properties": { "rootKeyId": { "type": "string" }, "publicKeyJwk": { "$ref": "https://identity.foundation/dwn/json-schemas/public-jwk.json" } }, "required": ["rootKeyId", "publicKeyJwk"] }, "$actions": { "type": "array", "minItems": 1, "items": { "type": "object", "oneOf": [{ "required": ["who", "can"], "additionalProperties": false, "properties": { "who": { "type": "string", "enum": ["anyone", "author", "recipient"] }, "of": { "type": "string" }, "can": { "type": "array", "minItems": 1, "items": { "type": "string", "enum": ["co-delete", "co-prune", "co-update", "create", "delete", "prune", "read", "update"] } } } }, { "required": ["role", "can"], "properties": { "role": { "$comment": "Must be the protocol path of a role record type", "type": "string" }, "can": { "type": "array", "minItems": 1, "items": { "type": "string", "enum": ["co-delete", "co-update", "create", "delete", "query", "subscribe", "read", "update"] } } } }] } }, "$role": { "$comment": "When `true`, this turns a record into `role` that may be used within a context/sub-context", "type": "boolean" }, "$size": { "type": "object", "additionalProperties": false, "properties": { "min": { "type": "number", "minimum": 0 }, "max": { "type": "number", "minimum": 0 } } }, "$tags": { "type": "object", "minProperties": 1, "properties": { "$requiredTags": { "type": "array", "items": { "type": "string" } }, "$allowUndefinedTags": { "type": "boolean" } }, "patternProperties": { "^(?!\\$requiredTags$|\\$allowUndefinedTags$).*$": { "type": "object", "additionalProperties": false, "properties": { "type": { "enum": ["string", "number", "integer", "boolean", "array"] }, "items": { "type": "object", "properties": { "type": { "enum": ["string", "number", "integer"] } }, "patternProperties": { "^(enum|minimum|maximum|exclusiveMinimum|exclusiveMaximum|minLength|maxLength)$": {} } }, "contains": { "type": "object", "properties": { "type": { "enum": ["string", "number", "integer"] } }, "patternProperties": { "^(enum|minimum|maximum|exclusiveMinimum|exclusiveMaximum|minLength|maxLength)$": {} } } }, "patternProperties": { "^(enum|minimum|maximum|exclusiveMinimum|exclusiveMaximum|minLength|maxLength|minItems|maxItems|uniqueItems|minContains|maxContains)$": {} } } } } }, "patternProperties": { "^[^$].*$": { "$ref": "https://identity.foundation/dwn/json-schemas/protocol-rule-set.json" } } };
const pattern39 = new RegExp("^[^$].*$", "u");
const pattern40 = new RegExp("^(?!\\$requiredTags$|\\$allowUndefinedTags$).*$", "u");
const pattern41 = new RegExp("^(enum|minimum|maximum|exclusiveMinimum|exclusiveMaximum|minLength|maxLength|minItems|maxItems|uniqueItems|minContains|maxContains)$", "u");
const pattern42 = new RegExp("^(enum|minimum|maximum|exclusiveMinimum|exclusiveMaximum|minLength|maxLength)$", "u");
const wrapper2 = { validate: validate73 };
function validate73(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/protocol-rule-set.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate73.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        const _errs1 = errors;
        for (const key0 in data) {
            if (!((((((key0 === "$encryption") || (key0 === "$actions")) || (key0 === "$role")) || (key0 === "$size")) || (key0 === "$tags")) || (pattern39.test(key0)))) {
                validate73.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                return false;
                break;
            }
        }
        if (_errs1 === errors) {
            if (data.$encryption !== undefined) {
                let data0 = data.$encryption;
                const _errs2 = errors;
                if (errors === _errs2) {
                    if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
                        let missing0;
                        if (((data0.rootKeyId === undefined) && (missing0 = "rootKeyId")) || ((data0.publicKeyJwk === undefined) && (missing0 = "publicKeyJwk"))) {
                            validate73.errors = [{ instancePath: instancePath + "/$encryption", schemaPath: "#/properties/%24encryption/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
                            return false;
                        }
                        else {
                            const _errs4 = errors;
                            for (const key1 in data0) {
                                if (!((key1 === "rootKeyId") || (key1 === "publicKeyJwk"))) {
                                    validate73.errors = [{ instancePath: instancePath + "/$encryption", schemaPath: "#/properties/%24encryption/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                    return false;
                                    break;
                                }
                            }
                            if (_errs4 === errors) {
                                if (data0.rootKeyId !== undefined) {
                                    const _errs5 = errors;
                                    if (typeof data0.rootKeyId !== "string") {
                                        validate73.errors = [{ instancePath: instancePath + "/$encryption/rootKeyId", schemaPath: "#/properties/%24encryption/properties/rootKeyId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid1 = _errs5 === errors;
                                }
                                else {
                                    var valid1 = true;
                                }
                                if (valid1) {
                                    if (data0.publicKeyJwk !== undefined) {
                                        const _errs7 = errors;
                                        if (!(validate33(data0.publicKeyJwk, { instancePath: instancePath + "/$encryption/publicKeyJwk", parentData: data0, parentDataProperty: "publicKeyJwk", rootData, dynamicAnchors }))) {
                                            vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
                                            errors = vErrors.length;
                                        }
                                        var valid1 = _errs7 === errors;
                                    }
                                    else {
                                        var valid1 = true;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        validate73.errors = [{ instancePath: instancePath + "/$encryption", schemaPath: "#/properties/%24encryption/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                        return false;
                    }
                }
                var valid0 = _errs2 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.$actions !== undefined) {
                    let data3 = data.$actions;
                    const _errs8 = errors;
                    if (errors === _errs8) {
                        if (Array.isArray(data3)) {
                            if (data3.length < 1) {
                                validate73.errors = [{ instancePath: instancePath + "/$actions", schemaPath: "#/properties/%24actions/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                return false;
                            }
                            else {
                                var valid2 = true;
                                const len0 = data3.length;
                                for (let i0 = 0; i0 < len0; i0++) {
                                    let data4 = data3[i0];
                                    const _errs10 = errors;
                                    if (!(data4 && typeof data4 == "object" && !Array.isArray(data4))) {
                                        validate73.errors = [{ instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                    const _errs12 = errors;
                                    let valid3 = false;
                                    let passing0 = null;
                                    const _errs13 = errors;
                                    if (data4 && typeof data4 == "object" && !Array.isArray(data4)) {
                                        let missing1;
                                        if (((data4.who === undefined) && (missing1 = "who")) || ((data4.can === undefined) && (missing1 = "can"))) {
                                            const err0 = { instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/oneOf/0/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
                                            if (vErrors === null) {
                                                vErrors = [err0];
                                            }
                                            else {
                                                vErrors.push(err0);
                                            }
                                            errors++;
                                        }
                                        else {
                                            const _errs14 = errors;
                                            for (const key2 in data4) {
                                                if (!(((key2 === "who") || (key2 === "of")) || (key2 === "can"))) {
                                                    const err1 = { instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/oneOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" };
                                                    if (vErrors === null) {
                                                        vErrors = [err1];
                                                    }
                                                    else {
                                                        vErrors.push(err1);
                                                    }
                                                    errors++;
                                                    break;
                                                }
                                            }
                                            if (_errs14 === errors) {
                                                if (data4.who !== undefined) {
                                                    let data5 = data4.who;
                                                    const _errs15 = errors;
                                                    if (typeof data5 !== "string") {
                                                        const err2 = { instancePath: instancePath + "/$actions/" + i0 + "/who", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/who/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                        if (vErrors === null) {
                                                            vErrors = [err2];
                                                        }
                                                        else {
                                                            vErrors.push(err2);
                                                        }
                                                        errors++;
                                                    }
                                                    if (!(((data5 === "anyone") || (data5 === "author")) || (data5 === "recipient"))) {
                                                        const err3 = { instancePath: instancePath + "/$actions/" + i0 + "/who", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/who/enum", keyword: "enum", params: { allowedValues: schema117.properties.$actions.items.oneOf[0].properties.who.enum }, message: "must be equal to one of the allowed values" };
                                                        if (vErrors === null) {
                                                            vErrors = [err3];
                                                        }
                                                        else {
                                                            vErrors.push(err3);
                                                        }
                                                        errors++;
                                                    }
                                                    var valid4 = _errs15 === errors;
                                                }
                                                else {
                                                    var valid4 = true;
                                                }
                                                if (valid4) {
                                                    if (data4.of !== undefined) {
                                                        const _errs17 = errors;
                                                        if (typeof data4.of !== "string") {
                                                            const err4 = { instancePath: instancePath + "/$actions/" + i0 + "/of", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/of/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                            if (vErrors === null) {
                                                                vErrors = [err4];
                                                            }
                                                            else {
                                                                vErrors.push(err4);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid4 = _errs17 === errors;
                                                    }
                                                    else {
                                                        var valid4 = true;
                                                    }
                                                    if (valid4) {
                                                        if (data4.can !== undefined) {
                                                            let data7 = data4.can;
                                                            const _errs19 = errors;
                                                            if (errors === _errs19) {
                                                                if (Array.isArray(data7)) {
                                                                    if (data7.length < 1) {
                                                                        const err5 = { instancePath: instancePath + "/$actions/" + i0 + "/can", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/can/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" };
                                                                        if (vErrors === null) {
                                                                            vErrors = [err5];
                                                                        }
                                                                        else {
                                                                            vErrors.push(err5);
                                                                        }
                                                                        errors++;
                                                                    }
                                                                    else {
                                                                        var valid5 = true;
                                                                        const len1 = data7.length;
                                                                        for (let i1 = 0; i1 < len1; i1++) {
                                                                            let data8 = data7[i1];
                                                                            const _errs21 = errors;
                                                                            if (typeof data8 !== "string") {
                                                                                const err6 = { instancePath: instancePath + "/$actions/" + i0 + "/can/" + i1, schemaPath: "#/properties/%24actions/items/oneOf/0/properties/can/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                if (vErrors === null) {
                                                                                    vErrors = [err6];
                                                                                }
                                                                                else {
                                                                                    vErrors.push(err6);
                                                                                }
                                                                                errors++;
                                                                            }
                                                                            if (!((((((((data8 === "co-delete") || (data8 === "co-prune")) || (data8 === "co-update")) || (data8 === "create")) || (data8 === "delete")) || (data8 === "prune")) || (data8 === "read")) || (data8 === "update"))) {
                                                                                const err7 = { instancePath: instancePath + "/$actions/" + i0 + "/can/" + i1, schemaPath: "#/properties/%24actions/items/oneOf/0/properties/can/items/enum", keyword: "enum", params: { allowedValues: schema117.properties.$actions.items.oneOf[0].properties.can.items.enum }, message: "must be equal to one of the allowed values" };
                                                                                if (vErrors === null) {
                                                                                    vErrors = [err7];
                                                                                }
                                                                                else {
                                                                                    vErrors.push(err7);
                                                                                }
                                                                                errors++;
                                                                            }
                                                                            var valid5 = _errs21 === errors;
                                                                            if (!valid5) {
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    const err8 = { instancePath: instancePath + "/$actions/" + i0 + "/can", schemaPath: "#/properties/%24actions/items/oneOf/0/properties/can/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                    if (vErrors === null) {
                                                                        vErrors = [err8];
                                                                    }
                                                                    else {
                                                                        vErrors.push(err8);
                                                                    }
                                                                    errors++;
                                                                }
                                                            }
                                                            var valid4 = _errs19 === errors;
                                                        }
                                                        else {
                                                            var valid4 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    var _valid0 = _errs13 === errors;
                                    if (_valid0) {
                                        valid3 = true;
                                        passing0 = 0;
                                        var props1 = true;
                                    }
                                    const _errs23 = errors;
                                    if (data4 && typeof data4 == "object" && !Array.isArray(data4)) {
                                        let missing2;
                                        if (((data4.role === undefined) && (missing2 = "role")) || ((data4.can === undefined) && (missing2 = "can"))) {
                                            const err9 = { instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/oneOf/1/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
                                            if (vErrors === null) {
                                                vErrors = [err9];
                                            }
                                            else {
                                                vErrors.push(err9);
                                            }
                                            errors++;
                                        }
                                        else {
                                            if (data4.role !== undefined) {
                                                const _errs24 = errors;
                                                if (typeof data4.role !== "string") {
                                                    const err10 = { instancePath: instancePath + "/$actions/" + i0 + "/role", schemaPath: "#/properties/%24actions/items/oneOf/1/properties/role/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err10];
                                                    }
                                                    else {
                                                        vErrors.push(err10);
                                                    }
                                                    errors++;
                                                }
                                                var valid6 = _errs24 === errors;
                                            }
                                            else {
                                                var valid6 = true;
                                            }
                                            if (valid6) {
                                                if (data4.can !== undefined) {
                                                    let data10 = data4.can;
                                                    const _errs27 = errors;
                                                    if (errors === _errs27) {
                                                        if (Array.isArray(data10)) {
                                                            if (data10.length < 1) {
                                                                const err11 = { instancePath: instancePath + "/$actions/" + i0 + "/can", schemaPath: "#/properties/%24actions/items/oneOf/1/properties/can/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err11];
                                                                }
                                                                else {
                                                                    vErrors.push(err11);
                                                                }
                                                                errors++;
                                                            }
                                                            else {
                                                                var valid7 = true;
                                                                const len2 = data10.length;
                                                                for (let i2 = 0; i2 < len2; i2++) {
                                                                    let data11 = data10[i2];
                                                                    const _errs29 = errors;
                                                                    if (typeof data11 !== "string") {
                                                                        const err12 = { instancePath: instancePath + "/$actions/" + i0 + "/can/" + i2, schemaPath: "#/properties/%24actions/items/oneOf/1/properties/can/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                        if (vErrors === null) {
                                                                            vErrors = [err12];
                                                                        }
                                                                        else {
                                                                            vErrors.push(err12);
                                                                        }
                                                                        errors++;
                                                                    }
                                                                    if (!((((((((data11 === "co-delete") || (data11 === "co-update")) || (data11 === "create")) || (data11 === "delete")) || (data11 === "query")) || (data11 === "subscribe")) || (data11 === "read")) || (data11 === "update"))) {
                                                                        const err13 = { instancePath: instancePath + "/$actions/" + i0 + "/can/" + i2, schemaPath: "#/properties/%24actions/items/oneOf/1/properties/can/items/enum", keyword: "enum", params: { allowedValues: schema117.properties.$actions.items.oneOf[1].properties.can.items.enum }, message: "must be equal to one of the allowed values" };
                                                                        if (vErrors === null) {
                                                                            vErrors = [err13];
                                                                        }
                                                                        else {
                                                                            vErrors.push(err13);
                                                                        }
                                                                        errors++;
                                                                    }
                                                                    var valid7 = _errs29 === errors;
                                                                    if (!valid7) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            const err14 = { instancePath: instancePath + "/$actions/" + i0 + "/can", schemaPath: "#/properties/%24actions/items/oneOf/1/properties/can/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                            if (vErrors === null) {
                                                                vErrors = [err14];
                                                            }
                                                            else {
                                                                vErrors.push(err14);
                                                            }
                                                            errors++;
                                                        }
                                                    }
                                                    var valid6 = _errs27 === errors;
                                                }
                                                else {
                                                    var valid6 = true;
                                                }
                                            }
                                        }
                                    }
                                    var _valid0 = _errs23 === errors;
                                    if (_valid0 && valid3) {
                                        valid3 = false;
                                        passing0 = [passing0, 1];
                                    }
                                    else {
                                        if (_valid0) {
                                            valid3 = true;
                                            passing0 = 1;
                                            if (props1 !== true) {
                                                props1 = props1 || {};
                                                props1.role = true;
                                                props1.can = true;
                                            }
                                        }
                                    }
                                    if (!valid3) {
                                        const err15 = { instancePath: instancePath + "/$actions/" + i0, schemaPath: "#/properties/%24actions/items/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
                                        if (vErrors === null) {
                                            vErrors = [err15];
                                        }
                                        else {
                                            vErrors.push(err15);
                                        }
                                        errors++;
                                        validate73.errors = vErrors;
                                        return false;
                                    }
                                    else {
                                        errors = _errs12;
                                        if (vErrors !== null) {
                                            if (_errs12) {
                                                vErrors.length = _errs12;
                                            }
                                            else {
                                                vErrors = null;
                                            }
                                        }
                                    }
                                    var valid2 = _errs10 === errors;
                                    if (!valid2) {
                                        break;
                                    }
                                }
                            }
                        }
                        else {
                            validate73.errors = [{ instancePath: instancePath + "/$actions", schemaPath: "#/properties/%24actions/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                            return false;
                        }
                    }
                    var valid0 = _errs8 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.$role !== undefined) {
                        const _errs31 = errors;
                        if (typeof data.$role !== "boolean") {
                            validate73.errors = [{ instancePath: instancePath + "/$role", schemaPath: "#/properties/%24role/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                            return false;
                        }
                        var valid0 = _errs31 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.$size !== undefined) {
                            let data13 = data.$size;
                            const _errs34 = errors;
                            if (errors === _errs34) {
                                if (data13 && typeof data13 == "object" && !Array.isArray(data13)) {
                                    const _errs36 = errors;
                                    for (const key3 in data13) {
                                        if (!((key3 === "min") || (key3 === "max"))) {
                                            validate73.errors = [{ instancePath: instancePath + "/$size", schemaPath: "#/properties/%24size/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs36 === errors) {
                                        if (data13.min !== undefined) {
                                            let data14 = data13.min;
                                            const _errs37 = errors;
                                            if (errors === _errs37) {
                                                if ((typeof data14 == "number") && (isFinite(data14))) {
                                                    if (data14 < 0 || isNaN(data14)) {
                                                        validate73.errors = [{ instancePath: instancePath + "/$size/min", schemaPath: "#/properties/%24size/properties/min/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                                        return false;
                                                    }
                                                }
                                                else {
                                                    validate73.errors = [{ instancePath: instancePath + "/$size/min", schemaPath: "#/properties/%24size/properties/min/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                    return false;
                                                }
                                            }
                                            var valid8 = _errs37 === errors;
                                        }
                                        else {
                                            var valid8 = true;
                                        }
                                        if (valid8) {
                                            if (data13.max !== undefined) {
                                                let data15 = data13.max;
                                                const _errs39 = errors;
                                                if (errors === _errs39) {
                                                    if ((typeof data15 == "number") && (isFinite(data15))) {
                                                        if (data15 < 0 || isNaN(data15)) {
                                                            validate73.errors = [{ instancePath: instancePath + "/$size/max", schemaPath: "#/properties/%24size/properties/max/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0" }];
                                                            return false;
                                                        }
                                                    }
                                                    else {
                                                        validate73.errors = [{ instancePath: instancePath + "/$size/max", schemaPath: "#/properties/%24size/properties/max/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                        return false;
                                                    }
                                                }
                                                var valid8 = _errs39 === errors;
                                            }
                                            else {
                                                var valid8 = true;
                                            }
                                        }
                                    }
                                }
                                else {
                                    validate73.errors = [{ instancePath: instancePath + "/$size", schemaPath: "#/properties/%24size/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs34 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.$tags !== undefined) {
                                let data16 = data.$tags;
                                const _errs41 = errors;
                                if (errors === _errs41) {
                                    if (data16 && typeof data16 == "object" && !Array.isArray(data16)) {
                                        if (Object.keys(data16).length < 1) {
                                            validate73.errors = [{ instancePath: instancePath + "/$tags", schemaPath: "#/properties/%24tags/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                            return false;
                                        }
                                        else {
                                            if (data16.$requiredTags !== undefined) {
                                                let data17 = data16.$requiredTags;
                                                const _errs43 = errors;
                                                if (errors === _errs43) {
                                                    if (Array.isArray(data17)) {
                                                        var valid10 = true;
                                                        const len3 = data17.length;
                                                        for (let i3 = 0; i3 < len3; i3++) {
                                                            const _errs45 = errors;
                                                            if (typeof data17[i3] !== "string") {
                                                                validate73.errors = [{ instancePath: instancePath + "/$tags/$requiredTags/" + i3, schemaPath: "#/properties/%24tags/properties/%24requiredTags/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                return false;
                                                            }
                                                            var valid10 = _errs45 === errors;
                                                            if (!valid10) {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        validate73.errors = [{ instancePath: instancePath + "/$tags/$requiredTags", schemaPath: "#/properties/%24tags/properties/%24requiredTags/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                        return false;
                                                    }
                                                }
                                                var valid9 = _errs43 === errors;
                                            }
                                            else {
                                                var valid9 = true;
                                            }
                                            if (valid9) {
                                                if (data16.$allowUndefinedTags !== undefined) {
                                                    const _errs47 = errors;
                                                    if (typeof data16.$allowUndefinedTags !== "boolean") {
                                                        validate73.errors = [{ instancePath: instancePath + "/$tags/$allowUndefinedTags", schemaPath: "#/properties/%24tags/properties/%24allowUndefinedTags/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                        return false;
                                                    }
                                                    var valid9 = _errs47 === errors;
                                                }
                                                else {
                                                    var valid9 = true;
                                                }
                                                if (valid9) {
                                                    var props2 = {};
                                                    props2.$requiredTags = true;
                                                    props2.$allowUndefinedTags = true;
                                                    for (const key4 in data16) {
                                                        if (pattern40.test(key4)) {
                                                            let data20 = data16[key4];
                                                            const _errs49 = errors;
                                                            if (errors === _errs49) {
                                                                if (data20 && typeof data20 == "object" && !Array.isArray(data20)) {
                                                                    const _errs51 = errors;
                                                                    for (const key5 in data20) {
                                                                        if (!((((key5 === "type") || (key5 === "items")) || (key5 === "contains")) || (pattern41.test(key5)))) {
                                                                            validate73.errors = [{ instancePath: instancePath + "/$tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/%24tags/patternProperties/%5E(%3F!%5C%24requiredTags%24%7C%5C%24allowUndefinedTags%24).*%24/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }];
                                                                            return false;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (_errs51 === errors) {
                                                                        if (data20.type !== undefined) {
                                                                            let data21 = data20.type;
                                                                            const _errs52 = errors;
                                                                            if (!(((((data21 === "string") || (data21 === "number")) || (data21 === "integer")) || (data21 === "boolean")) || (data21 === "array"))) {
                                                                                validate73.errors = [{ instancePath: instancePath + "/$tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1") + "/type", schemaPath: "#/properties/%24tags/patternProperties/%5E(%3F!%5C%24requiredTags%24%7C%5C%24allowUndefinedTags%24).*%24/properties/type/enum", keyword: "enum", params: { allowedValues: schema117.properties.$tags.patternProperties["^(?!\\$requiredTags$|\\$allowUndefinedTags$).*$"].properties.type.enum }, message: "must be equal to one of the allowed values" }];
                                                                                return false;
                                                                            }
                                                                            var valid12 = _errs52 === errors;
                                                                        }
                                                                        else {
                                                                            var valid12 = true;
                                                                        }
                                                                        if (valid12) {
                                                                            if (data20.items !== undefined) {
                                                                                let data22 = data20.items;
                                                                                const _errs53 = errors;
                                                                                if (errors === _errs53) {
                                                                                    if (data22 && typeof data22 == "object" && !Array.isArray(data22)) {
                                                                                        if (data22.type !== undefined) {
                                                                                            let data23 = data22.type;
                                                                                            const _errs55 = errors;
                                                                                            if (!(((data23 === "string") || (data23 === "number")) || (data23 === "integer"))) {
                                                                                                validate73.errors = [{ instancePath: instancePath + "/$tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1") + "/items/type", schemaPath: "#/properties/%24tags/patternProperties/%5E(%3F!%5C%24requiredTags%24%7C%5C%24allowUndefinedTags%24).*%24/properties/items/properties/type/enum", keyword: "enum", params: { allowedValues: schema117.properties.$tags.patternProperties["^(?!\\$requiredTags$|\\$allowUndefinedTags$).*$"].properties.items.properties.type.enum }, message: "must be equal to one of the allowed values" }];
                                                                                                return false;
                                                                                            }
                                                                                            var valid13 = _errs55 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid13 = true;
                                                                                        }
                                                                                        if (valid13) {
                                                                                            var props3 = {};
                                                                                            props3.type = true;
                                                                                            for (const key6 in data22) {
                                                                                                if (pattern42.test(key6)) {
                                                                                                    props3[key6] = true;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        validate73.errors = [{ instancePath: instancePath + "/$tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1") + "/items", schemaPath: "#/properties/%24tags/patternProperties/%5E(%3F!%5C%24requiredTags%24%7C%5C%24allowUndefinedTags%24).*%24/properties/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                var valid12 = _errs53 === errors;
                                                                            }
                                                                            else {
                                                                                var valid12 = true;
                                                                            }
                                                                            if (valid12) {
                                                                                if (data20.contains !== undefined) {
                                                                                    let data24 = data20.contains;
                                                                                    const _errs56 = errors;
                                                                                    if (errors === _errs56) {
                                                                                        if (data24 && typeof data24 == "object" && !Array.isArray(data24)) {
                                                                                            if (data24.type !== undefined) {
                                                                                                let data25 = data24.type;
                                                                                                const _errs58 = errors;
                                                                                                if (!(((data25 === "string") || (data25 === "number")) || (data25 === "integer"))) {
                                                                                                    validate73.errors = [{ instancePath: instancePath + "/$tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1") + "/contains/type", schemaPath: "#/properties/%24tags/patternProperties/%5E(%3F!%5C%24requiredTags%24%7C%5C%24allowUndefinedTags%24).*%24/properties/contains/properties/type/enum", keyword: "enum", params: { allowedValues: schema117.properties.$tags.patternProperties["^(?!\\$requiredTags$|\\$allowUndefinedTags$).*$"].properties.contains.properties.type.enum }, message: "must be equal to one of the allowed values" }];
                                                                                                    return false;
                                                                                                }
                                                                                                var valid15 = _errs58 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid15 = true;
                                                                                            }
                                                                                            if (valid15) {
                                                                                                var props4 = {};
                                                                                                props4.type = true;
                                                                                                for (const key7 in data24) {
                                                                                                    if (pattern42.test(key7)) {
                                                                                                        props4[key7] = true;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            validate73.errors = [{ instancePath: instancePath + "/$tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1") + "/contains", schemaPath: "#/properties/%24tags/patternProperties/%5E(%3F!%5C%24requiredTags%24%7C%5C%24allowUndefinedTags%24).*%24/properties/contains/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    var valid12 = _errs56 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid12 = true;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    validate73.errors = [{ instancePath: instancePath + "/$tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/%24tags/patternProperties/%5E(%3F!%5C%24requiredTags%24%7C%5C%24allowUndefinedTags%24).*%24/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                    return false;
                                                                }
                                                            }
                                                            props2[key4] = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate73.errors = [{ instancePath: instancePath + "/$tags", schemaPath: "#/properties/%24tags/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs41 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                var valid17 = true;
                                for (const key8 in data) {
                                    if (pattern39.test(key8)) {
                                        const _errs59 = errors;
                                        if (!(wrapper2.validate(data[key8], { instancePath: instancePath + "/" + key8.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data, parentDataProperty: key8, rootData, dynamicAnchors }))) {
                                            vErrors = vErrors === null ? wrapper2.validate.errors : vErrors.concat(wrapper2.validate.errors);
                                            errors = vErrors.length;
                                        }
                                        var valid17 = _errs59 === errors;
                                        if (!valid17) {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate73.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate73.errors = vErrors; return errors === 0; }
validate73.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
function validate72(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/protocol-definition.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate72.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((data.protocol === undefined) && (missing0 = "protocol")) || ((data.published === undefined) && (missing0 = "published"))) || ((data.types === undefined) && (missing0 = "types"))) || ((data.structure === undefined) && (missing0 = "structure"))) {
            validate72.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "protocol") || (key0 === "published")) || (key0 === "types")) || (key0 === "structure"))) {
                    validate72.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.protocol !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.protocol !== "string") {
                        validate72.errors = [{ instancePath: instancePath + "/protocol", schemaPath: "#/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.published !== undefined) {
                        const _errs4 = errors;
                        if (typeof data.published !== "boolean") {
                            validate72.errors = [{ instancePath: instancePath + "/published", schemaPath: "#/properties/published/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.types !== undefined) {
                            let data2 = data.types;
                            const _errs6 = errors;
                            if (errors === _errs6) {
                                if (data2 && typeof data2 == "object" && !Array.isArray(data2)) {
                                    var props0 = {};
                                    for (const key1 in data2) {
                                        if (pattern37.test(key1)) {
                                            let data3 = data2[key1];
                                            const _errs8 = errors;
                                            if (errors === _errs8) {
                                                if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                                                    const _errs10 = errors;
                                                    for (const key2 in data3) {
                                                        if (!((key2 === "schema") || (key2 === "dataFormats"))) {
                                                            validate72.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/types/patternProperties/.*/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                            return false;
                                                            break;
                                                        }
                                                    }
                                                    if (_errs10 === errors) {
                                                        if (data3.schema !== undefined) {
                                                            const _errs11 = errors;
                                                            if (typeof data3.schema !== "string") {
                                                                validate72.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/schema", schemaPath: "#/properties/types/patternProperties/.*/properties/schema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                return false;
                                                            }
                                                            var valid2 = _errs11 === errors;
                                                        }
                                                        else {
                                                            var valid2 = true;
                                                        }
                                                        if (valid2) {
                                                            if (data3.dataFormats !== undefined) {
                                                                let data5 = data3.dataFormats;
                                                                const _errs13 = errors;
                                                                if (errors === _errs13) {
                                                                    if (Array.isArray(data5)) {
                                                                        if (data5.length < 1) {
                                                                            validate72.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/dataFormats", schemaPath: "#/properties/types/patternProperties/.*/properties/dataFormats/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items" }];
                                                                            return false;
                                                                        }
                                                                        else {
                                                                            var valid3 = true;
                                                                            const len0 = data5.length;
                                                                            for (let i0 = 0; i0 < len0; i0++) {
                                                                                const _errs15 = errors;
                                                                                if (typeof data5[i0] !== "string") {
                                                                                    validate72.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/dataFormats/" + i0, schemaPath: "#/properties/types/patternProperties/.*/properties/dataFormats/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                                var valid3 = _errs15 === errors;
                                                                                if (!valid3) {
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else {
                                                                        validate72.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/dataFormats", schemaPath: "#/properties/types/patternProperties/.*/properties/dataFormats/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                var valid2 = _errs13 === errors;
                                                            }
                                                            else {
                                                                var valid2 = true;
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    validate72.errors = [{ instancePath: instancePath + "/types/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/types/patternProperties/.*/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                    return false;
                                                }
                                            }
                                            props0[key1] = true;
                                        }
                                    }
                                }
                                else {
                                    validate72.errors = [{ instancePath: instancePath + "/types", schemaPath: "#/properties/types/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.structure !== undefined) {
                                let data7 = data.structure;
                                const _errs17 = errors;
                                if (errors === _errs17) {
                                    if (data7 && typeof data7 == "object" && !Array.isArray(data7)) {
                                        var props1 = {};
                                        for (const key3 in data7) {
                                            if (pattern37.test(key3)) {
                                                if (!(validate73(data7[key3], { instancePath: instancePath + "/structure/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data7, parentDataProperty: key3, rootData, dynamicAnchors }))) {
                                                    vErrors = vErrors === null ? validate73.errors : vErrors.concat(validate73.errors);
                                                    errors = vErrors.length;
                                                }
                                                props1[key3] = true;
                                            }
                                        }
                                    }
                                    else {
                                        validate72.errors = [{ instancePath: instancePath + "/structure", schemaPath: "#/properties/structure/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs17 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate72.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate72.errors = vErrors; return errors === 0; }
validate72.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const ProtocolRuleSet = validate73;
export const ProtocolsConfigure = validate76;
const schema118 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/protocols-configure.json", "type": "object", "additionalProperties": false, "required": ["authorization", "descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "definition"], "properties": { "interface": { "enum": ["Protocols"], "type": "string" }, "method": { "enum": ["Configure"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "definition": { "$ref": "https://identity.foundation/dwn/json-schemas/protocol-definition.json" } } } } };
function validate76(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/protocols-configure.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate76.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.authorization === undefined) && (missing0 = "authorization")) || ((data.descriptor === undefined) && (missing0 = "descriptor"))) {
            validate76.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate76.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate20(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.definition === undefined) && (missing1 = "definition"))) {
                                    validate76.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "definition"))) {
                                            validate76.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate76.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Protocols")) {
                                                validate76.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema118.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate76.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Configure")) {
                                                    validate76.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema118.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate76.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate76.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.definition !== undefined) {
                                                        const _errs13 = errors;
                                                        if (!(validate72(data1.definition, { instancePath: instancePath + "/descriptor/definition", parentData: data1, parentDataProperty: "definition", rootData, dynamicAnchors }))) {
                                                            vErrors = vErrors === null ? validate72.errors : vErrors.concat(validate72.errors);
                                                            errors = vErrors.length;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate76.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate76.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate76.errors = vErrors; return errors === 0; }
validate76.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const ProtocolsQuery = validate79;
const schema120 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/protocols-query.json", "type": "object", "additionalProperties": false, "required": ["descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp"], "properties": { "interface": { "enum": ["Protocols"], "type": "string" }, "method": { "enum": ["Query"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "filter": { "type": "object", "minProperties": 1, "additionalProperties": false, "properties": { "protocol": { "type": "string" }, "recipient": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did" } } } } } } };
function validate79(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/protocols-query.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate79.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptor === undefined) && (missing0 = "descriptor")) {
            validate79.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate79.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate20(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if ((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) {
                                    validate79.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filter"))) {
                                            validate79.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate79.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Protocols")) {
                                                validate79.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema120.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate79.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Query")) {
                                                    validate79.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema120.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate79.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate79.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filter !== undefined) {
                                                        let data5 = data1.filter;
                                                        const _errs13 = errors;
                                                        if (errors === _errs13) {
                                                            if (data5 && typeof data5 == "object" && !Array.isArray(data5)) {
                                                                if (Object.keys(data5).length < 1) {
                                                                    validate79.errors = [{ instancePath: instancePath + "/descriptor/filter", schemaPath: "#/properties/descriptor/properties/filter/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
                                                                    return false;
                                                                }
                                                                else {
                                                                    const _errs15 = errors;
                                                                    for (const key2 in data5) {
                                                                        if (!((key2 === "protocol") || (key2 === "recipient"))) {
                                                                            validate79.errors = [{ instancePath: instancePath + "/descriptor/filter", schemaPath: "#/properties/descriptor/properties/filter/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                            return false;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (_errs15 === errors) {
                                                                        if (data5.protocol !== undefined) {
                                                                            const _errs16 = errors;
                                                                            if (typeof data5.protocol !== "string") {
                                                                                validate79.errors = [{ instancePath: instancePath + "/descriptor/filter/protocol", schemaPath: "#/properties/descriptor/properties/filter/properties/protocol/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            var valid3 = _errs16 === errors;
                                                                        }
                                                                        else {
                                                                            var valid3 = true;
                                                                        }
                                                                        if (valid3) {
                                                                            if (data5.recipient !== undefined) {
                                                                                let data7 = data5.recipient;
                                                                                const _errs18 = errors;
                                                                                const _errs19 = errors;
                                                                                if (errors === _errs19) {
                                                                                    if (typeof data7 === "string") {
                                                                                        if (!pattern12.test(data7)) {
                                                                                            validate79.errors = [{ instancePath: instancePath + "/descriptor/filter/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/pattern", keyword: "pattern", params: { pattern: "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" }, message: "must match pattern \"" + "^did:([a-z0-9]+):((?:(?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))*:)*((?:[a-zA-Z0-9._-]|(?:%[0-9a-fA-F]{2}))+))((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$" + "\"" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        validate79.errors = [{ instancePath: instancePath + "/descriptor/filter/recipient", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/did/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                var valid3 = _errs18 === errors;
                                                                            }
                                                                            else {
                                                                                var valid3 = true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate79.errors = [{ instancePath: instancePath + "/descriptor/filter", schemaPath: "#/properties/descriptor/properties/filter/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate79.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate79.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate79.errors = vErrors; return errors === 0; }
validate79.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const RecordsRead = validate81;
const schema123 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/records-read.json", "type": "object", "additionalProperties": false, "required": ["descriptor"], "properties": { "authorization": { "$ref": "https://identity.foundation/dwn/json-schemas/authorization-delegated-grant.json" }, "descriptor": { "type": "object", "additionalProperties": false, "required": ["interface", "method", "messageTimestamp", "filter"], "properties": { "interface": { "enum": ["Records"], "type": "string" }, "method": { "enum": ["Read"], "type": "string" }, "messageTimestamp": { "$ref": "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time" }, "filter": { "$ref": "https://identity.foundation/dwn/json-schemas/records-filter.json" } } } } };
function validate81(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/records-read.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate81.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptor === undefined) && (missing0 = "descriptor")) {
            validate81.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((key0 === "authorization") || (key0 === "descriptor"))) {
                    validate81.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.authorization !== undefined) {
                    const _errs2 = errors;
                    if (!(validate24(data.authorization, { instancePath: instancePath + "/authorization", parentData: data, parentDataProperty: "authorization", rootData, dynamicAnchors }))) {
                        vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
                        errors = vErrors.length;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.descriptor !== undefined) {
                        let data1 = data.descriptor;
                        const _errs3 = errors;
                        if (errors === _errs3) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if (((((data1.interface === undefined) && (missing1 = "interface")) || ((data1.method === undefined) && (missing1 = "method"))) || ((data1.messageTimestamp === undefined) && (missing1 = "messageTimestamp"))) || ((data1.filter === undefined) && (missing1 = "filter"))) {
                                    validate81.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                    return false;
                                }
                                else {
                                    const _errs5 = errors;
                                    for (const key1 in data1) {
                                        if (!((((key1 === "interface") || (key1 === "method")) || (key1 === "messageTimestamp")) || (key1 === "filter"))) {
                                            validate81.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                            return false;
                                            break;
                                        }
                                    }
                                    if (_errs5 === errors) {
                                        if (data1.interface !== undefined) {
                                            let data2 = data1.interface;
                                            const _errs6 = errors;
                                            if (typeof data2 !== "string") {
                                                validate81.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            if (!(data2 === "Records")) {
                                                validate81.errors = [{ instancePath: instancePath + "/descriptor/interface", schemaPath: "#/properties/descriptor/properties/interface/enum", keyword: "enum", params: { allowedValues: schema123.properties.descriptor.properties.interface.enum }, message: "must be equal to one of the allowed values" }];
                                                return false;
                                            }
                                            var valid1 = _errs6 === errors;
                                        }
                                        else {
                                            var valid1 = true;
                                        }
                                        if (valid1) {
                                            if (data1.method !== undefined) {
                                                let data3 = data1.method;
                                                const _errs8 = errors;
                                                if (typeof data3 !== "string") {
                                                    validate81.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                if (!(data3 === "Read")) {
                                                    validate81.errors = [{ instancePath: instancePath + "/descriptor/method", schemaPath: "#/properties/descriptor/properties/method/enum", keyword: "enum", params: { allowedValues: schema123.properties.descriptor.properties.method.enum }, message: "must be equal to one of the allowed values" }];
                                                    return false;
                                                }
                                                var valid1 = _errs8 === errors;
                                            }
                                            else {
                                                var valid1 = true;
                                            }
                                            if (valid1) {
                                                if (data1.messageTimestamp !== undefined) {
                                                    let data4 = data1.messageTimestamp;
                                                    const _errs10 = errors;
                                                    const _errs11 = errors;
                                                    if (errors === _errs11) {
                                                        if (typeof data4 === "string") {
                                                            if (!pattern14.test(data4)) {
                                                                validate81.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/pattern", keyword: "pattern", params: { pattern: "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" }, message: "must match pattern \"" + "^\\d{4}-[0-1]\\d-[0-3]\\dT(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)\\.\\d{6}Z$" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate81.errors = [{ instancePath: instancePath + "/descriptor/messageTimestamp", schemaPath: "https://identity.foundation/dwn/json-schemas/defs.json#/$defs/date-time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs10 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data1.filter !== undefined) {
                                                        const _errs13 = errors;
                                                        if (!(validate42(data1.filter, { instancePath: instancePath + "/descriptor/filter", parentData: data1, parentDataProperty: "filter", rootData, dynamicAnchors }))) {
                                                            vErrors = vErrors === null ? validate42.errors : vErrors.concat(validate42.errors);
                                                            errors = vErrors.length;
                                                        }
                                                        var valid1 = _errs13 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                validate81.errors = [{ instancePath: instancePath + "/descriptor", schemaPath: "#/properties/descriptor/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                return false;
                            }
                        }
                        var valid0 = _errs3 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate81.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate81.errors = vErrors; return errors === 0; }
validate81.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const RecordsFilter = validate42;
export const PublicJwk = validate33;
export const GenericSignaturePayload = validate84;
const schema125 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/signature-payloads/generic-signature-payload.json", "type": "object", "additionalProperties": false, "required": ["descriptorCid"], "properties": { "descriptorCid": { "type": "string" }, "delegatedGrantId": { "type": "string" }, "permissionGrantId": { "type": "string" }, "protocolRole": { "$comment": "Used in the Records interface to authorize role-authorized actions for protocol records", "type": "string" } } };
function validate84(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/signature-payloads/generic-signature-payload.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate84.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.descriptorCid === undefined) && (missing0 = "descriptorCid")) {
            validate84.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "descriptorCid") || (key0 === "delegatedGrantId")) || (key0 === "permissionGrantId")) || (key0 === "protocolRole"))) {
                    validate84.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.descriptorCid !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.descriptorCid !== "string") {
                        validate84.errors = [{ instancePath: instancePath + "/descriptorCid", schemaPath: "#/properties/descriptorCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.delegatedGrantId !== undefined) {
                        const _errs4 = errors;
                        if (typeof data.delegatedGrantId !== "string") {
                            validate84.errors = [{ instancePath: instancePath + "/delegatedGrantId", schemaPath: "#/properties/delegatedGrantId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.permissionGrantId !== undefined) {
                            const _errs6 = errors;
                            if (typeof data.permissionGrantId !== "string") {
                                validate84.errors = [{ instancePath: instancePath + "/permissionGrantId", schemaPath: "#/properties/permissionGrantId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.protocolRole !== undefined) {
                                const _errs8 = errors;
                                if (typeof data.protocolRole !== "string") {
                                    validate84.errors = [{ instancePath: instancePath + "/protocolRole", schemaPath: "#/properties/protocolRole/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid0 = _errs8 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate84.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate84.errors = vErrors; return errors === 0; }
validate84.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const RecordsWriteSignaturePayload = validate85;
const schema126 = { "$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://identity.foundation/dwn/json-schemas/signature-payloads/records-write-signature-payload.json", "type": "object", "additionalProperties": false, "required": ["descriptorCid", "recordId"], "properties": { "descriptorCid": { "type": "string" }, "recordId": { "type": "string" }, "contextId": { "type": "string" }, "attestationCid": { "type": "string" }, "encryptionCid": { "type": "string" }, "delegatedGrantId": { "type": "string" }, "permissionGrantId": { "type": "string" }, "protocolRole": { "type": "string" } } };
function validate85(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/signature-payloads/records-write-signature-payload.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate85.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.descriptorCid === undefined) && (missing0 = "descriptorCid")) || ((data.recordId === undefined) && (missing0 = "recordId"))) {
            validate85.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((((((key0 === "descriptorCid") || (key0 === "recordId")) || (key0 === "contextId")) || (key0 === "attestationCid")) || (key0 === "encryptionCid")) || (key0 === "delegatedGrantId")) || (key0 === "permissionGrantId")) || (key0 === "protocolRole"))) {
                    validate85.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.descriptorCid !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.descriptorCid !== "string") {
                        validate85.errors = [{ instancePath: instancePath + "/descriptorCid", schemaPath: "#/properties/descriptorCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.recordId !== undefined) {
                        const _errs4 = errors;
                        if (typeof data.recordId !== "string") {
                            validate85.errors = [{ instancePath: instancePath + "/recordId", schemaPath: "#/properties/recordId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.contextId !== undefined) {
                            const _errs6 = errors;
                            if (typeof data.contextId !== "string") {
                                validate85.errors = [{ instancePath: instancePath + "/contextId", schemaPath: "#/properties/contextId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs6 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.attestationCid !== undefined) {
                                const _errs8 = errors;
                                if (typeof data.attestationCid !== "string") {
                                    validate85.errors = [{ instancePath: instancePath + "/attestationCid", schemaPath: "#/properties/attestationCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid0 = _errs8 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.encryptionCid !== undefined) {
                                    const _errs10 = errors;
                                    if (typeof data.encryptionCid !== "string") {
                                        validate85.errors = [{ instancePath: instancePath + "/encryptionCid", schemaPath: "#/properties/encryptionCid/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid0 = _errs10 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.delegatedGrantId !== undefined) {
                                        const _errs12 = errors;
                                        if (typeof data.delegatedGrantId !== "string") {
                                            validate85.errors = [{ instancePath: instancePath + "/delegatedGrantId", schemaPath: "#/properties/delegatedGrantId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid0 = _errs12 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.permissionGrantId !== undefined) {
                                            const _errs14 = errors;
                                            if (typeof data.permissionGrantId !== "string") {
                                                validate85.errors = [{ instancePath: instancePath + "/permissionGrantId", schemaPath: "#/properties/permissionGrantId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid0 = _errs14 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                        if (valid0) {
                                            if (data.protocolRole !== undefined) {
                                                const _errs16 = errors;
                                                if (typeof data.protocolRole !== "string") {
                                                    validate85.errors = [{ instancePath: instancePath + "/protocolRole", schemaPath: "#/properties/protocolRole/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid0 = _errs16 === errors;
                                            }
                                            else {
                                                var valid0 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate85.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate85.errors = vErrors; return errors === 0; }
validate85.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
export const StringRangeFilter = validate86;
function validate86(data, { instancePath = "", parentData, parentDataProperty, rootData = data, dynamicAnchors = {} } = {}) { /*# sourceURL="https://identity.foundation/dwn/json-schemas/string-range-filter.json" */ ; let vErrors = null; let errors = 0; const evaluated0 = validate86.evaluated; if (evaluated0.dynamicProps) {
    evaluated0.props = undefined;
} if (evaluated0.dynamicItems) {
    evaluated0.items = undefined;
} if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (Object.keys(data).length < 1) {
            validate86.errors = [{ instancePath, schemaPath: "#/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((key0 === "gt") || (key0 === "gte")) || (key0 === "lt")) || (key0 === "lte"))) {
                    validate86.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.gt !== undefined) {
                    const _errs2 = errors;
                    const _errs3 = errors;
                    const _errs4 = errors;
                    if (data && typeof data == "object" && !Array.isArray(data)) {
                        let missing0;
                        if ((data.gte === undefined) && (missing0 = "gte")) {
                            const err0 = {};
                            if (vErrors === null) {
                                vErrors = [err0];
                            }
                            else {
                                vErrors.push(err0);
                            }
                            errors++;
                        }
                    }
                    var valid1 = _errs4 === errors;
                    if (valid1) {
                        validate86.errors = [{ instancePath, schemaPath: "#/dependencies/gt/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                        return false;
                    }
                    else {
                        errors = _errs3;
                        if (vErrors !== null) {
                            if (_errs3) {
                                vErrors.length = _errs3;
                            }
                            else {
                                vErrors = null;
                            }
                        }
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.gte !== undefined) {
                        const _errs5 = errors;
                        const _errs6 = errors;
                        const _errs7 = errors;
                        if (data && typeof data == "object" && !Array.isArray(data)) {
                            let missing1;
                            if ((data.gt === undefined) && (missing1 = "gt")) {
                                const err1 = {};
                                if (vErrors === null) {
                                    vErrors = [err1];
                                }
                                else {
                                    vErrors.push(err1);
                                }
                                errors++;
                            }
                        }
                        var valid2 = _errs7 === errors;
                        if (valid2) {
                            validate86.errors = [{ instancePath, schemaPath: "#/dependencies/gte/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                            return false;
                        }
                        else {
                            errors = _errs6;
                            if (vErrors !== null) {
                                if (_errs6) {
                                    vErrors.length = _errs6;
                                }
                                else {
                                    vErrors = null;
                                }
                            }
                        }
                        var valid0 = _errs5 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.lt !== undefined) {
                            const _errs8 = errors;
                            const _errs9 = errors;
                            const _errs10 = errors;
                            if (data && typeof data == "object" && !Array.isArray(data)) {
                                let missing2;
                                if ((data.lte === undefined) && (missing2 = "lte")) {
                                    const err2 = {};
                                    if (vErrors === null) {
                                        vErrors = [err2];
                                    }
                                    else {
                                        vErrors.push(err2);
                                    }
                                    errors++;
                                }
                            }
                            var valid3 = _errs10 === errors;
                            if (valid3) {
                                validate86.errors = [{ instancePath, schemaPath: "#/dependencies/lt/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                                return false;
                            }
                            else {
                                errors = _errs9;
                                if (vErrors !== null) {
                                    if (_errs9) {
                                        vErrors.length = _errs9;
                                    }
                                    else {
                                        vErrors = null;
                                    }
                                }
                            }
                            var valid0 = _errs8 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.lte !== undefined) {
                                const _errs11 = errors;
                                const _errs12 = errors;
                                const _errs13 = errors;
                                if (data && typeof data == "object" && !Array.isArray(data)) {
                                    let missing3;
                                    if ((data.lt === undefined) && (missing3 = "lt")) {
                                        const err3 = {};
                                        if (vErrors === null) {
                                            vErrors = [err3];
                                        }
                                        else {
                                            vErrors.push(err3);
                                        }
                                        errors++;
                                    }
                                }
                                var valid4 = _errs13 === errors;
                                if (valid4) {
                                    validate86.errors = [{ instancePath, schemaPath: "#/dependencies/lte/not", keyword: "not", params: {}, message: "must NOT be valid" }];
                                    return false;
                                }
                                else {
                                    errors = _errs12;
                                    if (vErrors !== null) {
                                        if (_errs12) {
                                            vErrors.length = _errs12;
                                        }
                                        else {
                                            vErrors = null;
                                        }
                                    }
                                }
                                var valid0 = _errs11 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.gt !== undefined) {
                                    const _errs14 = errors;
                                    if (typeof data.gt !== "string") {
                                        validate86.errors = [{ instancePath: instancePath + "/gt", schemaPath: "#/properties/gt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                    var valid5 = _errs14 === errors;
                                }
                                else {
                                    var valid5 = true;
                                }
                                if (valid5) {
                                    if (data.gte !== undefined) {
                                        const _errs16 = errors;
                                        if (typeof data.gte !== "string") {
                                            validate86.errors = [{ instancePath: instancePath + "/gte", schemaPath: "#/properties/gte/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                        var valid5 = _errs16 === errors;
                                    }
                                    else {
                                        var valid5 = true;
                                    }
                                    if (valid5) {
                                        if (data.lt !== undefined) {
                                            const _errs18 = errors;
                                            if (typeof data.lt !== "string") {
                                                validate86.errors = [{ instancePath: instancePath + "/lt", schemaPath: "#/properties/lt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid5 = _errs18 === errors;
                                        }
                                        else {
                                            var valid5 = true;
                                        }
                                        if (valid5) {
                                            if (data.lte !== undefined) {
                                                const _errs20 = errors;
                                                if (typeof data.lte !== "string") {
                                                    validate86.errors = [{ instancePath: instancePath + "/lte", schemaPath: "#/properties/lte/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                                var valid5 = _errs20 === errors;
                                            }
                                            else {
                                                var valid5 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate86.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate86.errors = vErrors; return errors === 0; }
validate86.evaluated = { "props": true, "dynamicProps": false, "dynamicItems": false };
//# sourceMappingURL=precompiled-validators.js.map