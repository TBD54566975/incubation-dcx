import { Web5Agent } from './types/agent.js';
import { PermissionGrantEntry } from './types/permissions.js';
import { DwnInterface } from './types/dwn.js';
export declare class CachedPermissions {
    /** the default value for whether a fetch is cached or not */
    private cachedDefault;
    /** Holds the instance of {@link AgentPermissionsApi} that helps when dealing with permissions protocol records */
    private permissionsApi;
    /** cache for fetching a permission {@link PermissionGrant}, keyed by a specific MessageType and protocol */
    private cachedPermissions;
    constructor({ agent, cachedDefault }: {
        agent: Web5Agent;
        cachedDefault?: boolean;
    });
    getPermission<T extends DwnInterface>({ connectedDid, delegateDid, delegate, messageType, protocol, cached }: {
        connectedDid: string;
        delegateDid: string;
        messageType: T;
        protocol?: string;
        cached?: boolean;
        delegate?: boolean;
    }): Promise<PermissionGrantEntry>;
    clear(): Promise<void>;
}
//# sourceMappingURL=cached-permissions.d.ts.map